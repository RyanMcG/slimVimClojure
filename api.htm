<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<link rel="search" href="http://www.wikispaces.com/space/opensearch" type="application/opensearchdescription+xml" title="Wikispaces Search" />
<link rel="search" href="http://clojure.org/space/opensearch" type="application/opensearchdescription+xml" title="Wikispaces Search (clojure Wiki)" />
<link rel="alternate" type="application/x-wiki" title="Edit This Page" href="/page/edit/api" />
<link rel="alternate" title="Clojure : api - Edits" href="/page/xml/api?v=rss_2_0" type="application/rss+xml" />
<link rel="alternate" title="Clojure : api - Discussion" href="/message/xml/api?v=rss_2_0" type="application/rss+xml" />
<link rel="alternate" title="Clojure - All Changes" href="/space/xmla?v=rss_2_0" type="application/rss+xml" />
<script type="text/javascript">
var wikispaces_isUserLoggedIn = false;
var wikispaces_username = '';
var wikispaces_spaceName = 'clojure';
var wikispaces_method = 'view';
var wikispaces_object = 'page';
var wikispaces_page = 'api';
var wikispaces_id = '';
var wikispaces_domain = 'wikispaces.com';
var wikispaces_isMain = true;
</script>
<script src="http://c1.wikicdn.com/_/2009043000/s/gz/common.min.js" type="text/javascript"></script>
<script type="text/javascript">
jQuery(document).ready(function(){
var pageTracker=_gat._getTracker('UA-80504-1');
pageTracker._setDomainName("none");
pageTracker._setAllowLinker(true);
pageTracker._initData();
pageTracker._trackPageview();
});

jQuery(document).ready(function(){
attachHelpWindow('/home');
});
</script>
<link rel="microsummary" href="/page/microsummary/api/edits"/>
<link rel="microsummary" href="/page/microsummary/api/messages"/>
<script type="text/javascript">

jQuery(document).ready(function() { 
  if (document.getElementById('editButton')) { 

    var inlineEditor = new WikispacesInlineEditor(
      'http://clojure.org/stylesheet/view/clojure/26467729.gz.css',
      '/api');
    inlineEditor.enableEditButton(document.getElementById('editButton'), 'WikispacesEditorContent'); 

  }
});

</script>
	<title>Clojure - api</title>
	<link rel="icon" href="/space/showimage/favicon.png">
	<link rel="shortcut icon" href="/space/showimage/favicon.png">
	<link rel="stylesheet" href="http://c2.wikicdn.com/_/2009043000/s/gz/theme_common.css" type="text/css" />
	<link rel="stylesheet" href="/file/view/Clojure.css" type="text/css" media="all" />
	<link rel="stylesheet" href="/file/view/print.css" type="text/css" media="print" />
	<script type="text/javascript" src="/file/view/code_highlighter.js"></script>
	<script type="text/javascript" src="/file/view/clojure.js"></script>
<style>.menuWrapper{height: 36px;}</style>
<link rel="stylesheet" href="http://clojure.org/stylesheet/view/clojure/26467729.gz.css" type="text/css" />
<link rel="stylesheet" href="http://c2.wikicdn.com/_/2009043000/s/gz/internal.css" type="text/css" />
<!--[if lte IE 6]>
<link rel="stylesheet" href="http://c1.wikicdn.com/_/2009043000/s/gz/internal_ie.css" type="text/css" />
<![endif]-->
<style type="text/css">#contentEditButton { display: none; }</style></head>
<body>
<div id="AllContentContainer">
	<div id="Header">
		<a href="/" id="Logo"><img src="/space/showimage/clojure-icon.gif" width="100" height="100" alt="Clojure" /></a>
		<h1><a href="/" title="Clojure">Clojure</a></h1>
		<div id="Resources">
    	<form action="/search/view" method="post" class="WikiSearch WikiElement">
				<input class="WikiSearchInput" name="q" id="q" size="10" value="" type="text">
				<input name="search" id="search" value="Search" alt="Search" type="submit">
			</form>
			<ul id="ResourcesB">
				<li><a class="wiki_link_ext" href="http://code.google.com/p/clojure/source/checkout" rel="nofollow">SVN</a></li>
				<li><a class="wiki_link_ext" href="irc://irc.freenode.net/#clojure" rel="nofollow">IRC</a>
				<li><a class="wiki_link_ext" href="http://clojure.blogspot.com/" rel="nofollow">News</a></li>
				<li><a class="wiki_link_ext" href="http://en.wikibooks.org/wiki/Clojure_Programming" rel="nofollow">Wiki</a></li>
			</ul>
			<ul id="ResourcesA">
				<li><a class="wiki_link_ext" href="http://code.google.com/p/clojure/downloads/list" rel="nofollow">Download</a></li>
				<li><a class="wiki_link_ext" href="http://groups.google.com/group/clojure" rel="nofollow">Google Group</a></li>
				<li><a class="wiki_link_ext" href="http://clojure.blip.tv/" rel="nofollow">Screencasts</a></li>
				<li><a class="wiki_link_ext" href="http://code.google.com/p/clojure-contrib/" rel="nofollow">User contribs</a></li>
			</li>
		</div>
	</div>
<div id="leftcolumn">
	<div style="text-align: center;"></div>
			<div class="menu">
						<!-- google_ad_section_start --><div class="WikiCustomNav WikiElement wiki"><a class="wiki_link" href="/rationale">Rationale</a><br />
<a class="wiki_link" href="/state">On State and Identity</a><br />
<a class="wiki_link" href="/features">Features</a><br />

<ul>
    <li><a class="wiki_link" href="/dynamic">Dynamic Development</a></li>
    <li><a class="wiki_link" href="/functional_programming">Functional Programming</a></li>
    <li><a class="wiki_link" href="/lisp">Lisp</a></li>
    <li><a class="wiki_link" href="/runtime_polymorphism">Runtime Polymorphism</a></li>
    <li><a class="wiki_link" href="/concurrent_programming">Concurrent Programming</a></li>
    <li><a class="wiki_link" href="/jvm_hosted">Hosted on the JVM</a></li>
</ul>

<a class="wiki_link" href="/Reference">Reference</a><br />

<ul>
    <li><a class="wiki_link" href="/getting_started">Getting Started</a></li>
    <li><a class="wiki_link" href="/reader">The Reader</a></li>
    <li><a class="wiki_link" href="/repl_and_main">The REPL and main</a></li>
    <li><a class="wiki_link" href="/evaluation">Evaluation</a></li>
    <li><a class="wiki_link" href="/special_forms">Special Forms</a></li>
    <li><a class="wiki_link" href="/macros">Macros</a></li>
    <li><a class="wiki_link" href="/other_functions">Other Functions</a></li>
    <li><a class="wiki_link" href="/data_structures">Data Structures</a></li>
    <li><a class="wiki_link" href="/sequences">Sequences</a></li>
    <li><a class="wiki_link" href="/multimethods">Multimethods and Hierarchies </a></li>
    <li><a class="wiki_link" href="/metadata">Metadata</a></li>
    <li><a class="wiki_link" href="/namespaces">Namespaces</a></li>
    <li><a class="wiki_link" href="/libs">Libs</a></li>
    <li><a class="wiki_link" href="/vars">Vars and Environment</a></li>
    <li><a class="wiki_link" href="/refs">Refs and Transactions</a></li>
    <li><a class="wiki_link" href="/agents">Agents</a></li>
    <li><a class="wiki_link" href="/atoms">Atoms</a></li>
    <li><a class="wiki_link" href="/java_interop">Java Interop</a></li>
    <li><a class="wiki_link" href="/compilation">Compilation and Class Generation</a></li>
    <li><a class="wiki_link" href="/other_libraries">Other Libraries</a></li>
    <li><a class="wiki_link" href="/lisps">Differences with Lisps</a></li>
    <li><a class="wiki_link" href="/api">API</a></li>
    <li><a class="wiki_link_ext" href="http://clojure.org/space/changes" rel="nofollow">Recent Changes</a></li>
</ul>

<a class="wiki_link" href="/libraries">Libraries</a><br />
<a class="wiki_link" href="/community">Community</a><br />
<a class="wiki_link" href="/license">License</a><br />
<a class="wiki_link" href="/contributing">Contributing</a></div><!-- google_ad_section_end -->		</div>
	</div>
<!-- /leftcolumn -->
	<div id="rightcolumn">
						<div id="Content">
			<div class="contentBox"><div class="innerContentBox"><div id="WikiAdMargin" style="">

  <textarea id="autosaveContent" style="display:none;" rows="1" cols="1"></textarea>
  <div id="autosavePrompt" style="display:none;"></div>

  <div class="wiki wikiPage" id="content_view">
      <div id="contentEditButton">
<img alt="Protected" title="You do not have permission to edit this page." src="http://c1.wikicdn.com/i/edit_nopermission.png" style="float: right; margin: 0 0 .5em .5em;" width="128" height="37" />
</div>    <!-- google_ad_section_start -->
  <div id="toc"><h1 class="nopad">Table of Contents</h1><div style="margin-left: 1em;"><a href="#toc0">API</a></div>
<div style="margin-left: 2em;"><a href="#toc1">clojure.core</a></div>
<div style="margin-left: 3em;"><a href="#toc2">(* )</a></div>
<div style="margin-left: 3em;"><a href="#toc3">(* x)</a></div>
<div style="margin-left: 3em;"><a href="#toc4">(* x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc5">(* x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc6">*1</a></div>
<div style="margin-left: 3em;"><a href="#toc7">*2</a></div>
<div style="margin-left: 3em;"><a href="#toc8">*3</a></div>
<div style="margin-left: 3em;"><a href="#toc9">*agent*</a></div>
<div style="margin-left: 3em;"><a href="#toc10">*clojure-version*</a></div>
<div style="margin-left: 3em;"><a href="#toc11">*command-line-args*</a></div>
<div style="margin-left: 3em;"><a href="#toc12">*compile-files*</a></div>
<div style="margin-left: 3em;"><a href="#toc13">*compile-path*</a></div>
<div style="margin-left: 3em;"><a href="#toc14">*e</a></div>
<div style="margin-left: 3em;"><a href="#toc15">*err*</a></div>
<div style="margin-left: 3em;"><a href="#toc16">*file*</a></div>
<div style="margin-left: 3em;"><a href="#toc17">*flush-on-newline*</a></div>
<div style="margin-left: 3em;"><a href="#toc18">*in*</a></div>
<div style="margin-left: 3em;"><a href="#toc19">*ns*</a></div>
<div style="margin-left: 3em;"><a href="#toc20">*out*</a></div>
<div style="margin-left: 3em;"><a href="#toc21">*print-dup*</a></div>
<div style="margin-left: 3em;"><a href="#toc22">*print-length*</a></div>
<div style="margin-left: 3em;"><a href="#toc23">*print-level*</a></div>
<div style="margin-left: 3em;"><a href="#toc24">*print-meta*</a></div>
<div style="margin-left: 3em;"><a href="#toc25">*print-readably*</a></div>
<div style="margin-left: 3em;"><a href="#toc26">*read-eval*</a></div>
<div style="margin-left: 3em;"><a href="#toc27">*warn-on-reflection*</a></div>
<div style="margin-left: 3em;"><a href="#toc28">(+ )</a></div>
<div style="margin-left: 3em;"><a href="#toc29">(+ x)</a></div>
<div style="margin-left: 3em;"><a href="#toc30">(+ x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc31">(+ x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc32">(- x)</a></div>
<div style="margin-left: 3em;"><a href="#toc33">(- x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc34">(- x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc35">(-> x form)</a></div>
<div style="margin-left: 3em;"><a href="#toc36">(-> x form & more)</a></div>
<div style="margin-left: 4em;"><a href="#toc37">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc38">(.. x form)</a></div>
<div style="margin-left: 3em;"><a href="#toc39">(.. x form & more)</a></div>
<div style="margin-left: 4em;"><a href="#toc40">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc41">(/ x)</a></div>
<div style="margin-left: 3em;"><a href="#toc42">(/ x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc43">(/ x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc44">(< x)</a></div>
<div style="margin-left: 3em;"><a href="#toc45">(< x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc46">(< x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc47">(<= x)</a></div>
<div style="margin-left: 3em;"><a href="#toc48">(<= x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc49">(<= x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc50">(= x)</a></div>
<div style="margin-left: 3em;"><a href="#toc51">(= x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc52">(= x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc53">(== x)</a></div>
<div style="margin-left: 3em;"><a href="#toc54">(== x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc55">(== x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc56">(> x)</a></div>
<div style="margin-left: 3em;"><a href="#toc57">(> x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc58">(> x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc59">(>= x)</a></div>
<div style="margin-left: 3em;"><a href="#toc60">(>= x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc61">(>= x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc62">(accessor s key)</a></div>
<div style="margin-left: 3em;"><a href="#toc63">(aclone array)</a></div>
<div style="margin-left: 3em;"><a href="#toc64">(add-classpath url)</a></div>
<div style="margin-left: 3em;"><a href="#toc65">(add-watch reference key fn)</a></div>
<div style="margin-left: 3em;"><a href="#toc66">(add-watcher reference send-type watcher-agent action-fn)</a></div>
<div style="margin-left: 3em;"><a href="#toc67">(agent state)</a></div>
<div style="margin-left: 3em;"><a href="#toc68">(agent state & options)</a></div>
<div style="margin-left: 3em;"><a href="#toc69">(agent-errors a)</a></div>
<div style="margin-left: 3em;"><a href="#toc70">(aget array idx)</a></div>
<div style="margin-left: 3em;"><a href="#toc71">(aget array idx & idxs)</a></div>
<div style="margin-left: 3em;"><a href="#toc72">(alength array)</a></div>
<div style="margin-left: 3em;"><a href="#toc73">(alias alias namespace-sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc74">(all-ns )</a></div>
<div style="margin-left: 3em;"><a href="#toc75">(alter ref fun & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc76">(alter-meta! iref f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc77">(alter-var-root v f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc78">(amap a idx ret expr)</a></div>
<div style="margin-left: 4em;"><a href="#toc79">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc80">(ancestors tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc81">(ancestors h tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc82">(and )</a></div>
<div style="margin-left: 3em;"><a href="#toc83">(and x)</a></div>
<div style="margin-left: 3em;"><a href="#toc84">(and x & next)</a></div>
<div style="margin-left: 4em;"><a href="#toc85">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc86">(apply f args* argseq)</a></div>
<div style="margin-left: 3em;"><a href="#toc87">(areduce a idx ret init expr)</a></div>
<div style="margin-left: 4em;"><a href="#toc88">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc89">(array-map )</a></div>
<div style="margin-left: 3em;"><a href="#toc90">(array-map & keyvals)</a></div>
<div style="margin-left: 3em;"><a href="#toc91">(aset array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc92">(aset array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc93">(aset-boolean array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc94">(aset-boolean array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc95">(aset-byte array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc96">(aset-byte array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc97">(aset-char array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc98">(aset-char array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc99">(aset-double array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc100">(aset-double array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc101">(aset-float array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc102">(aset-float array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc103">(aset-int array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc104">(aset-int array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc105">(aset-long array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc106">(aset-long array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc107">(aset-short array idx val)</a></div>
<div style="margin-left: 3em;"><a href="#toc108">(aset-short array idx idx2 & idxv)</a></div>
<div style="margin-left: 3em;"><a href="#toc109">(assert x)</a></div>
<div style="margin-left: 4em;"><a href="#toc110">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc111">(assoc map key val)</a></div>
<div style="margin-left: 3em;"><a href="#toc112">(assoc map key val & kvs)</a></div>
<div style="margin-left: 3em;"><a href="#toc113">(assoc-in m [k & ks] v)</a></div>
<div style="margin-left: 3em;"><a href="#toc114">(associative? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc115">(atom x)</a></div>
<div style="margin-left: 3em;"><a href="#toc116">(atom x & options)</a></div>
<div style="margin-left: 3em;"><a href="#toc117">(await & agents)</a></div>
<div style="margin-left: 3em;"><a href="#toc118">(await-for timeout-ms & agents)</a></div>
<div style="margin-left: 3em;"><a href="#toc119">(bases c)</a></div>
<div style="margin-left: 3em;"><a href="#toc120">(bean x)</a></div>
<div style="margin-left: 3em;"><a href="#toc121">(bigdec x)</a></div>
<div style="margin-left: 3em;"><a href="#toc122">(bigint x)</a></div>
<div style="margin-left: 3em;"><a href="#toc123">(binding bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc124">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc125">(bit-and x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc126">(bit-and-not x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc127">(bit-clear x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc128">(bit-flip x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc129">(bit-not x)</a></div>
<div style="margin-left: 3em;"><a href="#toc130">(bit-or x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc131">(bit-set x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc132">(bit-shift-left x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc133">(bit-shift-right x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc134">(bit-test x n)</a></div>
<div style="margin-left: 3em;"><a href="#toc135">(bit-xor x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc136">(boolean x)</a></div>
<div style="margin-left: 3em;"><a href="#toc137">(butlast coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc138">(byte x)</a></div>
<div style="margin-left: 3em;"><a href="#toc139">(cast c x)</a></div>
<div style="margin-left: 3em;"><a href="#toc140">(char x)</a></div>
<div style="margin-left: 3em;"><a href="#toc141">char-escape-string</a></div>
<div style="margin-left: 3em;"><a href="#toc142">char-name-string</a></div>
<div style="margin-left: 3em;"><a href="#toc143">(class x)</a></div>
<div style="margin-left: 3em;"><a href="#toc144">(class? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc145">(clear-agent-errors a)</a></div>
<div style="margin-left: 3em;"><a href="#toc146">(clojure-version )</a></div>
<div style="margin-left: 3em;"><a href="#toc147">(coll? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc148">(comment & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc149">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc150">(commute ref fun & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc151">(comp & fs)</a></div>
<div style="margin-left: 3em;"><a href="#toc152">(comparator pred)</a></div>
<div style="margin-left: 3em;"><a href="#toc153">(compare x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc154">(compare-and-set! atom oldval newval)</a></div>
<div style="margin-left: 3em;"><a href="#toc155">(compile lib)</a></div>
<div style="margin-left: 3em;"><a href="#toc156">(complement f)</a></div>
<div style="margin-left: 3em;"><a href="#toc157">(concat )</a></div>
<div style="margin-left: 3em;"><a href="#toc158">(concat x)</a></div>
<div style="margin-left: 3em;"><a href="#toc159">(concat x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc160">(concat x y & zs)</a></div>
<div style="margin-left: 3em;"><a href="#toc161">(cond & clauses)</a></div>
<div style="margin-left: 4em;"><a href="#toc162">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc163">(condp pred expr & clauses)</a></div>
<div style="margin-left: 4em;"><a href="#toc164">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc165">(conj coll x)</a></div>
<div style="margin-left: 3em;"><a href="#toc166">(conj coll x & xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc167">(cons x seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc168">(constantly x)</a></div>
<div style="margin-left: 3em;"><a href="#toc169">(construct-proxy c & ctor-args)</a></div>
<div style="margin-left: 3em;"><a href="#toc170">(contains? coll key)</a></div>
<div style="margin-left: 3em;"><a href="#toc171">(count coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc172">(counted? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc173">(create-ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc174">(create-struct & keys)</a></div>
<div style="margin-left: 3em;"><a href="#toc175">(cycle coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc176">(dec x)</a></div>
<div style="margin-left: 3em;"><a href="#toc177">(decimal? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc178">(declare & names)</a></div>
<div style="margin-left: 4em;"><a href="#toc179">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc180">(definline name & decl)</a></div>
<div style="margin-left: 4em;"><a href="#toc181">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc182">(defmacro name doc-string? attr-map? [params*] body)</a></div>
<div style="margin-left: 3em;"><a href="#toc183">(defmacro name doc-string? attr-map? ([params*] body) + attr-map?)</a></div>
<div style="margin-left: 4em;"><a href="#toc184">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc185">(defmethod multifn dispatch-val & fn-tail)</a></div>
<div style="margin-left: 4em;"><a href="#toc186">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc187">(defmulti name docstring? attr-map? dispatch-fn & options)</a></div>
<div style="margin-left: 4em;"><a href="#toc188">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc189">(defn name doc-string? attr-map? [params*] body)</a></div>
<div style="margin-left: 3em;"><a href="#toc190">(defn name doc-string? attr-map? ([params*] body) + attr-map?)</a></div>
<div style="margin-left: 4em;"><a href="#toc191">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc192">(defn- name & decls)</a></div>
<div style="margin-left: 4em;"><a href="#toc193">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc194">(defonce name expr)</a></div>
<div style="margin-left: 4em;"><a href="#toc195">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc196">(defstruct name & keys)</a></div>
<div style="margin-left: 4em;"><a href="#toc197">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc198">(delay & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc199">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc200">(delay? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc201">(deref ref)</a></div>
<div style="margin-left: 3em;"><a href="#toc202">(derive tag parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc203">(derive h tag parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc204">(descendants tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc205">(descendants h tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc206">(disj set)</a></div>
<div style="margin-left: 3em;"><a href="#toc207">(disj set key)</a></div>
<div style="margin-left: 3em;"><a href="#toc208">(disj set key & ks)</a></div>
<div style="margin-left: 3em;"><a href="#toc209">(dissoc map)</a></div>
<div style="margin-left: 3em;"><a href="#toc210">(dissoc map key)</a></div>
<div style="margin-left: 3em;"><a href="#toc211">(dissoc map key & ks)</a></div>
<div style="margin-left: 3em;"><a href="#toc212">(distinct coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc213">(distinct? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc214">(distinct? x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc215">(distinct? x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc216">(doall coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc217">(doall n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc218">(doc name)</a></div>
<div style="margin-left: 4em;"><a href="#toc219">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc220">(dorun coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc221">(dorun n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc222">(doseq seq-exprs & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc223">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc224">(dosync & exprs)</a></div>
<div style="margin-left: 4em;"><a href="#toc225">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc226">(dotimes bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc227">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc228">(doto x & forms)</a></div>
<div style="margin-left: 4em;"><a href="#toc229">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc230">(double x)</a></div>
<div style="margin-left: 3em;"><a href="#toc231">(double-array size-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc232">(double-array size init-val-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc233">(doubles xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc234">(drop n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc235">(drop-last s)</a></div>
<div style="margin-left: 3em;"><a href="#toc236">(drop-last n s)</a></div>
<div style="margin-left: 3em;"><a href="#toc237">(drop-while pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc238">(empty coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc239">(empty? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc240">(ensure ref)</a></div>
<div style="margin-left: 3em;"><a href="#toc241">(enumeration-seq e)</a></div>
<div style="margin-left: 3em;"><a href="#toc242">(eval form)</a></div>
<div style="margin-left: 3em;"><a href="#toc243">(even? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc244">(every? pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc245">(false? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc246">(ffirst x)</a></div>
<div style="margin-left: 3em;"><a href="#toc247">(file-seq dir)</a></div>
<div style="margin-left: 3em;"><a href="#toc248">(filter pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc249">(find map key)</a></div>
<div style="margin-left: 3em;"><a href="#toc250">(find-doc re-string-or-pattern)</a></div>
<div style="margin-left: 3em;"><a href="#toc251">(find-ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc252">(find-var sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc253">(first coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc254">(float x)</a></div>
<div style="margin-left: 3em;"><a href="#toc255">(float-array size-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc256">(float-array size init-val-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc257">(float? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc258">(floats xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc259">(flush )</a></div>
<div style="margin-left: 3em;"><a href="#toc260">(fn & sigs)</a></div>
<div style="margin-left: 4em;"><a href="#toc261">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc262">(fn? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc263">(fnext x)</a></div>
<div style="margin-left: 3em;"><a href="#toc264">(for seq-exprs body-expr)</a></div>
<div style="margin-left: 4em;"><a href="#toc265">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc266">(force x)</a></div>
<div style="margin-left: 3em;"><a href="#toc267">(format fmt & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc268">(future & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc269">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc270">(future-call f)</a></div>
<div style="margin-left: 3em;"><a href="#toc271">(gen-class & options)</a></div>
<div style="margin-left: 4em;"><a href="#toc272">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc273">(gen-interface & options)</a></div>
<div style="margin-left: 4em;"><a href="#toc274">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc275">(gensym )</a></div>
<div style="margin-left: 3em;"><a href="#toc276">(gensym prefix-string)</a></div>
<div style="margin-left: 3em;"><a href="#toc277">(get map key)</a></div>
<div style="margin-left: 3em;"><a href="#toc278">(get map key not-found)</a></div>
<div style="margin-left: 3em;"><a href="#toc279">(get-in m ks)</a></div>
<div style="margin-left: 3em;"><a href="#toc280">(get-method multifn dispatch-val)</a></div>
<div style="margin-left: 3em;"><a href="#toc281">(get-proxy-class & bases)</a></div>
<div style="margin-left: 3em;"><a href="#toc282">(get-validator iref)</a></div>
<div style="margin-left: 3em;"><a href="#toc283">(hash x)</a></div>
<div style="margin-left: 3em;"><a href="#toc284">(hash-map )</a></div>
<div style="margin-left: 3em;"><a href="#toc285">(hash-map & keyvals)</a></div>
<div style="margin-left: 3em;"><a href="#toc286">(hash-set )</a></div>
<div style="margin-left: 3em;"><a href="#toc287">(hash-set & keys)</a></div>
<div style="margin-left: 3em;"><a href="#toc288">(identical? x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc289">(identity x)</a></div>
<div style="margin-left: 3em;"><a href="#toc290">(if-let bindings then)</a></div>
<div style="margin-left: 3em;"><a href="#toc291">(if-let bindings then else & oldform)</a></div>
<div style="margin-left: 4em;"><a href="#toc292">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc293">(if-not test then)</a></div>
<div style="margin-left: 3em;"><a href="#toc294">(if-not test then else)</a></div>
<div style="margin-left: 4em;"><a href="#toc295">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc296">(ifn? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc297">(import & import-symbols-or-lists)</a></div>
<div style="margin-left: 3em;"><a href="#toc298">(in-ns name)</a></div>
<div style="margin-left: 3em;"><a href="#toc299">(inc x)</a></div>
<div style="margin-left: 3em;"><a href="#toc300">(init-proxy proxy mappings)</a></div>
<div style="margin-left: 3em;"><a href="#toc301">(instance? c x)</a></div>
<div style="margin-left: 3em;"><a href="#toc302">(int x)</a></div>
<div style="margin-left: 3em;"><a href="#toc303">(int-array size-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc304">(int-array size init-val-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc305">(integer? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc306">(interleave & colls)</a></div>
<div style="margin-left: 3em;"><a href="#toc307">(intern ns name)</a></div>
<div style="margin-left: 3em;"><a href="#toc308">(intern ns name val)</a></div>
<div style="margin-left: 3em;"><a href="#toc309">(interpose sep coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc310">(into to from)</a></div>
<div style="margin-left: 3em;"><a href="#toc311">(into-array aseq)</a></div>
<div style="margin-left: 3em;"><a href="#toc312">(into-array type aseq)</a></div>
<div style="margin-left: 3em;"><a href="#toc313">(ints xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc314">(io! & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc315">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc316">(isa? child parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc317">(isa? h child parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc318">(iterate f x)</a></div>
<div style="margin-left: 3em;"><a href="#toc319">(iterator-seq iter)</a></div>
<div style="margin-left: 3em;"><a href="#toc320">(key e)</a></div>
<div style="margin-left: 3em;"><a href="#toc321">(keys map)</a></div>
<div style="margin-left: 3em;"><a href="#toc322">(keyword name)</a></div>
<div style="margin-left: 3em;"><a href="#toc323">(keyword ns name)</a></div>
<div style="margin-left: 3em;"><a href="#toc324">(keyword? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc325">(last coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc326">(lazy-cat & colls)</a></div>
<div style="margin-left: 4em;"><a href="#toc327">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc328">(lazy-seq & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc329">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc330">(let bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc331">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc332">(letfn fnspecs & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc333">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc334">(line-seq rdr)</a></div>
<div style="margin-left: 3em;"><a href="#toc335">(list & items)</a></div>
<div style="margin-left: 3em;"><a href="#toc336">(list* item & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc337">(list? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc338">(load & paths)</a></div>
<div style="margin-left: 3em;"><a href="#toc339">(load-file name)</a></div>
<div style="margin-left: 3em;"><a href="#toc340">(load-reader rdr)</a></div>
<div style="margin-left: 3em;"><a href="#toc341">(load-string s)</a></div>
<div style="margin-left: 3em;"><a href="#toc342">(loaded-libs )</a></div>
<div style="margin-left: 3em;"><a href="#toc343">(locking x & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc344">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc345">(long x)</a></div>
<div style="margin-left: 3em;"><a href="#toc346">(long-array size-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc347">(long-array size init-val-or-seq)</a></div>
<div style="margin-left: 3em;"><a href="#toc348">(longs xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc349">(loop bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc350">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc351">(macroexpand form)</a></div>
<div style="margin-left: 3em;"><a href="#toc352">(macroexpand-1 form)</a></div>
<div style="margin-left: 3em;"><a href="#toc353">(make-array type len)</a></div>
<div style="margin-left: 3em;"><a href="#toc354">(make-array type dim & more-dims)</a></div>
<div style="margin-left: 3em;"><a href="#toc355">(make-hierarchy )</a></div>
<div style="margin-left: 3em;"><a href="#toc356">(map f coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc357">(map f c1 c2)</a></div>
<div style="margin-left: 3em;"><a href="#toc358">(map f c1 c2 c3)</a></div>
<div style="margin-left: 3em;"><a href="#toc359">(map f c1 c2 c3 & colls)</a></div>
<div style="margin-left: 3em;"><a href="#toc360">(map? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc361">(mapcat f & colls)</a></div>
<div style="margin-left: 3em;"><a href="#toc362">(max x)</a></div>
<div style="margin-left: 3em;"><a href="#toc363">(max x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc364">(max x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc365">(max-key k x)</a></div>
<div style="margin-left: 3em;"><a href="#toc366">(max-key k x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc367">(max-key k x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc368">(memfn name & args)</a></div>
<div style="margin-left: 4em;"><a href="#toc369">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc370">(memoize f)</a></div>
<div style="margin-left: 3em;"><a href="#toc371">(merge & maps)</a></div>
<div style="margin-left: 3em;"><a href="#toc372">(merge-with f & maps)</a></div>
<div style="margin-left: 3em;"><a href="#toc373">(meta obj)</a></div>
<div style="margin-left: 3em;"><a href="#toc374">(methods multifn)</a></div>
<div style="margin-left: 3em;"><a href="#toc375">(min x)</a></div>
<div style="margin-left: 3em;"><a href="#toc376">(min x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc377">(min x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc378">(min-key k x)</a></div>
<div style="margin-left: 3em;"><a href="#toc379">(min-key k x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc380">(min-key k x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc381">(mod num div)</a></div>
<div style="margin-left: 3em;"><a href="#toc382">(name x)</a></div>
<div style="margin-left: 3em;"><a href="#toc383">(namespace x)</a></div>
<div style="margin-left: 3em;"><a href="#toc384">(neg? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc385">(newline )</a></div>
<div style="margin-left: 3em;"><a href="#toc386">(next coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc387">(nfirst x)</a></div>
<div style="margin-left: 3em;"><a href="#toc388">(nil? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc389">(nnext x)</a></div>
<div style="margin-left: 3em;"><a href="#toc390">(not x)</a></div>
<div style="margin-left: 3em;"><a href="#toc391">(not-any? pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc392">(not-empty coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc393">(not-every? pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc394">(not= x)</a></div>
<div style="margin-left: 3em;"><a href="#toc395">(not= x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc396">(not= x y & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc397">(ns name & references)</a></div>
<div style="margin-left: 4em;"><a href="#toc398">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc399">(ns-aliases ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc400">(ns-imports ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc401">(ns-interns ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc402">(ns-map ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc403">(ns-name ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc404">(ns-publics ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc405">(ns-refers ns)</a></div>
<div style="margin-left: 3em;"><a href="#toc406">(ns-resolve ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc407">(ns-unalias ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc408">(ns-unmap ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc409">(nth coll index)</a></div>
<div style="margin-left: 3em;"><a href="#toc410">(nth coll index not-found)</a></div>
<div style="margin-left: 3em;"><a href="#toc411">(nthnext coll n)</a></div>
<div style="margin-left: 3em;"><a href="#toc412">(num x)</a></div>
<div style="margin-left: 3em;"><a href="#toc413">(number? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc414">(odd? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc415">(or )</a></div>
<div style="margin-left: 3em;"><a href="#toc416">(or x)</a></div>
<div style="margin-left: 3em;"><a href="#toc417">(or x & next)</a></div>
<div style="margin-left: 4em;"><a href="#toc418">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc419">(parents tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc420">(parents h tag)</a></div>
<div style="margin-left: 3em;"><a href="#toc421">(partial f arg1)</a></div>
<div style="margin-left: 3em;"><a href="#toc422">(partial f arg1 arg2)</a></div>
<div style="margin-left: 3em;"><a href="#toc423">(partial f arg1 arg2 arg3)</a></div>
<div style="margin-left: 3em;"><a href="#toc424">(partial f arg1 arg2 arg3 & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc425">(partition n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc426">(partition n step coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc427">(pcalls & fns)</a></div>
<div style="margin-left: 3em;"><a href="#toc428">(peek coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc429">(pmap f coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc430">(pmap f coll & colls)</a></div>
<div style="margin-left: 3em;"><a href="#toc431">(pop coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc432">(pos? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc433">(pr )</a></div>
<div style="margin-left: 3em;"><a href="#toc434">(pr x)</a></div>
<div style="margin-left: 3em;"><a href="#toc435">(pr x & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc436">(pr-str & xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc437">(prefer-method multifn dispatch-val-x dispatch-val-y)</a></div>
<div style="margin-left: 3em;"><a href="#toc438">(prefers multifn)</a></div>
<div style="margin-left: 3em;"><a href="#toc439">(print & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc440">(print-namespace-doc nspace)</a></div>
<div style="margin-left: 3em;"><a href="#toc441">(print-str & xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc442">(printf fmt & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc443">(println & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc444">(println-str & xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc445">(prn & more)</a></div>
<div style="margin-left: 3em;"><a href="#toc446">(prn-str & xs)</a></div>
<div style="margin-left: 3em;"><a href="#toc447">(proxy class-and-interfaces args & fs)</a></div>
<div style="margin-left: 4em;"><a href="#toc448">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc449">(proxy-mappings proxy)</a></div>
<div style="margin-left: 3em;"><a href="#toc450">(proxy-super meth & args)</a></div>
<div style="margin-left: 4em;"><a href="#toc451">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc452">(pvalues & exprs)</a></div>
<div style="margin-left: 4em;"><a href="#toc453">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc454">(quot num div)</a></div>
<div style="margin-left: 3em;"><a href="#toc455">(rand )</a></div>
<div style="margin-left: 3em;"><a href="#toc456">(rand n)</a></div>
<div style="margin-left: 3em;"><a href="#toc457">(rand-int n)</a></div>
<div style="margin-left: 3em;"><a href="#toc458">(range end)</a></div>
<div style="margin-left: 3em;"><a href="#toc459">(range start end)</a></div>
<div style="margin-left: 3em;"><a href="#toc460">(range start end step)</a></div>
<div style="margin-left: 3em;"><a href="#toc461">(ratio? n)</a></div>
<div style="margin-left: 3em;"><a href="#toc462">(rationalize num)</a></div>
<div style="margin-left: 3em;"><a href="#toc463">(re-find m)</a></div>
<div style="margin-left: 3em;"><a href="#toc464">(re-find re s)</a></div>
<div style="margin-left: 3em;"><a href="#toc465">(re-groups m)</a></div>
<div style="margin-left: 3em;"><a href="#toc466">(re-matcher re s)</a></div>
<div style="margin-left: 3em;"><a href="#toc467">(re-matches re s)</a></div>
<div style="margin-left: 3em;"><a href="#toc468">(re-pattern s)</a></div>
<div style="margin-left: 3em;"><a href="#toc469">(re-seq re s)</a></div>
<div style="margin-left: 3em;"><a href="#toc470">(read )</a></div>
<div style="margin-left: 3em;"><a href="#toc471">(read stream)</a></div>
<div style="margin-left: 3em;"><a href="#toc472">(read stream eof-error? eof-value)</a></div>
<div style="margin-left: 3em;"><a href="#toc473">(read stream eof-error? eof-value recursive?)</a></div>
<div style="margin-left: 3em;"><a href="#toc474">(read-line )</a></div>
<div style="margin-left: 3em;"><a href="#toc475">(read-string s)</a></div>
<div style="margin-left: 3em;"><a href="#toc476">(reduce f coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc477">(reduce f val coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc478">(ref x)</a></div>
<div style="margin-left: 3em;"><a href="#toc479">(ref x & options)</a></div>
<div style="margin-left: 3em;"><a href="#toc480">(ref-set ref val)</a></div>
<div style="margin-left: 3em;"><a href="#toc481">(refer ns-sym & filters)</a></div>
<div style="margin-left: 3em;"><a href="#toc482">(refer-clojure & filters)</a></div>
<div style="margin-left: 4em;"><a href="#toc483">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc484">(release-pending-sends )</a></div>
<div style="margin-left: 3em;"><a href="#toc485">(rem num div)</a></div>
<div style="margin-left: 3em;"><a href="#toc486">(remove pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc487">(remove-method multifn dispatch-val)</a></div>
<div style="margin-left: 3em;"><a href="#toc488">(remove-ns sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc489">(remove-watch reference key)</a></div>
<div style="margin-left: 3em;"><a href="#toc490">(remove-watcher reference watcher-agent)</a></div>
<div style="margin-left: 3em;"><a href="#toc491">(repeat x)</a></div>
<div style="margin-left: 3em;"><a href="#toc492">(repeat n x)</a></div>
<div style="margin-left: 3em;"><a href="#toc493">(repeatedly f)</a></div>
<div style="margin-left: 3em;"><a href="#toc494">(replace smap coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc495">(replicate n x)</a></div>
<div style="margin-left: 3em;"><a href="#toc496">(require & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc497">(reset! atom newval)</a></div>
<div style="margin-left: 3em;"><a href="#toc498">(reset-meta! iref metadata-map)</a></div>
<div style="margin-left: 3em;"><a href="#toc499">(resolve sym)</a></div>
<div style="margin-left: 3em;"><a href="#toc500">(rest coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc501">(resultset-seq rs)</a></div>
<div style="margin-left: 3em;"><a href="#toc502">(reverse coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc503">(reversible? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc504">(rseq rev)</a></div>
<div style="margin-left: 3em;"><a href="#toc505">(rsubseq sc test key)</a></div>
<div style="margin-left: 3em;"><a href="#toc506">(rsubseq sc start-test start-key end-test end-key)</a></div>
<div style="margin-left: 3em;"><a href="#toc507">(second x)</a></div>
<div style="margin-left: 3em;"><a href="#toc508">(select-keys map keyseq)</a></div>
<div style="margin-left: 3em;"><a href="#toc509">(send a f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc510">(send-off a f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc511">(seq coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc512">(seq? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc513">(seque s)</a></div>
<div style="margin-left: 3em;"><a href="#toc514">(seque n-or-q s)</a></div>
<div style="margin-left: 3em;"><a href="#toc515">(sequence coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc516">(sequential? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc517">(set coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc518">(set-validator! iref validator-fn)</a></div>
<div style="margin-left: 3em;"><a href="#toc519">(set? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc520">(short x)</a></div>
<div style="margin-left: 3em;"><a href="#toc521">(shutdown-agents )</a></div>
<div style="margin-left: 3em;"><a href="#toc522">(slurp f)</a></div>
<div style="margin-left: 3em;"><a href="#toc523">(some pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc524">(sort coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc525">(sort comp coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc526">(sort-by keyfn coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc527">(sort-by keyfn comp coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc528">(sorted-map & keyvals)</a></div>
<div style="margin-left: 3em;"><a href="#toc529">(sorted-map-by comparator & keyvals)</a></div>
<div style="margin-left: 3em;"><a href="#toc530">(sorted-set & keys)</a></div>
<div style="margin-left: 3em;"><a href="#toc531">(sorted? coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc532">(special-form-anchor x)</a></div>
<div style="margin-left: 3em;"><a href="#toc533">(special-symbol? s)</a></div>
<div style="margin-left: 3em;"><a href="#toc534">(split-at n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc535">(split-with pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc536">(str )</a></div>
<div style="margin-left: 3em;"><a href="#toc537">(str x)</a></div>
<div style="margin-left: 3em;"><a href="#toc538">(str x & ys)</a></div>
<div style="margin-left: 3em;"><a href="#toc539">(stream? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc540">(string? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc541">(struct s & vals)</a></div>
<div style="margin-left: 3em;"><a href="#toc542">(struct-map s & inits)</a></div>
<div style="margin-left: 3em;"><a href="#toc543">(subs s start)</a></div>
<div style="margin-left: 3em;"><a href="#toc544">(subs s start end)</a></div>
<div style="margin-left: 3em;"><a href="#toc545">(subseq sc test key)</a></div>
<div style="margin-left: 3em;"><a href="#toc546">(subseq sc start-test start-key end-test end-key)</a></div>
<div style="margin-left: 3em;"><a href="#toc547">(subvec v start)</a></div>
<div style="margin-left: 3em;"><a href="#toc548">(subvec v start end)</a></div>
<div style="margin-left: 3em;"><a href="#toc549">(supers class)</a></div>
<div style="margin-left: 3em;"><a href="#toc550">(swap! atom f)</a></div>
<div style="margin-left: 3em;"><a href="#toc551">(swap! atom f x)</a></div>
<div style="margin-left: 3em;"><a href="#toc552">(swap! atom f x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc553">(swap! atom f x y & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc554">(symbol name)</a></div>
<div style="margin-left: 3em;"><a href="#toc555">(symbol ns name)</a></div>
<div style="margin-left: 3em;"><a href="#toc556">(symbol? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc557">(sync flags-ignored-for-now & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc558">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc559">(syntax-symbol-anchor x)</a></div>
<div style="margin-left: 3em;"><a href="#toc560">(take n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc561">(take-nth n coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc562">(take-while pred coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc563">(test v)</a></div>
<div style="margin-left: 3em;"><a href="#toc564">(the-ns x)</a></div>
<div style="margin-left: 3em;"><a href="#toc565">(time expr)</a></div>
<div style="margin-left: 4em;"><a href="#toc566">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc567">(to-array coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc568">(to-array-2d coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc569">(trampoline f)</a></div>
<div style="margin-left: 3em;"><a href="#toc570">(trampoline f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc571">(tree-seq branch? children root)</a></div>
<div style="margin-left: 3em;"><a href="#toc572">(true? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc573">(type x)</a></div>
<div style="margin-left: 3em;"><a href="#toc574">(unchecked-add x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc575">(unchecked-dec x)</a></div>
<div style="margin-left: 3em;"><a href="#toc576">(unchecked-divide x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc577">(unchecked-inc x)</a></div>
<div style="margin-left: 3em;"><a href="#toc578">(unchecked-multiply x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc579">(unchecked-negate x)</a></div>
<div style="margin-left: 3em;"><a href="#toc580">(unchecked-remainder x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc581">(unchecked-subtract x y)</a></div>
<div style="margin-left: 3em;"><a href="#toc582">(underive tag parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc583">(underive h tag parent)</a></div>
<div style="margin-left: 3em;"><a href="#toc584">(update-in m [k & ks] f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc585">(update-proxy proxy mappings)</a></div>
<div style="margin-left: 3em;"><a href="#toc586">(use & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc587">(val e)</a></div>
<div style="margin-left: 3em;"><a href="#toc588">(vals map)</a></div>
<div style="margin-left: 3em;"><a href="#toc589">(var-get x)</a></div>
<div style="margin-left: 3em;"><a href="#toc590">(var-set x val)</a></div>
<div style="margin-left: 3em;"><a href="#toc591">(var? v)</a></div>
<div style="margin-left: 3em;"><a href="#toc592">(vary-meta obj f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc593">(vec coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc594">(vector )</a></div>
<div style="margin-left: 3em;"><a href="#toc595">(vector & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc596">(vector? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc597">(when test & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc598">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc599">(when-first bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc600">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc601">(when-let bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc602">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc603">(when-not test & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc604">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc605">(while test & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc606">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc607">(with-in-str s & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc608">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc609">(with-local-vars name-vals-vec & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc610">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc611">(with-meta obj m)</a></div>
<div style="margin-left: 3em;"><a href="#toc612">(with-open bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc613">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc614">(with-out-str & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc615">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc616">(with-precision precision & exprs)</a></div>
<div style="margin-left: 4em;"><a href="#toc617">Macro</a></div>
<div style="margin-left: 3em;"><a href="#toc618">(xml-seq root)</a></div>
<div style="margin-left: 3em;"><a href="#toc619">(zero? x)</a></div>
<div style="margin-left: 3em;"><a href="#toc620">(zipmap keys vals)</a></div>
<div style="margin-left: 2em;"><a href="#toc621">clojure.inspector</a></div>
<div style="margin-left: 3em;"><a href="#toc622">(inspect x)</a></div>
<div style="margin-left: 3em;"><a href="#toc623">(inspect-table data)</a></div>
<div style="margin-left: 3em;"><a href="#toc624">(inspect-tree data)</a></div>
<div style="margin-left: 2em;"><a href="#toc625">clojure.main</a></div>
<div style="margin-left: 3em;"><a href="#toc626">(load-script path)</a></div>
<div style="margin-left: 3em;"><a href="#toc627">(main & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc628">(repl & options)</a></div>
<div style="margin-left: 3em;"><a href="#toc629">(repl-caught e)</a></div>
<div style="margin-left: 3em;"><a href="#toc630">(repl-exception throwable)</a></div>
<div style="margin-left: 3em;"><a href="#toc631">(repl-prompt )</a></div>
<div style="margin-left: 3em;"><a href="#toc632">(repl-read request-prompt request-exit)</a></div>
<div style="margin-left: 3em;"><a href="#toc633">(skip-if-eol s)</a></div>
<div style="margin-left: 3em;"><a href="#toc634">(skip-whitespace s)</a></div>
<div style="margin-left: 3em;"><a href="#toc635">(with-bindings & body)</a></div>
<div style="margin-left: 4em;"><a href="#toc636">Macro</a></div>
<div style="margin-left: 2em;"><a href="#toc637">clojure.parallel</a></div>
<div style="margin-left: 3em;"><a href="#toc638">(pany coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc639">(par coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc640">(par coll & ops)</a></div>
<div style="margin-left: 3em;"><a href="#toc641">(pdistinct coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc642">(pfilter-dupes coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc643">(pfilter-nils coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc644">(pmax coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc645">(pmax coll comp)</a></div>
<div style="margin-left: 3em;"><a href="#toc646">(pmin coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc647">(pmin coll comp)</a></div>
<div style="margin-left: 3em;"><a href="#toc648">(preduce f base coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc649">(psort coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc650">(psort coll comp)</a></div>
<div style="margin-left: 3em;"><a href="#toc651">(psummary coll)</a></div>
<div style="margin-left: 3em;"><a href="#toc652">(psummary coll comp)</a></div>
<div style="margin-left: 3em;"><a href="#toc653">(pvec pa)</a></div>
<div style="margin-left: 2em;"><a href="#toc654">clojure.set</a></div>
<div style="margin-left: 3em;"><a href="#toc655">(difference s1)</a></div>
<div style="margin-left: 3em;"><a href="#toc656">(difference s1 s2)</a></div>
<div style="margin-left: 3em;"><a href="#toc657">(difference s1 s2 & sets)</a></div>
<div style="margin-left: 3em;"><a href="#toc658">(index xrel ks)</a></div>
<div style="margin-left: 3em;"><a href="#toc659">(intersection s1)</a></div>
<div style="margin-left: 3em;"><a href="#toc660">(intersection s1 s2)</a></div>
<div style="margin-left: 3em;"><a href="#toc661">(intersection s1 s2 & sets)</a></div>
<div style="margin-left: 3em;"><a href="#toc662">(join xrel yrel)</a></div>
<div style="margin-left: 3em;"><a href="#toc663">(join xrel yrel km)</a></div>
<div style="margin-left: 3em;"><a href="#toc664">(map-invert m)</a></div>
<div style="margin-left: 3em;"><a href="#toc665">(project xrel ks)</a></div>
<div style="margin-left: 3em;"><a href="#toc666">(rename xrel kmap)</a></div>
<div style="margin-left: 3em;"><a href="#toc667">(rename-keys map kmap)</a></div>
<div style="margin-left: 3em;"><a href="#toc668">(select pred xset)</a></div>
<div style="margin-left: 3em;"><a href="#toc669">(union )</a></div>
<div style="margin-left: 3em;"><a href="#toc670">(union s1)</a></div>
<div style="margin-left: 3em;"><a href="#toc671">(union s1 s2)</a></div>
<div style="margin-left: 3em;"><a href="#toc672">(union s1 s2 & sets)</a></div>
<div style="margin-left: 2em;"><a href="#toc673">clojure.xml</a></div>
<div style="margin-left: 3em;"><a href="#toc674">(parse s)</a></div>
<div style="margin-left: 3em;"><a href="#toc675">(parse s startparse)</a></div>
<div style="margin-left: 2em;"><a href="#toc676">clojure.zip</a></div>
<div style="margin-left: 3em;"><a href="#toc677">(append-child loc item)</a></div>
<div style="margin-left: 3em;"><a href="#toc678">(branch? loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc679">(children loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc680">(down loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc681">(edit loc f & args)</a></div>
<div style="margin-left: 3em;"><a href="#toc682">(end? loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc683">(insert-child loc item)</a></div>
<div style="margin-left: 3em;"><a href="#toc684">(insert-left loc item)</a></div>
<div style="margin-left: 3em;"><a href="#toc685">(insert-right loc item)</a></div>
<div style="margin-left: 3em;"><a href="#toc686">(left loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc687">(leftmost loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc688">(lefts loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc689">(make-node loc node children)</a></div>
<div style="margin-left: 3em;"><a href="#toc690">(next loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc691">(node loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc692">(path loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc693">(prev loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc694">(remove loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc695">(replace loc node)</a></div>
<div style="margin-left: 3em;"><a href="#toc696">(right loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc697">(rightmost loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc698">(rights loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc699">(root loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc700">(seq-zip root)</a></div>
<div style="margin-left: 3em;"><a href="#toc701">(up loc)</a></div>
<div style="margin-left: 3em;"><a href="#toc702">(vector-zip root)</a></div>
<div style="margin-left: 3em;"><a href="#toc703">(xml-zip root)</a></div>
<div style="margin-left: 3em;"><a href="#toc704">(zipper branch? children make-node root)</a></div>
</div>
<h1 id="toc0">API</h1>
 <br />
This is documentation for all of Clojure's functions and macros, arranged alphabetically within namespace. It is generated from the source and reflects the current SVN version. All namespaces are loaded by the runtime except clojure.inspector, clojure.parallel<br />
<br />
Note: The special forms def, let etc are documented on the <a class="wiki_link" href="/special_forms">special forms</a> page, not here. Please consult that page before using Clojure.<br />
<br />
<h2 id="toc1">clojure.core</h2>
 <a name="*"></a><br />
<hr />
<h3 id="toc2">(<em>*</em> )</h3>
 <h3 id="toc3">(<em>*</em> x)</h3>
 <h3 id="toc4">(<em>*</em> x y)</h3>
 <h3 id="toc5">(<em>*</em> x y &amp; more)</h3>
 Returns the product of nums. (*) returns 1.<br />
<a name="*1"></a><br />
<hr />
<h3 id="toc6"><em>*1</em></h3>
 bound in a repl thread to the most recent value printed<br />
<a name="*2"></a><br />
<hr />
<h3 id="toc7"><em>*2</em></h3>
 bound in a repl thread to the second most recent value printed<br />
<a name="*3"></a><br />
<hr />
<h3 id="toc8"><em>*3</em></h3>
 bound in a repl thread to the third most recent value printed<br />
<a name="*agent*"></a><br />
<hr />
<h3 id="toc9"><em>*agent*</em></h3>
 The agent currently running an action on this thread, else nil<br />
<a name="*clojure-version*"></a><br />
<hr />
<h3 id="toc10"><em>*clojure-version*</em></h3>
 The version info for Clojure core, as a map containing :major :minor :incremental and :qualifier keys. Feature releases may increment :minor and/or :major, bugfix releases will increment :incremental. Possible values of :qualifier include &quot;GA&quot;, &quot;SNAPSHOT&quot;, &quot;RC-x&quot; &quot;BETA-x&quot;<br />
<a name="*command-line-args*"></a><br />
<hr />
<h3 id="toc11"><em>*command-line-args*</em></h3>
 A sequence of the supplied command line arguments, or nil if none were supplied<br />
<a name="*compile-files*"></a><br />
<hr />
<h3 id="toc12"><em>*compile-files*</em></h3>
 Set to true when compiling files, false otherwise.<br />
<a name="*compile-path*"></a><br />
<hr />
<h3 id="toc13"><em>*compile-path*</em></h3>
 Specifies the directory where 'compile' will write out .class files. This directory must be in the classpath for 'compile' to work.<br />
<br />
Defaults to &quot;classes&quot;<br />
<a name="*e"></a><br />
<hr />
<h3 id="toc14"><em>*e</em></h3>
 bound in a repl thread to the most recent exception caught by the repl<br />
<a name="*err*"></a><br />
<hr />
<h3 id="toc15"><em>*err*</em></h3>
 A java.io.Writer object representing standard error for print operations.<br />
<br />
Defaults to System/err, wrapped in a PrintWriter<br />
<a name="*file*"></a><br />
<hr />
<h3 id="toc16"><em>*file*</em></h3>
 The path of the file being evaluated, as a String.<br />
<br />
Evaluates to nil when there is no file, eg. in the REPL.<br />
<a name="*flush-on-newline*"></a><br />
<hr />
<h3 id="toc17"><em>*flush-on-newline*</em></h3>
 When set to true, output will be flushed whenever a newline is printed.<br />
<br />
Defaults to true.<br />
<a name="*in*"></a><br />
<hr />
<h3 id="toc18"><em>*in*</em></h3>
 A java.io.Reader object representing standard input for read operations.<br />
<br />
Defaults to System/in, wrapped in a LineNumberingPushbackReader<br />
<a name="*ns*"></a><br />
<hr />
<h3 id="toc19"><em>*ns*</em></h3>
 A clojure.lang.Namespace object representing the current namespace.<br />
<a name="*out*"></a><br />
<hr />
<h3 id="toc20"><em>*out*</em></h3>
 A java.io.Writer object representing standard output for print operations.<br />
<br />
Defaults to System/out<br />
<a name="*print-dup*"></a><br />
<hr />
<h3 id="toc21"><em>*print-dup*</em></h3>
 When set to logical true, objects will be printed in a way that preserves their type when read in later.<br />
<br />
Defaults to false.<br />
<a name="*print-length*"></a><br />
<hr />
<h3 id="toc22"><em>*print-length*</em></h3>
 *print-length* controls how many items of each collection the printer will print. If it is bound to logical false, there is no limit. Otherwise, it must be bound to an integer indicating the maximum number of items of each collection to print. If a collection contains more items, the printer will print items up to the limit followed by '...' to represent the remaining items. The root binding is nil indicating no limit.<br />
<a name="*print-level*"></a><br />
<hr />
<h3 id="toc23"><em>*print-level*</em></h3>
 *print-level* controls how many levels deep the printer will print nested objects. If it is bound to logical false, there is no limit. Otherwise, it must be bound to an integer indicating the maximum level to print. Each argument to print is at level 0; if an argument is a collection, its items are at level 1; and so on. If an object is a collection and is at a level greater than or equal to the value bound to *print-level*, the printer prints '#' to represent it. The root binding is nil indicating no limit.<br />
<a name="*print-meta*"></a><br />
<hr />
<h3 id="toc24"><em>*print-meta*</em></h3>
 If set to logical true, when printing an object, its metadata will also be printed in a form that can be read back by the reader.<br />
<br />
Defaults to false.<br />
<a name="*print-readably*"></a><br />
<hr />
<h3 id="toc25"><em>*print-readably*</em></h3>
 When set to logical false, strings and characters will be printed with non-alphanumeric characters converted to the appropriate escape sequences.<br />
<br />
Defaults to true<br />
<a name="*read-eval*"></a><br />
<hr />
<h3 id="toc26"><em>*read-eval*</em></h3>
 When set to logical false, the EvalReader (#=(...)) is disabled in the read/load in the thread-local binding. Example: (binding [*read-eval* false] (read-string &quot;#=(eval (def x 3))&quot;))<br />
<br />
Defaults to true<br />
<a name="*warn-on-reflection*"></a><br />
<hr />
<h3 id="toc27"><em>*warn-on-reflection*</em></h3>
 When set to true, the compiler will emit warnings when reflection is needed to resolve Java method calls or field accesses.<br />
<br />
Defaults to false.<br />
<a name="+"></a><br />
<hr />
<h3 id="toc28">(<em>+</em> )</h3>
 <h3 id="toc29">(<em>+</em> x)</h3>
 <h3 id="toc30">(<em>+</em> x y)</h3>
 <h3 id="toc31">(<em>+</em> x y &amp; more)</h3>
 Returns the sum of nums. (+) returns 0.<br />
<a name="-"></a><br />
<hr />
<h3 id="toc32">(<em>-</em> x)</h3>
 <h3 id="toc33">(<em>-</em> x y)</h3>
 <h3 id="toc34">(<em>-</em> x y &amp; more)</h3>
 If no ys are supplied, returns the negation of x, else subtracts the ys from x and returns the result.<br />
<a name="->"></a><br />
<hr />
<h3 id="toc35">(<em>-&gt;</em> x form)</h3>
 <h3 id="toc36">(<em>-&gt;</em> x form &amp; more)</h3>
 <h4 id="toc37">Macro</h4>
 Threads the expr through the forms. Inserts x as the second item in the first form, making a list of it if it is not a list already. If there are more forms, inserts the first form as the second item in second form, etc.<br />
<a name=".."></a><br />
<hr />
<h3 id="toc38">(<em>..</em> x form)</h3>
 <h3 id="toc39">(<em>..</em> x form &amp; more)</h3>
 <h4 id="toc40">Macro</h4>
 form =&gt; fieldName-symbol or (instanceMethodName-symbol args*)<br />
<br />
Expands into a member access (.) of the first member on the first argument, followed by the next member on the result, etc. For instance:<br />
<br />
(.. System (getProperties) (get &quot;os.name&quot;))<br />
<br />
expands to:<br />
<br />
(. (. System (getProperties)) (get &quot;os.name&quot;))<br />
<br />
but is easier to write, read, and understand.<br />
<a name="/"></a><br />
<hr />
<h3 id="toc41">(/ x)</h3>
 <h3 id="toc42">(/ x y)</h3>
 <h3 id="toc43">(/ x y &amp; more)</h3>
 If no denominators are supplied, returns 1/numerator, else returns numerator divided by all of the denominators.<br />
<a name="<"></a><br />
<hr />
<h3 id="toc44">(<em>&lt;</em> x)</h3>
 <h3 id="toc45">(<em>&lt;</em> x y)</h3>
 <h3 id="toc46">(<em>&lt;</em> x y &amp; more)</h3>
 Returns non-nil if nums are in monotonically increasing order, otherwise false.<br />
<a name="<="></a><br />
<hr />
<h3 id="toc47">(<em>&lt;=</em> x)</h3>
 <h3 id="toc48">(<em>&lt;=</em> x y)</h3>
 <h3 id="toc49">(<em>&lt;=</em> x y &amp; more)</h3>
 Returns non-nil if nums are in monotonically non-decreasing order, otherwise false.<br />
<a name="="></a><br />
<hr />
<h3 id="toc50">(<em>=</em> x)</h3>
 <h3 id="toc51">(<em>=</em> x y)</h3>
 <h3 id="toc52">(<em>=</em> x y &amp; more)</h3>
 Equality. Returns true if x equals y, false if not. Same as Java x.equals(y) except it also works for nil, and compares numbers and collections in a type-independent manner. Clojure's immutable data structures define equals() (and thus =) as a value, not an identity, comparison.<br />
<a name="=="></a><br />
<hr />
<h3 id="toc53">(<em>==</em> x)</h3>
 <h3 id="toc54">(<em>==</em> x y)</h3>
 <h3 id="toc55">(<em>==</em> x y &amp; more)</h3>
 Returns non-nil if nums all have the same value, otherwise false<br />
<a name=">"></a><br />
<hr />
<h3 id="toc56">(<em>&gt;</em> x)</h3>
 <h3 id="toc57">(<em>&gt;</em> x y)</h3>
 <h3 id="toc58">(<em>&gt;</em> x y &amp; more)</h3>
 Returns non-nil if nums are in monotonically decreasing order, otherwise false.<br />
<a name=">="></a><br />
<hr />
<h3 id="toc59">(<em>&gt;=</em> x)</h3>
 <h3 id="toc60">(<em>&gt;=</em> x y)</h3>
 <h3 id="toc61">(<em>&gt;=</em> x y &amp; more)</h3>
 Returns non-nil if nums are in monotonically non-increasing order, otherwise false.<br />
<a name="accessor"></a><br />
<hr />
<h3 id="toc62">(<em>accessor</em> s key)</h3>
 Returns a fn that, given an instance of a structmap with the basis, returns the value at the key. The key must be in the basis. The returned function should be (slightly) more efficient than using get, but such use of accessors should be limited to known performance-critical areas.<br />
<a name="aclone"></a><br />
<hr />
<h3 id="toc63">(<em>aclone</em> array)</h3>
 Returns a clone of the Java array. Works on arrays of known types.<br />
<a name="add-classpath"></a><br />
<hr />
<h3 id="toc64">(<em>add-classpath</em> url)</h3>
 Adds the url (String or URL object) to the classpath per URLClassLoader.addURL<br />
<a name="add-watch"></a><br />
<hr />
<h3 id="toc65">(<em>add-watch</em> reference key fn)</h3>
 Experimental. Adds a watch function to an agent/atom/var/ref reference. The watch fn must be a fn of 4 args: a key, the reference, its old-state, its new-state. Whenever the reference's state might have been changed, any registered watches will have their functions called. The watch fn will be called synchronously, on the agent's thread if an agent, before any pending sends if agent or ref. Note that an atom's or ref's state may have changed again prior to the fn call, so use old/new-state rather than derefing the reference. Note also that watch fns may be called from multiple threads simultaneously. Var watchers are triggered only by root binding changes, not thread-local set!s. Keys must be unique per reference, and can be used to remove the watch with remove-watch, but are otherwise considered opaque by the watch mechanism.<br />
<a name="add-watcher"></a><br />
<hr />
<h3 id="toc66">(<em>add-watcher</em> reference send-type watcher-agent action-fn)</h3>
 Experimental. Adds a watcher to an agent/atom/var/ref reference. The watcher must be an Agent, and the action a function of the agent's state and one additional arg, the reference. Whenever the reference's state changes, any registered watchers will have their actions sent. send-type must be one of :send or :send-off. The actions will be sent after the reference's state is changed. Var watchers are triggered only by root binding changes, not thread-local set!s<br />
<a name="agent"></a><br />
<hr />
<h3 id="toc67">(<em>agent</em> state)</h3>
 <h3 id="toc68">(<em>agent</em> state &amp; options)</h3>
 Creates and returns an agent with an initial value of state and zero or more options (in any order):<br />
<br />
:meta metadata-map<br />
<br />
:validator validate-fn<br />
<br />
If metadata-map is supplied, it will be come the metadata on the agent. validate-fn must be nil or a side-effect-free fn of one argument, which will be passed the intended new state on any state change. If the new state is unacceptable, the validate-fn should return false or throw an exception.<br />
<a name="agent-errors"></a><br />
<hr />
<h3 id="toc69">(<em>agent-errors</em> a)</h3>
 Returns a sequence of the exceptions thrown during asynchronous actions of the agent.<br />
<a name="aget"></a><br />
<hr />
<h3 id="toc70">(<em>aget</em> array idx)</h3>
 <h3 id="toc71">(<em>aget</em> array idx &amp; idxs)</h3>
 Returns the value at the index/indices. Works on Java arrays of all types.<br />
<a name="alength"></a><br />
<hr />
<h3 id="toc72">(<em>alength</em> array)</h3>
 Returns the length of the Java array. Works on arrays of all types.<br />
<a name="alias"></a><br />
<hr />
<h3 id="toc73">(<em>alias</em> alias namespace-sym)</h3>
 Add an alias in the current namespace to another namespace. Arguments are two symbols: the alias to be used, and the symbolic name of the target namespace. Use :as in the ns macro in preference to calling this directly.<br />
<a name="all-ns"></a><br />
<hr />
<h3 id="toc74">(<em>all-ns</em> )</h3>
 Returns a sequence of all namespaces.<br />
<a name="alter"></a><br />
<hr />
<h3 id="toc75">(<em>alter</em> ref fun &amp; args)</h3>
 Must be called in a transaction. Sets the in-transaction-value of ref to:<br />
<br />
(apply fun in-transaction-value-of-ref args)<br />
<br />
and returns the in-transaction-value of ref.<br />
<a name="alter-meta"></a><br />
<hr />
<h3 id="toc76">(<em>alter-meta!</em> iref f &amp; args)</h3>
 Atomically sets the metadata for a namespace/var/ref/agent/atom to be:<br />
<br />
(apply f its-current-meta args)<br />
<br />
f must be free of side-effects<br />
<a name="alter-var-root"></a><br />
<hr />
<h3 id="toc77">(<em>alter-var-root</em> v f &amp; args)</h3>
 Atomically alters the root binding of var v by applying f to its current value plus any args<br />
<a name="amap"></a><br />
<hr />
<h3 id="toc78">(<em>amap</em> a idx ret expr)</h3>
 <h4 id="toc79">Macro</h4>
 Maps an expression across an array a, using an index named idx, and return value named ret, initialized to a clone of a, then setting each element of ret to the evaluation of expr, returning the new array ret.<br />
<a name="ancestors"></a><br />
<hr />
<h3 id="toc80">(<em>ancestors</em> tag)</h3>
 <h3 id="toc81">(<em>ancestors</em> h tag)</h3>
 Returns the immediate and indirect parents of tag, either via a Java type inheritance relationship or a relationship established via derive. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to the global hierarchy<br />
<a name="and"></a><br />
<hr />
<h3 id="toc82">(<em>and</em> )</h3>
 <h3 id="toc83">(<em>and</em> x)</h3>
 <h3 id="toc84">(<em>and</em> x &amp; next)</h3>
 <h4 id="toc85">Macro</h4>
 Evaluates exprs one at a time, from left to right. If a form returns logical false (nil or false), and returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expr. (and) returns true.<br />
<a name="apply"></a><br />
<hr />
<h3 id="toc86">(<em>apply</em> f args* argseq)</h3>
 Applies fn f to the argument list formed by prepending args to argseq.<br />
<a name="areduce"></a><br />
<hr />
<h3 id="toc87">(<em>areduce</em> a idx ret init expr)</h3>
 <h4 id="toc88">Macro</h4>
 Reduces an expression across an array a, using an index named idx, and return value named ret, initialized to init, setting ret to the evaluation of expr at each step, returning ret.<br />
<a name="array-map"></a><br />
<hr />
<h3 id="toc89">(<em>array-map</em> )</h3>
 <h3 id="toc90">(<em>array-map</em> &amp; keyvals)</h3>
 Constructs an array-map.<br />
<a name="aset"></a><br />
<hr />
<h3 id="toc91">(<em>aset</em> array idx val)</h3>
 <h3 id="toc92">(<em>aset</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on Java arrays of reference types. Returns val.<br />
<a name="aset-boolean"></a><br />
<hr />
<h3 id="toc93">(<em>aset-boolean</em> array idx val)</h3>
 <h3 id="toc94">(<em>aset-boolean</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of boolean. Returns val.<br />
<a name="aset-byte"></a><br />
<hr />
<h3 id="toc95">(<em>aset-byte</em> array idx val)</h3>
 <h3 id="toc96">(<em>aset-byte</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of byte. Returns val.<br />
<a name="aset-char"></a><br />
<hr />
<h3 id="toc97">(<em>aset-char</em> array idx val)</h3>
 <h3 id="toc98">(<em>aset-char</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of char. Returns val.<br />
<a name="aset-double"></a><br />
<hr />
<h3 id="toc99">(<em>aset-double</em> array idx val)</h3>
 <h3 id="toc100">(<em>aset-double</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of double. Returns val.<br />
<a name="aset-float"></a><br />
<hr />
<h3 id="toc101">(<em>aset-float</em> array idx val)</h3>
 <h3 id="toc102">(<em>aset-float</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of float. Returns val.<br />
<a name="aset-int"></a><br />
<hr />
<h3 id="toc103">(<em>aset-int</em> array idx val)</h3>
 <h3 id="toc104">(<em>aset-int</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of int. Returns val.<br />
<a name="aset-long"></a><br />
<hr />
<h3 id="toc105">(<em>aset-long</em> array idx val)</h3>
 <h3 id="toc106">(<em>aset-long</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of long. Returns val.<br />
<a name="aset-short"></a><br />
<hr />
<h3 id="toc107">(<em>aset-short</em> array idx val)</h3>
 <h3 id="toc108">(<em>aset-short</em> array idx idx2 &amp; idxv)</h3>
 Sets the value at the index/indices. Works on arrays of short. Returns val.<br />
<a name="assert"></a><br />
<hr />
<h3 id="toc109">(<em>assert</em> x)</h3>
 <h4 id="toc110">Macro</h4>
 Evaluates expr and throws an exception if it does not evaluate to logical true.<br />
<a name="assoc"></a><br />
<hr />
<h3 id="toc111">(<em>assoc</em> map key val)</h3>
 <h3 id="toc112">(<em>assoc</em> map key val &amp; kvs)</h3>
 assoc[iate]. When applied to a map, returns a new map of the same (hashed/sorted) type, that contains the mapping of key(s) to val(s). When applied to a vector, returns a new vector that contains val at index. Note - index must be &lt;= (count vector).<br />
<a name="assoc-in"></a><br />
<hr />
<h3 id="toc113">(<em>assoc-in</em> m [k &amp; ks] v)</h3>
 Associates a value in a nested associative structure, where ks is a sequence of keys and v is the new value and returns a new nested structure. If any levels do not exist, hash-maps will be created.<br />
<a name="associative?"></a><br />
<hr />
<h3 id="toc114">(<em>associative?</em> coll)</h3>
 Returns true if coll implements Associative<br />
<a name="atom"></a><br />
<hr />
<h3 id="toc115">(<em>atom</em> x)</h3>
 <h3 id="toc116">(<em>atom</em> x &amp; options)</h3>
 Creates and returns an Atom with an initial value of x and zero or more options (in any order):<br />
<br />
:meta metadata-map<br />
<br />
:validator validate-fn<br />
<br />
If metadata-map is supplied, it will be come the metadata on the atom. validate-fn must be nil or a side-effect-free fn of one argument, which will be passed the intended new state on any state change. If the new state is unacceptable, the validate-fn should return false or throw an exception.<br />
<a name="await"></a><br />
<hr />
<h3 id="toc117">(<em>await</em> &amp; agents)</h3>
 Blocks the current thread (indefinitely!) until all actions dispatched thus far, from this thread or agent, to the agent(s) have occurred.<br />
<a name="await-for"></a><br />
<hr />
<h3 id="toc118">(<em>await-for</em> timeout-ms &amp; agents)</h3>
 Blocks the current thread until all actions dispatched thus far (from this thread or agent) to the agents have occurred, or the timeout (in milliseconds) has elapsed. Returns nil if returning due to timeout, non-nil otherwise.<br />
<a name="bases"></a><br />
<hr />
<h3 id="toc119">(<em>bases</em> c)</h3>
 Returns the immediate superclass and direct interfaces of c, if any<br />
<a name="bean"></a><br />
<hr />
<h3 id="toc120">(<em>bean</em> x)</h3>
 Takes a Java object and returns a read-only implementation of the map abstraction based upon its JavaBean properties.<br />
<a name="bigdec"></a><br />
<hr />
<h3 id="toc121">(<em>bigdec</em> x)</h3>
 Coerce to BigDecimal<br />
<a name="bigint"></a><br />
<hr />
<h3 id="toc122">(<em>bigint</em> x)</h3>
 Coerce to BigInteger<br />
<a name="binding"></a><br />
<hr />
<h3 id="toc123">(<em>binding</em> bindings &amp; body)</h3>
 <h4 id="toc124">Macro</h4>
 binding =&gt; var-symbol init-expr<br />
<br />
Creates new bindings for the (already-existing) vars, with the supplied initial values, executes the exprs in an implicit do, then re-establishes the bindings that existed before.<br />
<a name="bit-and"></a><br />
<hr />
<h3 id="toc125">(<em>bit-and</em> x y)</h3>
 Bitwise and<br />
<a name="bit-and-not"></a><br />
<hr />
<h3 id="toc126">(<em>bit-and-not</em> x y)</h3>
 Bitwise and with complement<br />
<a name="bit-clear"></a><br />
<hr />
<h3 id="toc127">(<em>bit-clear</em> x n)</h3>
 Clear bit at index n<br />
<a name="bit-flip"></a><br />
<hr />
<h3 id="toc128">(<em>bit-flip</em> x n)</h3>
 Flip bit at index n<br />
<a name="bit-not"></a><br />
<hr />
<h3 id="toc129">(<em>bit-not</em> x)</h3>
 Bitwise complement<br />
<a name="bit-or"></a><br />
<hr />
<h3 id="toc130">(<em>bit-or</em> x y)</h3>
 Bitwise or<br />
<a name="bit-set"></a><br />
<hr />
<h3 id="toc131">(<em>bit-set</em> x n)</h3>
 Set bit at index n<br />
<a name="bit-shift-left"></a><br />
<hr />
<h3 id="toc132">(<em>bit-shift-left</em> x n)</h3>
 Bitwise shift left<br />
<a name="bit-shift-right"></a><br />
<hr />
<h3 id="toc133">(<em>bit-shift-right</em> x n)</h3>
 Bitwise shift right<br />
<a name="bit-test"></a><br />
<hr />
<h3 id="toc134">(<em>bit-test</em> x n)</h3>
 Test bit at index n<br />
<a name="bit-xor"></a><br />
<hr />
<h3 id="toc135">(<em>bit-xor</em> x y)</h3>
 Bitwise exclusive or<br />
<a name="boolean"></a><br />
<hr />
<h3 id="toc136">(<em>boolean</em> x)</h3>
 Coerce to boolean<br />
<a name="butlast"></a><br />
<hr />
<h3 id="toc137">(<em>butlast</em> coll)</h3>
 Return a seq of all but the last item in coll, in linear time<br />
<a name="byte"></a><br />
<hr />
<h3 id="toc138">(<em>byte</em> x)</h3>
 Coerce to byte<br />
<a name="cast"></a><br />
<hr />
<h3 id="toc139">(<em>cast</em> c x)</h3>
 Throws a ClassCastException if x is not a c, else returns x.<br />
<a name="char"></a><br />
<hr />
<h3 id="toc140">(<em>char</em> x)</h3>
 Coerce to char<br />
<a name="char-escape-string"></a><br />
<hr />
<h3 id="toc141"><em>char-escape-string</em></h3>
 Returns escape string for char or nil if none<br />
<a name="char-name-string"></a><br />
<hr />
<h3 id="toc142"><em>char-name-string</em></h3>
 Returns name string for char or nil if none<br />
<a name="class"></a><br />
<hr />
<h3 id="toc143">(<em>class</em> x)</h3>
 Returns the Class of x<br />
<a name="class?"></a><br />
<hr />
<h3 id="toc144">(<em>class?</em> x)</h3>
 Returns true if x is an instance of Class<br />
<a name="clear-agent-errors"></a><br />
<hr />
<h3 id="toc145">(<em>clear-agent-errors</em> a)</h3>
 Clears any exceptions thrown during asynchronous actions of the agent, allowing subsequent actions to occur.<br />
<a name="clojure-version"></a><br />
<hr />
<h3 id="toc146">(<em>clojure-version</em> )</h3>
 Returns clojure version as a printable string.<br />
<a name="coll?"></a><br />
<hr />
<h3 id="toc147">(<em>coll?</em> x)</h3>
 Returns true if x implements IPersistentCollection<br />
<a name="comment"></a><br />
<hr />
<h3 id="toc148">(<em>comment</em> &amp; body)</h3>
 <h4 id="toc149">Macro</h4>
 Ignores body, yields nil<br />
<a name="commute"></a><br />
<hr />
<h3 id="toc150">(<em>commute</em> ref fun &amp; args)</h3>
 Must be called in a transaction. Sets the in-transaction-value of ref to:<br />
<br />
(apply fun in-transaction-value-of-ref args)<br />
<br />
and returns the in-transaction-value of ref.<br />
<br />
At the commit point of the transaction, sets the value of ref to be:<br />
<br />
(apply fun most-recently-committed-value-of-ref args)<br />
<br />
Thus fun should be commutative, or, failing that, you must accept last-one-in-wins behavior. commute allows for more concurrency than ref-set.<br />
<a name="comp"></a><br />
<hr />
<h3 id="toc151">(<em>comp</em> &amp; fs)</h3>
 Takes a set of functions and returns a fn that is the composition of those fns. The returned fn takes a variable number of args, applies the rightmost of fns to the args, the next fn (right-to-left) to the result, etc.<br />
<a name="comparator"></a><br />
<hr />
<h3 id="toc152">(<em>comparator</em> pred)</h3>
 Returns an implementation of java.util.Comparator based upon pred.<br />
<a name="compare"></a><br />
<hr />
<h3 id="toc153">(<em>compare</em> x y)</h3>
 Comparator. Returns 0 if x equals y, -1 if x is logically 'less than' y, else 1. Same as Java x.compareTo(y) except it also works for nil, and compares numbers and collections in a type-independent manner. x must implement Comparable<br />
<a name="compare-and-set"></a><br />
<hr />
<h3 id="toc154">(<em>compare-and-set!</em> atom oldval newval)</h3>
 Atomically sets the value of atom to newval if and only if the current value of the atom is identical to oldval. Returns true if set happened, else false<br />
<a name="compile"></a><br />
<hr />
<h3 id="toc155">(<em>compile</em> lib)</h3>
 Compiles the namespace named by the symbol lib into a set of classfiles. The source for the lib must be in a proper classpath-relative directory. The output files will go into the directory specified by *compile-path*, and that directory too must be in the classpath.<br />
<a name="complement"></a><br />
<hr />
<h3 id="toc156">(<em>complement</em> f)</h3>
 Takes a fn f and returns a fn that takes the same arguments as f, has the same effects, if any, and returns the opposite truth value.<br />
<a name="concat"></a><br />
<hr />
<h3 id="toc157">(<em>concat</em> )</h3>
 <h3 id="toc158">(<em>concat</em> x)</h3>
 <h3 id="toc159">(<em>concat</em> x y)</h3>
 <h3 id="toc160">(<em>concat</em> x y &amp; zs)</h3>
 Returns a lazy seq representing the concatenation of the elements in the supplied colls.<br />
<a name="cond"></a><br />
<hr />
<h3 id="toc161">(<em>cond</em> &amp; clauses)</h3>
 <h4 id="toc162">Macro</h4>
 Takes a set of test/expr pairs. It evaluates each test one at a time. If a test returns logical true, cond evaluates and returns the value of the corresponding expr and doesn't evaluate any of the other tests or exprs. (cond) returns nil.<br />
<a name="condp"></a><br />
<hr />
<h3 id="toc163">(<em>condp</em> pred expr &amp; clauses)</h3>
 <h4 id="toc164">Macro</h4>
 Takes a binary predicate, an expression, and a set of clauses. Each clause can take the form of either:<br />
<br />
test-expr result-expr<br />
<br />
test-expr :&gt;&gt; result-fn<br />
<br />
Note :&gt;&gt; is an ordinary keyword.<br />
<br />
For each clause, (pred test-expr expr) is evaluated. If it returns logical true, the clause is a match. If a binary clause matches, the result-expr is returned, if a ternary clause matches, its result-fn, which must be a unary function, is called with the result of the predicate as its argument, the result of that call being the return value of condp. A single default expression can follow the clauses, and its value will be returned if no clause matches. If no default expression is provided and no clause matches, an IllegalArgumentException is thrown.<br />
<a name="conj"></a><br />
<hr />
<h3 id="toc165">(<em>conj</em> coll x)</h3>
 <h3 id="toc166">(<em>conj</em> coll x &amp; xs)</h3>
 conj[oin]. Returns a new collection with the xs 'added'. (conj nil item) returns (item). The 'addition' may happen at different 'places' depending on the concrete type.<br />
<a name="cons"></a><br />
<hr />
<h3 id="toc167">(<em>cons</em> x seq)</h3>
 Returns a new seq where x is the first element and seq is the rest.<br />
<a name="constantly"></a><br />
<hr />
<h3 id="toc168">(<em>constantly</em> x)</h3>
 Returns a function that takes any number of arguments and returns x.<br />
<a name="construct-proxy"></a><br />
<hr />
<h3 id="toc169">(<em>construct-proxy</em> c &amp; ctor-args)</h3>
 Takes a proxy class and any arguments for its superclass ctor and creates and returns an instance of the proxy.<br />
<a name="contains?"></a><br />
<hr />
<h3 id="toc170">(<em>contains?</em> coll key)</h3>
 Returns true if key is present in the given collection, otherwise returns false. Note that for numerically indexed collections like vectors and Java arrays, this tests if the numeric key is within the range of indexes. 'contains?' operates constant or logarithmic time; it will not perform a linear search for a value. See also 'some'.<br />
<a name="count"></a><br />
<hr />
<h3 id="toc171">(<em>count</em> coll)</h3>
 Returns the number of items in the collection. (count nil) returns 0. Also works on strings, arrays, and Java Collections and Maps<br />
<a name="counted?"></a><br />
<hr />
<h3 id="toc172">(<em>counted?</em> coll)</h3>
 Returns true if coll implements count in constant time<br />
<a name="create-ns"></a><br />
<hr />
<h3 id="toc173">(<em>create-ns</em> sym)</h3>
 Create a new namespace named by the symbol if one doesn't already exist, returns it or the already-existing namespace of the same name.<br />
<a name="create-struct"></a><br />
<hr />
<h3 id="toc174">(<em>create-struct</em> &amp; keys)</h3>
 Returns a structure basis object.<br />
<a name="cycle"></a><br />
<hr />
<h3 id="toc175">(<em>cycle</em> coll)</h3>
 Returns a lazy (infinite!) sequence of repetitions of the items in coll.<br />
<a name="dec"></a><br />
<hr />
<h3 id="toc176">(<em>dec</em> x)</h3>
 Returns a number one less than num.<br />
<a name="decimal?"></a><br />
<hr />
<h3 id="toc177">(<em>decimal?</em> n)</h3>
 Returns true if n is a BigDecimal<br />
<a name="declare"></a><br />
<hr />
<h3 id="toc178">(<em>declare</em> &amp; names)</h3>
 <h4 id="toc179">Macro</h4>
 defs the supplied var names with no bindings, useful for making forward declarations.<br />
<a name="definline"></a><br />
<hr />
<h3 id="toc180">(<em>definline</em> name &amp; decl)</h3>
 <h4 id="toc181">Macro</h4>
 Experimental - like defmacro, except defines a named function whose body is the expansion, calls to which may be expanded inline as if it were a macro. Cannot be used with variadic (&amp;) args.<br />
<a name="defmacro"></a><br />
<hr />
<h3 id="toc182">(<em>defmacro</em> name doc-string? attr-map? [params*] body)</h3>
 <h3 id="toc183">(<em>defmacro</em> name doc-string? attr-map? ([params*] body) + attr-map?)</h3>
 <h4 id="toc184">Macro</h4>
 Like defn, but the resulting function name is declared as a macro and will be used as a macro by the compiler when it is called.<br />
<a name="defmethod"></a><br />
<hr />
<h3 id="toc185">(<em>defmethod</em> multifn dispatch-val &amp; fn-tail)</h3>
 <h4 id="toc186">Macro</h4>
 Creates and installs a new method of multimethod associated with dispatch-value.<br />
<a name="defmulti"></a><br />
<hr />
<h3 id="toc187">(<em>defmulti</em> name docstring? attr-map? dispatch-fn &amp; options)</h3>
 <h4 id="toc188">Macro</h4>
 Creates a new multimethod with the associated dispatch function. The docstring and attribute-map are optional.<br />
<br />
Options are key-value pairs and may be one of: :default the default dispatch value, defaults to :default :hierarchy the isa? hierarchy to use for dispatching defaults to the global hierarchy<br />
<a name="defn"></a><br />
<hr />
<h3 id="toc189">(<em>defn</em> name doc-string? attr-map? [params*] body)</h3>
 <h3 id="toc190">(<em>defn</em> name doc-string? attr-map? ([params*] body) + attr-map?)</h3>
 <h4 id="toc191">Macro</h4>
 Same as (def name (fn [params* ] exprs*)) or (def name (fn ([params* ] exprs*)+)) with any doc-string or attrs added to the var metadata<br />
<a name="defn-"></a><br />
<hr />
<h3 id="toc192">(<em>defn-</em> name &amp; decls)</h3>
 <h4 id="toc193">Macro</h4>
 same as defn, yielding non-public def<br />
<a name="defonce"></a><br />
<hr />
<h3 id="toc194">(<em>defonce</em> name expr)</h3>
 <h4 id="toc195">Macro</h4>
 defs name to have the root value of the expr iff the named var has no root value, else expr is unevaluated<br />
<a name="defstruct"></a><br />
<hr />
<h3 id="toc196">(<em>defstruct</em> name &amp; keys)</h3>
 <h4 id="toc197">Macro</h4>
 Same as (def name (create-struct keys...))<br />
<a name="delay"></a><br />
<hr />
<h3 id="toc198">(<em>delay</em> &amp; body)</h3>
 <h4 id="toc199">Macro</h4>
 Takes a body of expressions and yields a Delay object that will invoke the body only the first time it is forced (with force), and will cache the result and return it on all subsequent force calls.<br />
<a name="delay?"></a><br />
<hr />
<h3 id="toc200">(<em>delay?</em> x)</h3>
 returns true if x is a Delay created with delay<br />
<a name="deref"></a><br />
<hr />
<h3 id="toc201">(<em>deref</em> ref)</h3>
 Also reader macro: @ref/@agent/@var/@atom/@delay/@future. Within a transaction, returns the in-transaction-value of ref, else returns the most-recently-committed value of ref. When applied to a var, agent or atom, returns its current state. When applied to a delay, forces it if not already forced. When applied to a future, will block if computation not complete<br />
<a name="derive"></a><br />
<hr />
<h3 id="toc202">(<em>derive</em> tag parent)</h3>
 <h3 id="toc203">(<em>derive</em> h tag parent)</h3>
 Establishes a parent/child relationship between parent and tag. Parent must be a namespace-qualified symbol or keyword and child can be either a namespace-qualified symbol or keyword or a class. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to, and modifies, the global hierarchy.<br />
<a name="descendants"></a><br />
<hr />
<h3 id="toc204">(<em>descendants</em> tag)</h3>
 <h3 id="toc205">(<em>descendants</em> h tag)</h3>
 Returns the immediate and indirect children of tag, through a relationship established via derive. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to the global hierarchy. Note: does not work on Java type inheritance relationships.<br />
<a name="disj"></a><br />
<hr />
<h3 id="toc206">(<em>disj</em> set)</h3>
 <h3 id="toc207">(<em>disj</em> set key)</h3>
 <h3 id="toc208">(<em>disj</em> set key &amp; ks)</h3>
 disj[oin]. Returns a new set of the same (hashed/sorted) type, that does not contain key(s).<br />
<a name="dissoc"></a><br />
<hr />
<h3 id="toc209">(<em>dissoc</em> map)</h3>
 <h3 id="toc210">(<em>dissoc</em> map key)</h3>
 <h3 id="toc211">(<em>dissoc</em> map key &amp; ks)</h3>
 dissoc[iate]. Returns a new map of the same (hashed/sorted) type, that does not contain a mapping for key(s).<br />
<a name="distinct"></a><br />
<hr />
<h3 id="toc212">(<em>distinct</em> coll)</h3>
 Returns a lazy sequence of the elements of coll with duplicates removed<br />
<a name="distinct?"></a><br />
<hr />
<h3 id="toc213">(<em>distinct?</em> x)</h3>
 <h3 id="toc214">(<em>distinct?</em> x y)</h3>
 <h3 id="toc215">(<em>distinct?</em> x y &amp; more)</h3>
 Returns true if no two of the arguments are =<br />
<a name="doall"></a><br />
<hr />
<h3 id="toc216">(<em>doall</em> coll)</h3>
 <h3 id="toc217">(<em>doall</em> n coll)</h3>
 When lazy sequences are produced via functions that have side effects, any effects other than those needed to produce the first element in the seq do not occur until the seq is consumed. doall can be used to force any effects. Walks through the successive nexts of the seq, retains the head and returns it, thus causing the entire seq to reside in memory at one time.<br />
<a name="doc"></a><br />
<hr />
<h3 id="toc218">(<em>doc</em> name)</h3>
 <h4 id="toc219">Macro</h4>
 Prints documentation for a var or special form given its name<br />
<a name="dorun"></a><br />
<hr />
<h3 id="toc220">(<em>dorun</em> coll)</h3>
 <h3 id="toc221">(<em>dorun</em> n coll)</h3>
 When lazy sequences are produced via functions that have side effects, any effects other than those needed to produce the first element in the seq do not occur until the seq is consumed. dorun can be used to force any effects. Walks through the successive nexts of the seq, does not retain the head and returns nil.<br />
<a name="doseq"></a><br />
<hr />
<h3 id="toc222">(<em>doseq</em> seq-exprs &amp; body)</h3>
 <h4 id="toc223">Macro</h4>
 Repeatedly executes body (presumably for side-effects) with bindings and filtering as provided by &quot;for&quot;. Does not retain the head of the sequence. Returns nil.<br />
<a name="dosync"></a><br />
<hr />
<h3 id="toc224">(<em>dosync</em> &amp; exprs)</h3>
 <h4 id="toc225">Macro</h4>
 Runs the exprs (in an implicit do) in a transaction that encompasses exprs and any nested calls. Starts a transaction if none is already running on this thread. Any uncaught exception will abort the transaction and flow out of dosync. The exprs may be run more than once, but any effects on Refs will be atomic.<br />
<a name="dotimes"></a><br />
<hr />
<h3 id="toc226">(<em>dotimes</em> bindings &amp; body)</h3>
 <h4 id="toc227">Macro</h4>
 bindings =&gt; name n<br />
<br />
Repeatedly executes body (presumably for side-effects) with name bound to integers from 0 through n-1.<br />
<a name="doto"></a><br />
<hr />
<h3 id="toc228">(<em>doto</em> x &amp; forms)</h3>
 <h4 id="toc229">Macro</h4>
 Evaluates x then calls all of the methods and functions with the value of x supplied at the from of the given arguments. The forms are evaluated in order. Returns x.<br />
<br />
(doto (new java.util.HashMap) (.put &quot;a&quot; 1) (.put &quot;b&quot; 2))<br />
<a name="double"></a><br />
<hr />
<h3 id="toc230">(<em>double</em> x)</h3>
 Coerce to double<br />
<a name="double-array"></a><br />
<hr />
<h3 id="toc231">(<em>double-array</em> size-or-seq)</h3>
 <h3 id="toc232">(<em>double-array</em> size init-val-or-seq)</h3>
 Creates an array of doubles<br />
<a name="doubles"></a><br />
<hr />
<h3 id="toc233">(<em>doubles</em> xs)</h3>
 Casts to double[]<br />
<a name="drop"></a><br />
<hr />
<h3 id="toc234">(<em>drop</em> n coll)</h3>
 Returns a lazy sequence of all but the first n items in coll.<br />
<a name="drop-last"></a><br />
<hr />
<h3 id="toc235">(<em>drop-last</em> s)</h3>
 <h3 id="toc236">(<em>drop-last</em> n s)</h3>
 Return a lazy sequence of all but the last n (default 1) items in coll<br />
<a name="drop-while"></a><br />
<hr />
<h3 id="toc237">(<em>drop-while</em> pred coll)</h3>
 Returns a lazy sequence of the items in coll starting from the first item for which (pred item) returns nil.<br />
<a name="empty"></a><br />
<hr />
<h3 id="toc238">(<em>empty</em> coll)</h3>
 Returns an empty collection of the same category as coll, or nil<br />
<a name="empty?"></a><br />
<hr />
<h3 id="toc239">(<em>empty?</em> coll)</h3>
 Returns true if coll has no items - same as (not (seq coll)). Please use the idiom (seq x) rather than (not (empty? x))<br />
<a name="ensure"></a><br />
<hr />
<h3 id="toc240">(<em>ensure</em> ref)</h3>
 Must be called in a transaction. Protects the ref from modification by other transactions. Returns the in-transaction-value of ref. Allows for more concurrency than (ref-set ref @ref)<br />
<a name="enumeration-seq"></a><br />
<hr />
<h3 id="toc241">(<em>enumeration-seq</em> e)</h3>
 Returns a seq on a java.util.Enumeration<br />
<a name="eval"></a><br />
<hr />
<h3 id="toc242">(<em>eval</em> form)</h3>
 Evaluates the form data structure (not text!) and returns the result.<br />
<a name="even?"></a><br />
<hr />
<h3 id="toc243">(<em>even?</em> n)</h3>
 Returns true if n is even, throws an exception if n is not an integer<br />
<a name="every?"></a><br />
<hr />
<h3 id="toc244">(<em>every?</em> pred coll)</h3>
 Returns true if (pred x) is logical true for every x in coll, else false.<br />
<a name="false?"></a><br />
<hr />
<h3 id="toc245">(<em>false?</em> x)</h3>
 Returns true if x is the value false, false otherwise.<br />
<a name="ffirst"></a><br />
<hr />
<h3 id="toc246">(<em>ffirst</em> x)</h3>
 Same as (first (first x))<br />
<a name="file-seq"></a><br />
<hr />
<h3 id="toc247">(<em>file-seq</em> dir)</h3>
 A tree seq on java.io.Files<br />
<a name="filter"></a><br />
<hr />
<h3 id="toc248">(<em>filter</em> pred coll)</h3>
 Returns a lazy sequence of the items in coll for which (pred item) returns true. pred must be free of side-effects.<br />
<a name="find"></a><br />
<hr />
<h3 id="toc249">(<em>find</em> map key)</h3>
 Returns the map entry for key, or nil if key not present.<br />
<a name="find-doc"></a><br />
<hr />
<h3 id="toc250">(<em>find-doc</em> re-string-or-pattern)</h3>
 Prints documentation for any var whose documentation or name contains a match for re-string-or-pattern<br />
<a name="find-ns"></a><br />
<hr />
<h3 id="toc251">(<em>find-ns</em> sym)</h3>
 Returns the namespace named by the symbol or nil if it doesn't exist.<br />
<a name="find-var"></a><br />
<hr />
<h3 id="toc252">(<em>find-var</em> sym)</h3>
 Returns the global var named by the namespace-qualified symbol, or nil if no var with that name.<br />
<a name="first"></a><br />
<hr />
<h3 id="toc253">(<em>first</em> coll)</h3>
 Returns the first item in the collection. Calls seq on its argument. If coll is nil, returns nil.<br />
<a name="float"></a><br />
<hr />
<h3 id="toc254">(<em>float</em> x)</h3>
 Coerce to float<br />
<a name="float-array"></a><br />
<hr />
<h3 id="toc255">(<em>float-array</em> size-or-seq)</h3>
 <h3 id="toc256">(<em>float-array</em> size init-val-or-seq)</h3>
 Creates an array of floats<br />
<a name="float?"></a><br />
<hr />
<h3 id="toc257">(<em>float?</em> n)</h3>
 Returns true if n is a floating point number<br />
<a name="floats"></a><br />
<hr />
<h3 id="toc258">(<em>floats</em> xs)</h3>
 Casts to float[]<br />
<a name="flush"></a><br />
<hr />
<h3 id="toc259">(<em>flush</em> )</h3>
 Flushes the output stream that is the current value of *out*<br />
<a name="fn"></a><br />
<hr />
<h3 id="toc260">(<em>fn</em> &amp; sigs)</h3>
 <h4 id="toc261">Macro</h4>
 (fn name? [params* ] exprs*) (fn name? ([params* ] exprs*)+)<br />
<br />
params =&gt; positional-params* , or positional-params* &amp; next-param positional-param =&gt; binding-form next-param =&gt; binding-form name =&gt; symbol<br />
<br />
Defines a function<br />
<a name="fn?"></a><br />
<hr />
<h3 id="toc262">(<em>fn?</em> x)</h3>
 Returns true if x implements Fn, i.e. is an object created via fn.<br />
<a name="fnext"></a><br />
<hr />
<h3 id="toc263">(<em>fnext</em> x)</h3>
 Same as (first (next x))<br />
<a name="for"></a><br />
<hr />
<h3 id="toc264">(<em>for</em> seq-exprs body-expr)</h3>
 <h4 id="toc265">Macro</h4>
 List comprehension. Takes a vector of one or more binding-form/collection-expr pairs, each followed by zero or more modifiers, and yields a lazy sequence of evaluations of expr. Collections are iterated in a nested fashion, rightmost fastest, and nested coll-exprs can refer to bindings created in prior binding-forms. Supported modifiers are: :let [binding-form expr ...], :while test, :when test.<br />
<br />
(take 100 (for [x (range 100000000) y (range 1000000) :while (&lt; y x)] [x y]))<br />
<a name="force"></a><br />
<hr />
<h3 id="toc266">(<em>force</em> x)</h3>
 If x is a Delay, returns the (possibly cached) value of its expression, else returns x<br />
<a name="format"></a><br />
<hr />
<h3 id="toc267">(<em>format</em> fmt &amp; args)</h3>
 Formats a string using java.lang.String.format, see java.util.Formatter for format string syntax<br />
<a name="future"></a><br />
<hr />
<h3 id="toc268">(<em>future</em> &amp; body)</h3>
 <h4 id="toc269">Macro</h4>
 Takes a body of expressions and yields a future object that will invoke the body in another thread, and will cache the result and return it on all subsequent calls to deref/@. If the computation has not yet finished, calls to deref/@ will block.<br />
<a name="future-call"></a><br />
<hr />
<h3 id="toc270">(<em>future-call</em> f)</h3>
 Takes a function of no args and yields a future object that will invoke the function in another thread, and will cache the result and return it on all subsequent calls to deref/@. If the computation has not yet finished, calls to deref/@ will block.<br />
<a name="gen-class"></a><br />
<hr />
<h3 id="toc271">(<em>gen-class</em> &amp; options)</h3>
 <h4 id="toc272">Macro</h4>
 When compiling, generates compiled bytecode for a class with the given package-qualified :name (which, as all names in these parameters, can be a string or symbol), and writes the .class file to the *compile-path* directory. When not compiling, does nothing. The gen-class construct contains no implementation, as the implementation will be dynamically sought by the generated class in functions in an implementing Clojure namespace. Given a generated class org.mydomain.MyClass with a method named mymethod, gen-class will generate an implementation that looks for a function named by (str prefix mymethod) (default prefix: &quot;-&quot;) in a Clojure namespace specified by :impl-ns (defaults to the current namespace). All inherited methods, generated methods, and init and main functions (see :methods, :init, and :main below) will be found similarly prefixed. By default, the static initializer for the generated class will attempt to load the Clojure support code for the class as a resource from the classpath, e.g. in the example case, org/mydomain/MyClass__init.class. This behavior can be controlled by :load-impl-ns<br />
<br />
Note that methods with a maximum of 18 parameters are supported.<br />
<br />
In all subsequent sections taking types, the primitive types can be referred to by their Java names (int, float etc), and classes in the java.lang package can be used without a package qualifier. All other classes must be fully qualified.<br />
<br />
Options should be a set of key/value pairs, all except for :name are optional:<br />
<br />
:name aname<br />
<br />
The package-qualified name of the class to be generated<br />
<br />
:extends aclass<br />
<br />
Specifies the superclass, the non-private methods of which will be overridden by the class. If not provided, defaults to Object.<br />
<br />
:implements [interface ...]<br />
<br />
One or more interfaces, the methods of which will be implemented by the class.<br />
<br />
:init name<br />
<br />
If supplied, names a function that will be called with the arguments to the constructor. Must return [ [superclass-constructor-args] state] If not supplied, the constructor args are passed directly to the superclass constructor and the state will be nil<br />
<br />
:constructors {[param-types] [super-param-types], ...}<br />
<br />
By default, constructors are created for the generated class which match the signature(s) of the constructors for the superclass. This parameter may be used to explicitly specify constructors, each entry providing a mapping from a constructor signature to a superclass constructor signature. When you supply this, you must supply an :init specifier.<br />
<br />
:post-init name<br />
<br />
If supplied, names a function that will be called with the object as the first argument, followed by the arguments to the constructor. It will be called every time an object of this class is created, immediately after all the inherited constructors have completed. It's return value is ignored.<br />
<br />
:methods [ [name [param-types] return-type], ...]<br />
<br />
The generated class automatically defines all of the non-private methods of its superclasses/interfaces. This parameter can be used to specify the signatures of additional methods of the generated class. Static methods can be specified with #^{:static true} in the signature's metadata. Do not repeat superclass/interface signatures here.<br />
<br />
:main boolean<br />
<br />
If supplied and true, a static public main function will be generated. It will pass each string of the String[] argument as a separate argument to a function called (str prefix main).<br />
<br />
:factory name<br />
<br />
If supplied, a (set of) public static factory function(s) will be created with the given name, and the same signature(s) as the constructor(s). :state name<br />
<br />
If supplied, a public final instance field with the given name will be created. You must supply an :init function in order to provide a value for the state. Note that, though final, the state can be a ref or agent, supporting the creation of Java objects with transactional or asynchronous mutation semantics.<br />
<br />
:exposes {protected-field-name {:get name :set name}, ...}<br />
<br />
Since the implementations of the methods of the generated class occur in Clojure functions, they have no access to the inherited protected fields of the superclass. This parameter can be used to generate public getter/setter methods exposing the protected field(s) for use in the implementation.<br />
<br />
:exposes-methods {super-method-name exposed-name, ...}<br />
<br />
It is sometimes necessary to call the superclass' implementation of an overridden method. Those methods may be exposed and referred in the new method implementation by a local name.<br />
<br />
:prefix string<br />
<br />
Default: &quot;-&quot; Methods called e.g. Foo will be looked up in vars called prefixFoo in the implementing ns.<br />
<br />
:impl-ns name<br />
<br />
Default: the name of the current ns. Implementations of methods will be looked up in this namespace.<br />
<br />
:load-impl-ns boolean<br />
<br />
Default: true. Causes the static initializer for the generated class to reference the load code for the implementing namespace. Should be true when implementing-ns is the default, false if you intend to load the code via some other method.<br />
<a name="gen-interface"></a><br />
<hr />
<h3 id="toc273">(<em>gen-interface</em> &amp; options)</h3>
 <h4 id="toc274">Macro</h4>
 When compiling, generates compiled bytecode for an interface with the given package-qualified :name (which, as all names in these parameters, can be a string or symbol), and writes the .class file to the *compile-path* directory. When not compiling, does nothing. In all subsequent sections taking types, the primitive types can be referred to by their Java names (int, float etc), and classes in the java.lang package can be used without a package qualifier. All other classes must be fully qualified. Options should be a set of key/value pairs, all except for :name are optional:<br />
<br />
:name aname<br />
<br />
The package-qualified name of the class to be generated<br />
<br />
:extends [interface ...]<br />
<br />
One or more interfaces, which will be extended by this interface.<br />
<br />
:methods [ [name [param-types] return-type], ...]<br />
<br />
This parameter is used to specify the signatures of the methods of the generated interface. Do not repeat superinterface signatures here.<br />
<a name="gensym"></a><br />
<hr />
<h3 id="toc275">(<em>gensym</em> )</h3>
 <h3 id="toc276">(<em>gensym</em> prefix-string)</h3>
 Returns a new symbol with a unique name. If a prefix string is supplied, the name is prefix# where # is some unique number. If prefix is not supplied, the prefix is 'G<u>'.<br />
<a name="get"></a></u><br />
<hr />
<h3 id="toc277">(<em>get</em> map key)</h3>
 <h3 id="toc278">(<em>get</em> map key not-found)</h3>
 Returns the value mapped to key, not-found or nil if key not present.<br />
<a name="get-in"></a><br />
<hr />
<h3 id="toc279">(<em>get-in</em> m ks)</h3>
 returns the value in a nested associative structure, where ks is a sequence of keys<br />
<a name="get-method"></a><br />
<hr />
<h3 id="toc280">(<em>get-method</em> multifn dispatch-val)</h3>
 Given a multimethod and a dispatch value, returns the dispatch fn that would apply to that value, or nil if none apply and no default<br />
<a name="get-proxy-class"></a><br />
<hr />
<h3 id="toc281">(<em>get-proxy-class</em> &amp; bases)</h3>
 Takes an optional single class followed by zero or more interfaces. If not supplied class defaults to Object. Creates an returns an instance of a proxy class derived from the supplied classes. The resulting value is cached and used for any subsequent requests for the same class set. Returns a Class object.<br />
<a name="get-validator"></a><br />
<hr />
<h3 id="toc282">(<em>get-validator</em> iref)</h3>
 Gets the validator-fn for a var/ref/agent/atom.<br />
<a name="hash"></a><br />
<hr />
<h3 id="toc283">(<em>hash</em> x)</h3>
 Returns the hash code of its argument<br />
<a name="hash-map"></a><br />
<hr />
<h3 id="toc284">(<em>hash-map</em> )</h3>
 <h3 id="toc285">(<em>hash-map</em> &amp; keyvals)</h3>
 keyval =&gt; key val Returns a new hash map with supplied mappings.<br />
<a name="hash-set"></a><br />
<hr />
<h3 id="toc286">(<em>hash-set</em> )</h3>
 <h3 id="toc287">(<em>hash-set</em> &amp; keys)</h3>
 Returns a new hash set with supplied keys.<br />
<a name="identical?"></a><br />
<hr />
<h3 id="toc288">(<em>identical?</em> x y)</h3>
 Tests if 2 arguments are the same object<br />
<a name="identity"></a><br />
<hr />
<h3 id="toc289">(<em>identity</em> x)</h3>
 Returns its argument.<br />
<a name="if-let"></a><br />
<hr />
<h3 id="toc290">(<em>if-let</em> bindings then)</h3>
 <h3 id="toc291">(<em>if-let</em> bindings then else &amp; oldform)</h3>
 <h4 id="toc292">Macro</h4>
 bindings =&gt; binding-form test<br />
<br />
If test is true, evaluates then with binding-form bound to the value of test, if not, yields else<br />
<a name="if-not"></a><br />
<hr />
<h3 id="toc293">(<em>if-not</em> test then)</h3>
 <h3 id="toc294">(<em>if-not</em> test then else)</h3>
 <h4 id="toc295">Macro</h4>
 Evaluates test. If logical false, evaluates and returns then expr, otherwise else expr, if supplied, else nil.<br />
<a name="ifn?"></a><br />
<hr />
<h3 id="toc296">(<em>ifn?</em> x)</h3>
 Returns true if x implements IFn. Note that many data structures (e.g. sets and maps) implement IFn<br />
<a name="import"></a><br />
<hr />
<h3 id="toc297">(<em>import</em> &amp; import-symbols-or-lists)</h3>
 import-list =&gt; (package-symbol class-name-symbols*)<br />
<br />
For each name in class-name-symbols, adds a mapping from name to the class named by package.name to the current namespace. Use :import in the ns macro in preference to calling this directly.<br />
<a name="in-ns"></a><br />
<hr />
<h3 id="toc298">(<em>in-ns</em> name)</h3>
 Sets *ns* to the namespace named by the symbol, creating it if needed.<br />
<a name="inc"></a><br />
<hr />
<h3 id="toc299">(<em>inc</em> x)</h3>
 Returns a number one greater than num.<br />
<a name="init-proxy"></a><br />
<hr />
<h3 id="toc300">(<em>init-proxy</em> proxy mappings)</h3>
 Takes a proxy instance and a map of strings (which must correspond to methods of the proxy superclass/superinterfaces) to fns (which must take arguments matching the corresponding method, plus an additional (explicit) first arg corresponding to this, and sets the proxy's fn map.<br />
<a name="instance?"></a><br />
<hr />
<h3 id="toc301">(<em>instance?</em> c x)</h3>
 Evaluates x and tests if it is an instance of the class c. Returns true or false<br />
<a name="int"></a><br />
<hr />
<h3 id="toc302">(<em>int</em> x)</h3>
 Coerce to int<br />
<a name="int-array"></a><br />
<hr />
<h3 id="toc303">(<em>int-array</em> size-or-seq)</h3>
 <h3 id="toc304">(<em>int-array</em> size init-val-or-seq)</h3>
 Creates an array of ints<br />
<a name="integer?"></a><br />
<hr />
<h3 id="toc305">(<em>integer?</em> n)</h3>
 Returns true if n is an integer<br />
<a name="interleave"></a><br />
<hr />
<h3 id="toc306">(<em>interleave</em> &amp; colls)</h3>
 Returns a lazy seq of the first item in each coll, then the second etc.<br />
<a name="intern"></a><br />
<hr />
<h3 id="toc307">(<em>intern</em> ns name)</h3>
 <h3 id="toc308">(<em>intern</em> ns name val)</h3>
 Finds or creates a var named by the symbol name in the namespace ns (which can be a symbol or a namespace), setting its root binding to val if supplied. The namespace must exist. The var will adopt any metadata from the name symbol. Returns the var.<br />
<a name="interpose"></a><br />
<hr />
<h3 id="toc309">(<em>interpose</em> sep coll)</h3>
 Returns a lazy seq of the elements of coll separated by sep<br />
<a name="into"></a><br />
<hr />
<h3 id="toc310">(<em>into</em> to from)</h3>
 Returns a new coll consisting of to-coll with all of the items of from-coll conjoined.<br />
<a name="into-array"></a><br />
<hr />
<h3 id="toc311">(<em>into-array</em> aseq)</h3>
 <h3 id="toc312">(<em>into-array</em> type aseq)</h3>
 Returns an array with components set to the values in aseq. The array's component type is type if provided, or the type of the first value in aseq if present, or Object. All values in aseq must be compatible with the component type. Class objects for the primitive types can be obtained using, e.g., Integer/TYPE.<br />
<a name="ints"></a><br />
<hr />
<h3 id="toc313">(<em>ints</em> xs)</h3>
 Casts to int[]<br />
<a name="io"></a><br />
<hr />
<h3 id="toc314">(<em>io!</em> &amp; body)</h3>
 <h4 id="toc315">Macro</h4>
 If an io! block occurs in a transaction, throws an IllegalStateException, else runs body in an implicit do. If the first expression in body is a literal string, will use that as the exception message.<br />
<a name="isa?"></a><br />
<hr />
<h3 id="toc316">(<em>isa?</em> child parent)</h3>
 <h3 id="toc317">(<em>isa?</em> h child parent)</h3>
 Returns true if (= child parent), or child is directly or indirectly derived from parent, either via a Java type inheritance relationship or a relationship established via derive. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to the global hierarchy<br />
<a name="iterate"></a><br />
<hr />
<h3 id="toc318">(<em>iterate</em> f x)</h3>
 Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects<br />
<a name="iterator-seq"></a><br />
<hr />
<h3 id="toc319">(<em>iterator-seq</em> iter)</h3>
 Returns a seq on a java.util.Iterator. Note that most collections providing iterators implement Iterable and thus support seq directly.<br />
<a name="key"></a><br />
<hr />
<h3 id="toc320">(<em>key</em> e)</h3>
 Returns the key of the map entry.<br />
<a name="keys"></a><br />
<hr />
<h3 id="toc321">(<em>keys</em> map)</h3>
 Returns a sequence of the map's keys.<br />
<a name="keyword"></a><br />
<hr />
<h3 id="toc322">(<em>keyword</em> name)</h3>
 <h3 id="toc323">(<em>keyword</em> ns name)</h3>
 Returns a Keyword with the given namespace and name. Do not use : in the keyword strings, it will be added automatically.<br />
<a name="keyword?"></a><br />
<hr />
<h3 id="toc324">(<em>keyword?</em> x)</h3>
 Return true if x is a Keyword<br />
<a name="last"></a><br />
<hr />
<h3 id="toc325">(<em>last</em> coll)</h3>
 Return the last item in coll, in linear time<br />
<a name="lazy-cat"></a><br />
<hr />
<h3 id="toc326">(<em>lazy-cat</em> &amp; colls)</h3>
 <h4 id="toc327">Macro</h4>
 Expands to code which yields a lazy sequence of the concatenation of the supplied colls. Each coll expr is not evaluated until it is needed.<br />
<br />
(lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))<br />
<a name="lazy-seq"></a><br />
<hr />
<h3 id="toc328">(<em>lazy-seq</em> &amp; body)</h3>
 <h4 id="toc329">Macro</h4>
 Takes a body of expressions that returns an ISeq or nil, and yields a Seqable object that will invoke the body only the first time seq is called, and will cache the result and return it on all subsequent seq calls.<br />
<a name="let"></a><br />
<hr />
<h3 id="toc330">(<em>let</em> bindings &amp; body)</h3>
 <h4 id="toc331">Macro</h4>
 Evaluates the exprs in a lexical context in which the symbols in the binding-forms are bound to their respective init-exprs or parts therein.<br />
<a name="letfn"></a><br />
<hr />
<h3 id="toc332">(<em>letfn</em> fnspecs &amp; body)</h3>
 <h4 id="toc333">Macro</h4>
 Takes a vector of function specs and a body, and generates a set of bindings of functions to their names. All of the names are available in all of the definitions of the functions, as well as the body.<br />
<br />
fnspec ==&gt; (fname [params*] exprs) or (fname ([params*] exprs)+)<br />
<a name="line-seq"></a><br />
<hr />
<h3 id="toc334">(<em>line-seq</em> rdr)</h3>
 Returns the lines of text from rdr as a lazy sequence of strings. rdr must implement java.io.BufferedReader.<br />
<a name="list"></a><br />
<hr />
<h3 id="toc335">(<em>list</em> &amp; items)</h3>
 Creates a new list containing the items.<br />
<a name="list*"></a><br />
<hr />
<h3 id="toc336">(<em>list*</em> item &amp; more)</h3>
 Creates a new list containing the item prepended to more.<br />
<a name="list?"></a><br />
<hr />
<h3 id="toc337">(<em>list?</em> x)</h3>
 Returns true if x implements IPersistentList<br />
<a name="load"></a><br />
<hr />
<h3 id="toc338">(<em>load</em> &amp; paths)</h3>
 Loads Clojure code from resources in classpath. A path is interpreted as classpath-relative if it begins with a slash or relative to the root directory for the current namespace otherwise.<br />
<a name="load-file"></a><br />
<hr />
<h3 id="toc339">(<em>load-file</em> name)</h3>
 Sequentially read and evaluate the set of forms contained in the file.<br />
<a name="load-reader"></a><br />
<hr />
<h3 id="toc340">(<em>load-reader</em> rdr)</h3>
 Sequentially read and evaluate the set of forms contained in the stream/file<br />
<a name="load-string"></a><br />
<hr />
<h3 id="toc341">(<em>load-string</em> s)</h3>
 Sequentially read and evaluate the set of forms contained in the string<br />
<a name="loaded-libs"></a><br />
<hr />
<h3 id="toc342">(<em>loaded-libs</em> )</h3>
 Returns a sorted set of symbols naming the currently loaded libs<br />
<a name="locking"></a><br />
<hr />
<h3 id="toc343">(<em>locking</em> x &amp; body)</h3>
 <h4 id="toc344">Macro</h4>
 Executes exprs in an implicit do, while holding the monitor of x. Will release the monitor of x in all circumstances.<br />
<a name="long"></a><br />
<hr />
<h3 id="toc345">(<em>long</em> x)</h3>
 Coerce to long<br />
<a name="long-array"></a><br />
<hr />
<h3 id="toc346">(<em>long-array</em> size-or-seq)</h3>
 <h3 id="toc347">(<em>long-array</em> size init-val-or-seq)</h3>
 Creates an array of ints<br />
<a name="longs"></a><br />
<hr />
<h3 id="toc348">(<em>longs</em> xs)</h3>
 Casts to long[]<br />
<a name="loop"></a><br />
<hr />
<h3 id="toc349">(<em>loop</em> bindings &amp; body)</h3>
 <h4 id="toc350">Macro</h4>
 Evaluates the exprs in a lexical context in which the symbols in the binding-forms are bound to their respective init-exprs or parts therein. Acts as a recur target.<br />
<a name="macroexpand"></a><br />
<hr />
<h3 id="toc351">(<em>macroexpand</em> form)</h3>
 Repeatedly calls macroexpand-1 on form until it no longer represents a macro form, then returns it. Note neither macroexpand-1 nor macroexpand expand macros in subforms.<br />
<a name="macroexpand-1"></a><br />
<hr />
<h3 id="toc352">(<em>macroexpand-1</em> form)</h3>
 If form represents a macro form, returns its expansion, else returns form.<br />
<a name="make-array"></a><br />
<hr />
<h3 id="toc353">(<em>make-array</em> type len)</h3>
 <h3 id="toc354">(<em>make-array</em> type dim &amp; more-dims)</h3>
 Creates and returns an array of instances of the specified class of the specified dimension(s). Note that a class object is required. Class objects can be obtained by using their imported or fully-qualified name. Class objects for the primitive types can be obtained using, e.g., Integer/TYPE.<br />
<a name="make-hierarchy"></a><br />
<hr />
<h3 id="toc355">(<em>make-hierarchy</em> )</h3>
 Creates a hierarchy object for use with derive, isa? etc.<br />
<a name="map"></a><br />
<hr />
<h3 id="toc356">(<em>map</em> f coll)</h3>
 <h3 id="toc357">(<em>map</em> f c1 c2)</h3>
 <h3 id="toc358">(<em>map</em> f c1 c2 c3)</h3>
 <h3 id="toc359">(<em>map</em> f c1 c2 c3 &amp; colls)</h3>
 Returns a lazy sequence consisting of the result of applying f to the set of first items of each coll, followed by applying f to the set of second items in each coll, until any one of the colls is exhausted. Any remaining items in other colls are ignored. Function f should accept number-of-colls arguments.<br />
<a name="map?"></a><br />
<hr />
<h3 id="toc360">(<em>map?</em> x)</h3>
 Return true if x implements IPersistentMap<br />
<a name="mapcat"></a><br />
<hr />
<h3 id="toc361">(<em>mapcat</em> f &amp; colls)</h3>
 Returns the result of applying concat to the result of applying map to f and colls. Thus function f should return a collection.<br />
<a name="max"></a><br />
<hr />
<h3 id="toc362">(<em>max</em> x)</h3>
 <h3 id="toc363">(<em>max</em> x y)</h3>
 <h3 id="toc364">(<em>max</em> x y &amp; more)</h3>
 Returns the greatest of the nums.<br />
<a name="max-key"></a><br />
<hr />
<h3 id="toc365">(<em>max-key</em> k x)</h3>
 <h3 id="toc366">(<em>max-key</em> k x y)</h3>
 <h3 id="toc367">(<em>max-key</em> k x y &amp; more)</h3>
 Returns the x for which (k x), a number, is greatest.<br />
<a name="memfn"></a><br />
<hr />
<h3 id="toc368">(<em>memfn</em> name &amp; args)</h3>
 <h4 id="toc369">Macro</h4>
 Expands into code that creates a fn that expects to be passed an object and any args and calls the named instance method on the object passing the args. Use when you want to treat a Java method as a first-class fn.<br />
<a name="memoize"></a><br />
<hr />
<h3 id="toc370">(<em>memoize</em> f)</h3>
 Returns a memoized version of a referentially transparent function. The memoized version of the function keeps a cache of the mapping from arguments to results and, when calls with the same arguments are repeated often, has higher performance at the expense of higher memory use.<br />
<a name="merge"></a><br />
<hr />
<h3 id="toc371">(<em>merge</em> &amp; maps)</h3>
 Returns a map that consists of the rest of the maps conj-ed onto the first. If a key occurs in more than one map, the mapping from the latter (left-to-right) will be the mapping in the result.<br />
<a name="merge-with"></a><br />
<hr />
<h3 id="toc372">(<em>merge-with</em> f &amp; maps)</h3>
 Returns a map that consists of the rest of the maps conj-ed onto the first. If a key occurs in more than one map, the mapping(s) from the latter (left-to-right) will be combined with the mapping in the result by calling (f val-in-result val-in-latter).<br />
<a name="meta"></a><br />
<hr />
<h3 id="toc373">(<em>meta</em> obj)</h3>
 Returns the metadata of obj, returns nil if there is no metadata.<br />
<a name="methods"></a><br />
<hr />
<h3 id="toc374">(<em>methods</em> multifn)</h3>
 Given a multimethod, returns a map of dispatch values -&gt; dispatch fns<br />
<a name="min"></a><br />
<hr />
<h3 id="toc375">(<em>min</em> x)</h3>
 <h3 id="toc376">(<em>min</em> x y)</h3>
 <h3 id="toc377">(<em>min</em> x y &amp; more)</h3>
 Returns the least of the nums.<br />
<a name="min-key"></a><br />
<hr />
<h3 id="toc378">(<em>min-key</em> k x)</h3>
 <h3 id="toc379">(<em>min-key</em> k x y)</h3>
 <h3 id="toc380">(<em>min-key</em> k x y &amp; more)</h3>
 Returns the x for which (k x), a number, is least.<br />
<a name="mod"></a><br />
<hr />
<h3 id="toc381">(<em>mod</em> num div)</h3>
 Modulus of num and div. Truncates toward negative infinity.<br />
<a name="name"></a><br />
<hr />
<h3 id="toc382">(<em>name</em> x)</h3>
 Returns the name String of a symbol or keyword.<br />
<a name="namespace"></a><br />
<hr />
<h3 id="toc383">(<em>namespace</em> x)</h3>
 Returns the namespace String of a symbol or keyword, or nil if not present.<br />
<a name="neg?"></a><br />
<hr />
<h3 id="toc384">(<em>neg?</em> x)</h3>
 Returns true if num is less than zero, else false<br />
<a name="newline"></a><br />
<hr />
<h3 id="toc385">(<em>newline</em> )</h3>
 Writes a newline to the output stream that is the current value of *out*<br />
<a name="next"></a><br />
<hr />
<h3 id="toc386">(<em>next</em> coll)</h3>
 Returns a seq of the items after the first. Calls seq on its argument. If there are no more items, returns nil.<br />
<a name="nfirst"></a><br />
<hr />
<h3 id="toc387">(<em>nfirst</em> x)</h3>
 Same as (next (first x))<br />
<a name="nil?"></a><br />
<hr />
<h3 id="toc388">(<em>nil?</em> x)</h3>
 Returns true if x is nil, false otherwise.<br />
<a name="nnext"></a><br />
<hr />
<h3 id="toc389">(<em>nnext</em> x)</h3>
 Same as (next (next x))<br />
<a name="not"></a><br />
<hr />
<h3 id="toc390">(<em>not</em> x)</h3>
 Returns true if x is logical false, false otherwise.<br />
<a name="not-any?"></a><br />
<hr />
<h3 id="toc391">(<em>not-any?</em> pred coll)</h3>
 Returns false if (pred x) is logical true for any x in coll, else true.<br />
<a name="not-empty"></a><br />
<hr />
<h3 id="toc392">(<em>not-empty</em> coll)</h3>
 If coll is empty, returns nil, else coll<br />
<a name="not-every?"></a><br />
<hr />
<h3 id="toc393">(<em>not-every?</em> pred coll)</h3>
 Returns false if (pred x) is logical true for every x in coll, else true.<br />
<a name="not="></a><br />
<hr />
<h3 id="toc394">(<em>not=</em> x)</h3>
 <h3 id="toc395">(<em>not=</em> x y)</h3>
 <h3 id="toc396">(<em>not=</em> x y &amp; more)</h3>
 Same as (not (= obj1 obj2))<br />
<a name="ns"></a><br />
<hr />
<h3 id="toc397">(<em>ns</em> name &amp; references)</h3>
 <h4 id="toc398">Macro</h4>
 Sets *ns* to the namespace named by name (unevaluated), creating it if needed. references can be zero or more of: (:refer-clojure ...) (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class) with the syntax of refer-clojure/require/use/import/load/gen-class respectively, except the arguments are unevaluated and need not be quoted. (:gen-class ...), when supplied, defaults to :name corresponding to the ns name, :main true, :impl-ns same as ns, and :init-impl-ns true. All options of gen-class are supported. The :gen-class directive is ignored when not compiling. If :gen-class is not supplied, when compiled only an nsnameinit.class will be generated. If :refer-clojure is not used, a default (refer 'clojure) is used. Use of ns is preferred to individual calls to in-ns/require/use/import:<br />
<br />
(ns foo.bar (:refer-clojure :exclude [ancestors printf]) (:require (clojure.contrib sql sql.tests)) (:use (my.lib this that)) (:import (java.util Date Timer Random) (java.sql Connection Statement)))<br />
<a name="ns-aliases"></a><br />
<hr />
<h3 id="toc399">(<em>ns-aliases</em> ns)</h3>
 Returns a map of the aliases for the namespace.<br />
<a name="ns-imports"></a><br />
<hr />
<h3 id="toc400">(<em>ns-imports</em> ns)</h3>
 Returns a map of the import mappings for the namespace.<br />
<a name="ns-interns"></a><br />
<hr />
<h3 id="toc401">(<em>ns-interns</em> ns)</h3>
 Returns a map of the intern mappings for the namespace.<br />
<a name="ns-map"></a><br />
<hr />
<h3 id="toc402">(<em>ns-map</em> ns)</h3>
 Returns a map of all the mappings for the namespace.<br />
<a name="ns-name"></a><br />
<hr />
<h3 id="toc403">(<em>ns-name</em> ns)</h3>
 Returns the name of the namespace, a symbol.<br />
<a name="ns-publics"></a><br />
<hr />
<h3 id="toc404">(<em>ns-publics</em> ns)</h3>
 Returns a map of the public intern mappings for the namespace.<br />
<a name="ns-refers"></a><br />
<hr />
<h3 id="toc405">(<em>ns-refers</em> ns)</h3>
 Returns a map of the refer mappings for the namespace.<br />
<a name="ns-resolve"></a><br />
<hr />
<h3 id="toc406">(<em>ns-resolve</em> ns sym)</h3>
 Returns the var or Class to which a symbol will be resolved in the namespace, else nil. Note that if the symbol is fully qualified, the var/Class to which it resolves need not be present in the namespace.<br />
<a name="ns-unalias"></a><br />
<hr />
<h3 id="toc407">(<em>ns-unalias</em> ns sym)</h3>
 Removes the alias for the symbol from the namespace.<br />
<a name="ns-unmap"></a><br />
<hr />
<h3 id="toc408">(<em>ns-unmap</em> ns sym)</h3>
 Removes the mappings for the symbol from the namespace.<br />
<a name="nth"></a><br />
<hr />
<h3 id="toc409">(<em>nth</em> coll index)</h3>
 <h3 id="toc410">(<em>nth</em> coll index not-found)</h3>
 Returns the value at the index. get returns nil if index out of bounds, nth throws an exception unless not-found is supplied. nth also works for strings, Java arrays, regex Matchers and Lists, and, in O(n) time, for sequences.<br />
<a name="nthnext"></a><br />
<hr />
<h3 id="toc411">(<em>nthnext</em> coll n)</h3>
 Returns the nth next of coll, (seq coll) when n is 0.<br />
<a name="num"></a><br />
<hr />
<h3 id="toc412">(<em>num</em> x)</h3>
 Coerce to Number<br />
<a name="number?"></a><br />
<hr />
<h3 id="toc413">(<em>number?</em> x)</h3>
 Returns true if x is a Number<br />
<a name="odd?"></a><br />
<hr />
<h3 id="toc414">(<em>odd?</em> n)</h3>
 Returns true if n is odd, throws an exception if n is not an integer<br />
<a name="or"></a><br />
<hr />
<h3 id="toc415">(<em>or</em> )</h3>
 <h3 id="toc416">(<em>or</em> x)</h3>
 <h3 id="toc417">(<em>or</em> x &amp; next)</h3>
 <h4 id="toc418">Macro</h4>
 Evaluates exprs one at a time, from left to right. If a form returns a logical true value, or returns that value and doesn't evaluate any of the other expressions, otherwise it returns the value of the last expression. (or) returns nil.<br />
<a name="parents"></a><br />
<hr />
<h3 id="toc419">(<em>parents</em> tag)</h3>
 <h3 id="toc420">(<em>parents</em> h tag)</h3>
 Returns the immediate parents of tag, either via a Java type inheritance relationship or a relationship established via derive. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to the global hierarchy<br />
<a name="partial"></a><br />
<hr />
<h3 id="toc421">(<em>partial</em> f arg1)</h3>
 <h3 id="toc422">(<em>partial</em> f arg1 arg2)</h3>
 <h3 id="toc423">(<em>partial</em> f arg1 arg2 arg3)</h3>
 <h3 id="toc424">(<em>partial</em> f arg1 arg2 arg3 &amp; more)</h3>
 Takes a function f and fewer than the normal arguments to f, and returns a fn that takes a variable number of additional args. When called, the returned function calls f with args + additional args.<br />
<a name="partition"></a><br />
<hr />
<h3 id="toc425">(<em>partition</em> n coll)</h3>
 <h3 id="toc426">(<em>partition</em> n step coll)</h3>
 Returns a lazy sequence of lists of n items each, at offsets step apart. If step is not supplied, defaults to n, i.e. the partitions do not overlap.<br />
<a name="pcalls"></a><br />
<hr />
<h3 id="toc427">(<em>pcalls</em> &amp; fns)</h3>
 Executes the no-arg fns in parallel, returning a lazy sequence of their values<br />
<a name="peek"></a><br />
<hr />
<h3 id="toc428">(<em>peek</em> coll)</h3>
 For a list or queue, same as first, for a vector, same as, but much more efficient than, last. If the collection is empty, returns nil.<br />
<a name="pmap"></a><br />
<hr />
<h3 id="toc429">(<em>pmap</em> f coll)</h3>
 <h3 id="toc430">(<em>pmap</em> f coll &amp; colls)</h3>
 Like map, except f is applied in parallel. Semi-lazy in that the parallel computation stays ahead of the consumption, but doesn't realize the entire result unless required. Only useful for computationally intensive functions where the time of f dominates the coordination overhead.<br />
<a name="pop"></a><br />
<hr />
<h3 id="toc431">(<em>pop</em> coll)</h3>
 For a list or queue, returns a new list/queue without the first item, for a vector, returns a new vector without the last item. If the collection is empty, throws an exception. Note - not the same as next/butlast.<br />
<a name="pos?"></a><br />
<hr />
<h3 id="toc432">(<em>pos?</em> x)</h3>
 Returns true if num is greater than zero, else false<br />
<a name="pr"></a><br />
<hr />
<h3 id="toc433">(<em>pr</em> )</h3>
 <h3 id="toc434">(<em>pr</em> x)</h3>
 <h3 id="toc435">(<em>pr</em> x &amp; more)</h3>
 Prints the object(s) to the output stream that is the current value of *out*. Prints the object(s), separated by spaces if there is more than one. By default, pr and prn print in a way that objects can be read by the reader<br />
<a name="pr-str"></a><br />
<hr />
<h3 id="toc436">(<em>pr-str</em> &amp; xs)</h3>
 pr to a string, returning it<br />
<a name="prefer-method"></a><br />
<hr />
<h3 id="toc437">(<em>prefer-method</em> multifn dispatch-val-x dispatch-val-y)</h3>
 Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y when there is a conflict<br />
<a name="prefers"></a><br />
<hr />
<h3 id="toc438">(<em>prefers</em> multifn)</h3>
 Given a multimethod, returns a map of preferred value -&gt; set of other values<br />
<a name="print"></a><br />
<hr />
<h3 id="toc439">(<em>print</em> &amp; more)</h3>
 Prints the object(s) to the output stream that is the current value of *out*. print and println produce output for human consumption.<br />
<a name="print-namespace-doc"></a><br />
<hr />
<h3 id="toc440">(<em>print-namespace-doc</em> nspace)</h3>
 Print the documentation string of a Namespace.<br />
<a name="print-str"></a><br />
<hr />
<h3 id="toc441">(<em>print-str</em> &amp; xs)</h3>
 print to a string, returning it<br />
<a name="printf"></a><br />
<hr />
<h3 id="toc442">(<em>printf</em> fmt &amp; args)</h3>
 Prints formatted output, as per format<br />
<a name="println"></a><br />
<hr />
<h3 id="toc443">(<em>println</em> &amp; more)</h3>
 Same as print followed by (newline)<br />
<a name="println-str"></a><br />
<hr />
<h3 id="toc444">(<em>println-str</em> &amp; xs)</h3>
 println to a string, returning it<br />
<a name="prn"></a><br />
<hr />
<h3 id="toc445">(<em>prn</em> &amp; more)</h3>
 Same as pr followed by (newline). Observes *flush-on-newline*<br />
<a name="prn-str"></a><br />
<hr />
<h3 id="toc446">(<em>prn-str</em> &amp; xs)</h3>
 prn to a string, returning it<br />
<a name="proxy"></a><br />
<hr />
<h3 id="toc447">(<em>proxy</em> class-and-interfaces args &amp; fs)</h3>
 <h4 id="toc448">Macro</h4>
 class-and-interfaces - a vector of class names<br />
<br />
args - a (possibly empty) vector of arguments to the superclass constructor.<br />
<br />
f =&gt; (name [params*] body) or (name ([params*] body) ([params+] body) ...)<br />
<br />
Expands to code which creates a instance of a proxy class that implements the named class/interface(s) by calling the supplied fns. A single class, if provided, must be first. If not provided it defaults to Object.<br />
<br />
The interfaces names must be valid interface types. If a method fn is not provided for a class method, the superclass methd will be called. If a method fn is not provided for an interface method, an UnsupportedOperationException will be thrown should it be called. Method fns are closures and can capture the environment in which proxy is called. Each method fn takes an additional implicit first arg, which is bound to 'this. Note that while method fns can be provided to override protected methods, they have no other access to protected members, nor to super, as these capabilities cannot be proxied.<br />
<a name="proxy-mappings"></a><br />
<hr />
<h3 id="toc449">(<em>proxy-mappings</em> proxy)</h3>
 Takes a proxy instance and returns the proxy's fn map.<br />
<a name="proxy-super"></a><br />
<hr />
<h3 id="toc450">(<em>proxy-super</em> meth &amp; args)</h3>
 <h4 id="toc451">Macro</h4>
 Use to call a superclass method in the body of a proxy method. Note, expansion captures 'this<br />
<a name="pvalues"></a><br />
<hr />
<h3 id="toc452">(<em>pvalues</em> &amp; exprs)</h3>
 <h4 id="toc453">Macro</h4>
 Returns a lazy sequence of the values of the exprs, which are evaluated in parallel<br />
<a name="quot"></a><br />
<hr />
<h3 id="toc454">(<em>quot</em> num div)</h3>
 quot[ient] of dividing numerator by denominator.<br />
<a name="rand"></a><br />
<hr />
<h3 id="toc455">(<em>rand</em> )</h3>
 <h3 id="toc456">(<em>rand</em> n)</h3>
 Returns a random floating point number between 0 (inclusive) and n (default 1) (exclusive).<br />
<a name="rand-int"></a><br />
<hr />
<h3 id="toc457">(<em>rand-int</em> n)</h3>
 Returns a random integer between 0 (inclusive) and n (exclusive).<br />
<a name="range"></a><br />
<hr />
<h3 id="toc458">(<em>range</em> end)</h3>
 <h3 id="toc459">(<em>range</em> start end)</h3>
 <h3 id="toc460">(<em>range</em> start end step)</h3>
 Returns a lazy seq of nums from start (inclusive) to end (exclusive), by step, where start defaults to 0 and step to 1.<br />
<a name="ratio?"></a><br />
<hr />
<h3 id="toc461">(<em>ratio?</em> n)</h3>
 Returns true if n is a Ratio<br />
<a name="rationalize"></a><br />
<hr />
<h3 id="toc462">(<em>rationalize</em> num)</h3>
 returns the rational value of num<br />
<a name="re-find"></a><br />
<hr />
<h3 id="toc463">(<em>re-find</em> m)</h3>
 <h3 id="toc464">(<em>re-find</em> re s)</h3>
 Returns the next regex match, if any, of string to pattern, using java.util.regex.Matcher.find(). Uses re-groups to return the groups.<br />
<a name="re-groups"></a><br />
<hr />
<h3 id="toc465">(<em>re-groups</em> m)</h3>
 Returns the groups from the most recent match/find. If there are no nested groups, returns a string of the entire match. If there are nested groups, returns a vector of the groups, the first element being the entire match.<br />
<a name="re-matcher"></a><br />
<hr />
<h3 id="toc466">(<em>re-matcher</em> re s)</h3>
 Returns an instance of java.util.regex.Matcher, for use, e.g. in re-find.<br />
<a name="re-matches"></a><br />
<hr />
<h3 id="toc467">(<em>re-matches</em> re s)</h3>
 Returns the match, if any, of string to pattern, using java.util.regex.Matcher.matches(). Uses re-groups to return the groups.<br />
<a name="re-pattern"></a><br />
<hr />
<h3 id="toc468">(<em>re-pattern</em> s)</h3>
 Returns an instance of java.util.regex.Pattern, for use, e.g. in re-matcher.<br />
<a name="re-seq"></a><br />
<hr />
<h3 id="toc469">(<em>re-seq</em> re s)</h3>
 Returns a lazy sequence of successive matches of pattern in string, using java.util.regex.Matcher.find(), each such match processed with re-groups.<br />
<a name="read"></a><br />
<hr />
<h3 id="toc470">(<em>read</em> )</h3>
 <h3 id="toc471">(<em>read</em> stream)</h3>
 <h3 id="toc472">(<em>read</em> stream eof-error? eof-value)</h3>
 <h3 id="toc473">(<em>read</em> stream eof-error? eof-value recursive?)</h3>
 Reads the next object from stream, which must be an instance of java.io.PushbackReader or some derivee. stream defaults to the current value of *in* .<br />
<a name="read-line"></a><br />
<hr />
<h3 id="toc474">(<em>read-line</em> )</h3>
 Reads the next line from stream that is the current value of *in* .<br />
<a name="read-string"></a><br />
<hr />
<h3 id="toc475">(<em>read-string</em> s)</h3>
 Reads one object from the string s<br />
<a name="reduce"></a><br />
<hr />
<h3 id="toc476">(<em>reduce</em> f coll)</h3>
 <h3 id="toc477">(<em>reduce</em> f val coll)</h3>
 f should be a function of 2 arguments. If val is not supplied, returns the result of applying f to the first 2 items in coll, then applying f to that result and the 3rd item, etc. If coll contains no items, f must accept no arguments as well, and reduce returns the result of calling f with no arguments. If coll has only 1 item, it is returned and f is not called. If val is supplied, returns the result of applying f to val and the first item in coll, then applying f to that result and the 2nd item, etc. If coll contains no items, returns val and f is not called.<br />
<a name="ref"></a><br />
<hr />
<h3 id="toc478">(<em>ref</em> x)</h3>
 <h3 id="toc479">(<em>ref</em> x &amp; options)</h3>
 Creates and returns a Ref with an initial value of x and zero or more options (in any order):<br />
<br />
:meta metadata-map<br />
<br />
:validator validate-fn<br />
<br />
If metadata-map is supplied, it will be come the metadata on the ref. validate-fn must be nil or a side-effect-free fn of one argument, which will be passed the intended new state on any state change. If the new state is unacceptable, the validate-fn should return false or throw an exception. validate-fn will be called on transaction commit, when all refs have their final values.<br />
<a name="ref-set"></a><br />
<hr />
<h3 id="toc480">(<em>ref-set</em> ref val)</h3>
 Must be called in a transaction. Sets the value of ref. Returns val.<br />
<a name="refer"></a><br />
<hr />
<h3 id="toc481">(<em>refer</em> ns-sym &amp; filters)</h3>
 refers to all public vars of ns, subject to filters. filters can include at most one each of:<br />
<br />
:exclude list-of-symbols :only list-of-symbols :rename map-of-fromsymbol-tosymbol<br />
<br />
For each public interned var in the namespace named by the symbol, adds a mapping from the name of the var to the var to the current namespace. Throws an exception if name is already mapped to something else in the current namespace. Filters can be used to select a subset, via inclusion or exclusion, or to provide a mapping to a symbol different from the var's name, in order to prevent clashes. Use :use in the ns macro in preference to calling this directly.<br />
<a name="refer-clojure"></a><br />
<hr />
<h3 id="toc482">(<em>refer-clojure</em> &amp; filters)</h3>
 <h4 id="toc483">Macro</h4>
 Same as (refer 'clojure.core &lt;filters&gt;)<br />
<a name="release-pending-sends"></a><br />
<hr />
<h3 id="toc484">(<em>release-pending-sends</em> )</h3>
 Normally, actions sent directly or indirectly during another action are held until the action completes (changes the agent's state). This function can be used to dispatch any pending sent actions immediately. This has no impact on actions sent during a transaction, which are still held until commit. If no action is occurring, does nothing. Returns the number of actions dispatched.<br />
<a name="rem"></a><br />
<hr />
<h3 id="toc485">(<em>rem</em> num div)</h3>
 remainder of dividing numerator by denominator.<br />
<a name="remove"></a><br />
<hr />
<h3 id="toc486">(<em>remove</em> pred coll)</h3>
 Returns a lazy sequence of the items in coll for which (pred item) returns false. pred must be free of side-effects.<br />
<a name="remove-method"></a><br />
<hr />
<h3 id="toc487">(<em>remove-method</em> multifn dispatch-val)</h3>
 Removes the method of multimethod associated with dispatch-value.<br />
<a name="remove-ns"></a><br />
<hr />
<h3 id="toc488">(<em>remove-ns</em> sym)</h3>
 Removes the namespace named by the symbol. Use with caution. Cannot be used to remove the clojure namespace.<br />
<a name="remove-watch"></a><br />
<hr />
<h3 id="toc489">(<em>remove-watch</em> reference key)</h3>
 Experimental. Removes a watch (set by add-watch) from a reference<br />
<a name="remove-watcher"></a><br />
<hr />
<h3 id="toc490">(<em>remove-watcher</em> reference watcher-agent)</h3>
 Experimental. Removes a watcher (set by add-watcher) from a reference<br />
<a name="repeat"></a><br />
<hr />
<h3 id="toc491">(<em>repeat</em> x)</h3>
 <h3 id="toc492">(<em>repeat</em> n x)</h3>
 Returns a lazy (infinite!, or length n if supplied) sequence of xs.<br />
<a name="repeatedly"></a><br />
<hr />
<h3 id="toc493">(<em>repeatedly</em> f)</h3>
 Takes a function of no args, presumably with side effects, and returns an infinite lazy sequence of calls to it<br />
<a name="replace"></a><br />
<hr />
<h3 id="toc494">(<em>replace</em> smap coll)</h3>
 Given a map of replacement pairs and a vector/collection, returns a vector/seq with any elements = a key in smap replaced with the corresponding val in smap<br />
<a name="replicate"></a><br />
<hr />
<h3 id="toc495">(<em>replicate</em> n x)</h3>
 Returns a lazy seq of n xs.<br />
<a name="require"></a><br />
<hr />
<h3 id="toc496">(<em>require</em> &amp; args)</h3>
 Loads libs, skipping any that are already loaded. Each argument is either a libspec that identifies a lib, a prefix list that identifies multiple libs whose names share a common prefix, or a flag that modifies how all the identified libs are loaded. Use :require in the ns macro in preference to calling this directly.<br />
<br />
Libs<br />
<br />
A 'lib' is a named set of resources in classpath whose contents define a library of Clojure code. Lib names are symbols and each lib is associated with a Clojure namespace and a Java package that share its name. A lib's name also locates its root directory within classpath using Java's package name to classpath-relative path mapping. All resources in a lib should be contained in the directory structure under its root directory. All definitions a lib makes should be in its associated namespace.<br />
<br />
'require loads a lib by loading its root resource. The root resource path is derived from the root directory path by repeating its last component and appending '.clj'. For example, the lib 'x.y.z has root directory &lt;classpath&gt;/x/y/z; root resource &lt;classpath&gt;/x/y/z/z.clj. The root resource should contain code to create the lib's namespace and load any additional lib resources.<br />
<br />
Libspecs<br />
<br />
A libspec is a lib name or a vector containing a lib name followed by options expressed as sequential keywords and arguments.<br />
<br />
Recognized options: :as :as takes a symbol as its argument and makes that symbol an alias to the lib's namespace in the current namespace.<br />
<br />
Prefix Lists<br />
<br />
It's common for Clojure code to depend on several libs whose names have the same prefix. When specifying libs, prefix lists can be used to reduce repetition. A prefix list contains the shared prefix followed by libspecs with the shared prefix removed from the lib names. After removing the prefix, the names that remain must not contain any periods.<br />
<br />
Flags<br />
<br />
A flag is a keyword. Recognized flags: :reload, :reload-all, :verbose :reload forces loading of all the identified libs even if they are already loaded :reload-all implies :reload and also forces loading of all libs that the identified libs directly or indirectly load via require or use :verbose triggers printing information about each load, alias, and refer<br />
<a name="reset"></a><br />
<hr />
<h3 id="toc497">(<em>reset!</em> atom newval)</h3>
 Sets the value of atom to newval without regard for the current value. Returns newval.<br />
<a name="reset-meta"></a><br />
<hr />
<h3 id="toc498">(<em>reset-meta!</em> iref metadata-map)</h3>
 Atomically resets the metadata for a namespace/var/ref/agent/atom<br />
<a name="resolve"></a><br />
<hr />
<h3 id="toc499">(<em>resolve</em> sym)</h3>
 same as (ns-resolve *ns* symbol)<br />
<a name="rest"></a><br />
<hr />
<h3 id="toc500">(<em>rest</em> coll)</h3>
 Returns a possibly empty seq of the items after the first. Calls seq on its argument.<br />
<a name="resultset-seq"></a><br />
<hr />
<h3 id="toc501">(<em>resultset-seq</em> rs)</h3>
 Creates and returns a lazy sequence of structmaps corresponding to the rows in the java.sql.ResultSet rs<br />
<a name="reverse"></a><br />
<hr />
<h3 id="toc502">(<em>reverse</em> coll)</h3>
 Returns a seq of the items in coll in reverse order. Not lazy.<br />
<a name="reversible?"></a><br />
<hr />
<h3 id="toc503">(<em>reversible?</em> coll)</h3>
 Returns true if coll implements Reversible<br />
<a name="rseq"></a><br />
<hr />
<h3 id="toc504">(<em>rseq</em> rev)</h3>
 Returns, in constant time, a seq of the items in rev (which can be a vector or sorted-map), in reverse order. If rev is empty returns nil<br />
<a name="rsubseq"></a><br />
<hr />
<h3 id="toc505">(<em>rsubseq</em> sc test key)</h3>
 <h3 id="toc506">(<em>rsubseq</em> sc start-test start-key end-test end-key)</h3>
 sc must be a sorted collection, test(s) one of &lt;, &lt;=, &gt; or &gt;=. Returns a reverse seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true<br />
<a name="second"></a><br />
<hr />
<h3 id="toc507">(<em>second</em> x)</h3>
 Same as (first (next x))<br />
<a name="select-keys"></a><br />
<hr />
<h3 id="toc508">(<em>select-keys</em> map keyseq)</h3>
 Returns a map containing only those entries in map whose key is in keys<br />
<a name="send"></a><br />
<hr />
<h3 id="toc509">(<em>send</em> a f &amp; args)</h3>
 Dispatch an action to an agent. Returns the agent immediately. Subsequently, in a thread from a thread pool, the state of the agent will be set to the value of:<br />
<br />
(apply action-fn state-of-agent args)<br />
<a name="send-off"></a><br />
<hr />
<h3 id="toc510">(<em>send-off</em> a f &amp; args)</h3>
 Dispatch a potentially blocking action to an agent. Returns the agent immediately. Subsequently, in a separate thread, the state of the agent will be set to the value of:<br />
<br />
(apply action-fn state-of-agent args)<br />
<a name="seq"></a><br />
<hr />
<h3 id="toc511">(<em>seq</em> coll)</h3>
 Returns a seq on the collection. If the collection is empty, returns nil. (seq nil) returns nil. seq also works on Strings, native Java arrays (of reference types) and any objects that implement Iterable.<br />
<a name="seq?"></a><br />
<hr />
<h3 id="toc512">(<em>seq?</em> x)</h3>
 Return true if x implements ISeq<br />
<a name="seque"></a><br />
<hr />
<h3 id="toc513">(<em>seque</em> s)</h3>
 <h3 id="toc514">(<em>seque</em> n-or-q s)</h3>
 Creates a queued seq on another (presumably lazy) seq s. The queued seq will produce a concrete seq in the background, and can get up to n items ahead of the consumer. n-or-q can be an integer n buffer size, or an instance of java.util.concurrent BlockingQueue. Note that reading from a seque can block if the reader gets ahead of the producer.<br />
<a name="sequence"></a><br />
<hr />
<h3 id="toc515">(<em>sequence</em> coll)</h3>
 Coerces coll to a (possibly empty) sequence, if it is not already one. Will not force a lazy seq. (sequence nil) yields ()<br />
<a name="sequential?"></a><br />
<hr />
<h3 id="toc516">(<em>sequential?</em> coll)</h3>
 Returns true if coll implements Sequential<br />
<a name="set"></a><br />
<hr />
<h3 id="toc517">(<em>set</em> coll)</h3>
 Returns a set of the distinct elements of coll.<br />
<a name="set-validator"></a><br />
<hr />
<h3 id="toc518">(<em>set-validator!</em> iref validator-fn)</h3>
 Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a side-effect-free fn of one argument, which will be passed the intended new state on any state change. If the new state is unacceptable, the validator-fn should return false or throw an exception. If the current state (root value if var) is not acceptable to the new validator, an exception will be thrown and the validator will not be changed.<br />
<a name="set?"></a><br />
<hr />
<h3 id="toc519">(<em>set?</em> x)</h3>
 Returns true if x implements IPersistentSet<br />
<a name="short"></a><br />
<hr />
<h3 id="toc520">(<em>short</em> x)</h3>
 Coerce to short<br />
<a name="shutdown-agents"></a><br />
<hr />
<h3 id="toc521">(<em>shutdown-agents</em> )</h3>
 Initiates a shutdown of the thread pools that back the agent system. Running actions will complete, but no new actions will be accepted<br />
<a name="slurp"></a><br />
<hr />
<h3 id="toc522">(<em>slurp</em> f)</h3>
 Reads the file named by f into a string and returns it.<br />
<a name="some"></a><br />
<hr />
<h3 id="toc523">(<em>some</em> pred coll)</h3>
 Returns the first logical true value of (pred x) for any x in coll, else nil. One common idiom is to use a set as pred, for example this will return true if :fred is in the sequence, otherwise nil: (some #{:fred} coll)<br />
<a name="sort"></a><br />
<hr />
<h3 id="toc524">(<em>sort</em> coll)</h3>
 <h3 id="toc525">(<em>sort</em> comp coll)</h3>
 Returns a sorted sequence of the items in coll. If no comparator is supplied, uses compare. comparator must implement java.util.Comparator.<br />
<a name="sort-by"></a><br />
<hr />
<h3 id="toc526">(<em>sort-by</em> keyfn coll)</h3>
 <h3 id="toc527">(<em>sort-by</em> keyfn comp coll)</h3>
 Returns a sorted sequence of the items in coll, where the sort order is determined by comparing (keyfn item). If no comparator is supplied, uses compare. comparator must implement java.util.Comparator.<br />
<a name="sorted-map"></a><br />
<hr />
<h3 id="toc528">(<em>sorted-map</em> &amp; keyvals)</h3>
 keyval =&gt; key val Returns a new sorted map with supplied mappings.<br />
<a name="sorted-map-by"></a><br />
<hr />
<h3 id="toc529">(<em>sorted-map-by</em> comparator &amp; keyvals)</h3>
 keyval =&gt; key val Returns a new sorted map with supplied mappings, using the supplied comparator.<br />
<a name="sorted-set"></a><br />
<hr />
<h3 id="toc530">(<em>sorted-set</em> &amp; keys)</h3>
 Returns a new sorted set with supplied keys.<br />
<a name="sorted?"></a><br />
<hr />
<h3 id="toc531">(<em>sorted?</em> coll)</h3>
 Returns true if coll implements Sorted<br />
<a name="special-form-anchor"></a><br />
<hr />
<h3 id="toc532">(<em>special-form-anchor</em> x)</h3>
 Returns the anchor tag on <a class="wiki_link_ext" href="http://clojure.org/special_forms" rel="nofollow">http://clojure.org/special_forms</a> for the special form x, or nil<br />
<a name="special-symbol?"></a><br />
<hr />
<h3 id="toc533">(<em>special-symbol?</em> s)</h3>
 Returns true if s names a special form<br />
<a name="split-at"></a><br />
<hr />
<h3 id="toc534">(<em>split-at</em> n coll)</h3>
 Returns a vector of [(take n coll) (drop n coll)]<br />
<a name="split-with"></a><br />
<hr />
<h3 id="toc535">(<em>split-with</em> pred coll)</h3>
 Returns a vector of [(take-while pred coll) (drop-while pred coll)]<br />
<a name="str"></a><br />
<hr />
<h3 id="toc536">(<em>str</em> )</h3>
 <h3 id="toc537">(<em>str</em> x)</h3>
 <h3 id="toc538">(<em>str</em> x &amp; ys)</h3>
 With no args, returns the empty string. With one arg x, returns x.toString(). (str nil) returns the empty string. With more than one arg, returns the concatenation of the str values of the args.<br />
<a name="stream?"></a><br />
<hr />
<h3 id="toc539">(<em>stream?</em> x)</h3>
 Returns true if x is an instance of Stream<br />
<a name="string?"></a><br />
<hr />
<h3 id="toc540">(<em>string?</em> x)</h3>
 Return true if x is a String<br />
<a name="struct"></a><br />
<hr />
<h3 id="toc541">(<em>struct</em> s &amp; vals)</h3>
 Returns a new structmap instance with the keys of the structure-basis. vals must be supplied for basis keys in order - where values are not supplied they will default to nil.<br />
<a name="struct-map"></a><br />
<hr />
<h3 id="toc542">(<em>struct-map</em> s &amp; inits)</h3>
 Returns a new structmap instance with the keys of the structure-basis. keyvals may contain all, some or none of the basis keys - where values are not supplied they will default to nil. keyvals can also contain keys not in the basis.<br />
<a name="subs"></a><br />
<hr />
<h3 id="toc543">(<em>subs</em> s start)</h3>
 <h3 id="toc544">(<em>subs</em> s start end)</h3>
 Returns the substring of s beginning at start inclusive, and ending at end (defaults to length of string), exclusive.<br />
<a name="subseq"></a><br />
<hr />
<h3 id="toc545">(<em>subseq</em> sc test key)</h3>
 <h3 id="toc546">(<em>subseq</em> sc start-test start-key end-test end-key)</h3>
 sc must be a sorted collection, test(s) one of &lt;, &lt;=, &gt; or &gt;=. Returns a seq of those entries with keys ek for which (test (.. sc comparator (compare ek key)) 0) is true<br />
<a name="subvec"></a><br />
<hr />
<h3 id="toc547">(<em>subvec</em> v start)</h3>
 <h3 id="toc548">(<em>subvec</em> v start end)</h3>
 Returns a persistent vector of the items in vector from start (inclusive) to end (exclusive). If end is not supplied, defaults to (count vector). This operation is O(1) and very fast, as the resulting vector shares structure with the original and no trimming is done.<br />
<a name="supers"></a><br />
<hr />
<h3 id="toc549">(<em>supers</em> class)</h3>
 Returns the immediate and indirect superclasses and interfaces of c, if any<br />
<a name="swap"></a><br />
<hr />
<h3 id="toc550">(<em>swap!</em> atom f)</h3>
 <h3 id="toc551">(<em>swap!</em> atom f x)</h3>
 <h3 id="toc552">(<em>swap!</em> atom f x y)</h3>
 <h3 id="toc553">(<em>swap!</em> atom f x y &amp; args)</h3>
 Atomically swaps the value of atom to be: (apply f current-value-of-atom args). Note that f may be called multiple times, and thus should be free of side effects. Returns the value that was swapped in.<br />
<a name="symbol"></a><br />
<hr />
<h3 id="toc554">(<em>symbol</em> name)</h3>
 <h3 id="toc555">(<em>symbol</em> ns name)</h3>
 Returns a Symbol with the given namespace and name.<br />
<a name="symbol?"></a><br />
<hr />
<h3 id="toc556">(<em>symbol?</em> x)</h3>
 Return true if x is a Symbol<br />
<a name="sync"></a><br />
<hr />
<h3 id="toc557">(<em>sync</em> flags-ignored-for-now &amp; body)</h3>
 <h4 id="toc558">Macro</h4>
 transaction-flags =&gt; TBD, pass nil for now<br />
<br />
Runs the exprs (in an implicit do) in a transaction that encompasses exprs and any nested calls. Starts a transaction if none is already running on this thread. Any uncaught exception will abort the transaction and flow out of sync. The exprs may be run more than once, but any effects on Refs will be atomic.<br />
<a name="syntax-symbol-anchor"></a><br />
<hr />
<h3 id="toc559">(<em>syntax-symbol-anchor</em> x)</h3>
 Returns the anchor tag on <a class="wiki_link_ext" href="http://clojure.org/special_forms" rel="nofollow">http://clojure.org/special_forms</a> for the special form that uses syntax symbol x, or nil<br />
<a name="take"></a><br />
<hr />
<h3 id="toc560">(<em>take</em> n coll)</h3>
 Returns a lazy sequence of the first n items in coll, or all items if there are fewer than n.<br />
<a name="take-nth"></a><br />
<hr />
<h3 id="toc561">(<em>take-nth</em> n coll)</h3>
 Returns a lazy seq of every nth item in coll.<br />
<a name="take-while"></a><br />
<hr />
<h3 id="toc562">(<em>take-while</em> pred coll)</h3>
 Returns a lazy sequence of successive items from coll while (pred item) returns true. pred must be free of side-effects.<br />
<a name="test"></a><br />
<hr />
<h3 id="toc563">(<em>test</em> v)</h3>
 test [v] finds fn at key :test in var metadata and calls it, presuming failure will throw exception<br />
<a name="the-ns"></a><br />
<hr />
<h3 id="toc564">(<em>the-ns</em> x)</h3>
 If passed a namespace, returns it. Else, when passed a symbol, returns the namespace named by it, throwing an exception if not found.<br />
<a name="time"></a><br />
<hr />
<h3 id="toc565">(<em>time</em> expr)</h3>
 <h4 id="toc566">Macro</h4>
 Evaluates expr and prints the time it took. Returns the value of expr.<br />
<a name="to-array"></a><br />
<hr />
<h3 id="toc567">(<em>to-array</em> coll)</h3>
 Returns an array of Objects containing the contents of coll, which can be any Collection. Maps to java.util.Collection.toArray().<br />
<a name="to-array-2d"></a><br />
<hr />
<h3 id="toc568">(<em>to-array-2d</em> coll)</h3>
 Returns a (potentially-ragged) 2-dimensional array of Objects containing the contents of coll, which can be any Collection of any Collection.<br />
<a name="trampoline"></a><br />
<hr />
<h3 id="toc569">(<em>trampoline</em> f)</h3>
 <h3 id="toc570">(<em>trampoline</em> f &amp; args)</h3>
 trampoline can be used to convert algorithms requiring mutual recursion without stack consumption. Calls f with supplied args, if any. If f returns a fn, calls that fn with no arguments, and continues to repeat, until the return value is not a fn, then returns that non-fn value. Note that if you want to return a fn as a final value, you must wrap it in some data structure and unpack it after trampoline returns.<br />
<a name="tree-seq"></a><br />
<hr />
<h3 id="toc571">(<em>tree-seq</em> branch? children root)</h3>
 Returns a lazy sequence of the nodes in a tree, via a depth-first walk. branch? must be a fn of one arg that returns true if passed a node that can have children (but may not). children must be a fn of one arg that returns a sequence of the children. Will only be called on nodes for which branch? returns true. Root is the root node of the tree.<br />
<a name="true?"></a><br />
<hr />
<h3 id="toc572">(<em>true?</em> x)</h3>
 Returns true if x is the value true, false otherwise.<br />
<a name="type"></a><br />
<hr />
<h3 id="toc573">(<em>type</em> x)</h3>
 Returns the :type metadata of x, or its Class if none<br />
<a name="unchecked-add"></a><br />
<hr />
<h3 id="toc574">(<em>unchecked-add</em> x y)</h3>
 Returns the sum of x and y, both int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="unchecked-dec"></a><br />
<hr />
<h3 id="toc575">(<em>unchecked-dec</em> x)</h3>
 Returns a number one less than x, an int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="unchecked-divide"></a><br />
<hr />
<h3 id="toc576">(<em>unchecked-divide</em> x y)</h3>
 Returns the division of x by y, both int or long. Note - uses a primitive operator subject to truncation.<br />
<a name="unchecked-inc"></a><br />
<hr />
<h3 id="toc577">(<em>unchecked-inc</em> x)</h3>
 Returns a number one greater than x, an int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="unchecked-multiply"></a><br />
<hr />
<h3 id="toc578">(<em>unchecked-multiply</em> x y)</h3>
 Returns the product of x and y, both int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="unchecked-negate"></a><br />
<hr />
<h3 id="toc579">(<em>unchecked-negate</em> x)</h3>
 Returns the negation of x, an int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="unchecked-remainder"></a><br />
<hr />
<h3 id="toc580">(<em>unchecked-remainder</em> x y)</h3>
 Returns the remainder of division of x by y, both int or long. Note - uses a primitive operator subject to truncation.<br />
<a name="unchecked-subtract"></a><br />
<hr />
<h3 id="toc581">(<em>unchecked-subtract</em> x y)</h3>
 Returns the difference of x and y, both int or long. Note - uses a primitive operator subject to overflow.<br />
<a name="underive"></a><br />
<hr />
<h3 id="toc582">(<em>underive</em> tag parent)</h3>
 <h3 id="toc583">(<em>underive</em> h tag parent)</h3>
 Removes a parent/child relationship between parent and tag. h must be a hierarchy obtained from make-hierarchy, if not supplied defaults to, and modifies, the global hierarchy.<br />
<a name="update-in"></a><br />
<hr />
<h3 id="toc584">(<em>update-in</em> m [k &amp; ks] f &amp; args)</h3>
 'Updates' a value in a nested associative structure, where ks is a sequence of keys and f is a function that will take the old value and any supplied args and return the new value, and returns a new nested structure. If any levels do not exist, hash-maps will be created.<br />
<a name="update-proxy"></a><br />
<hr />
<h3 id="toc585">(<em>update-proxy</em> proxy mappings)</h3>
 Takes a proxy instance and a map of strings (which must correspond to methods of the proxy superclass/superinterfaces) to fns (which must take arguments matching the corresponding method, plus an additional (explicit) first arg corresponding to this, and updates (via assoc) the proxy's fn map. nil can be passed instead of a fn, in which case the corresponding method will revert to the default behavior. Note that this function can be used to update the behavior of an existing instance without changing its identity.<br />
<a name="use"></a><br />
<hr />
<h3 id="toc586">(<em>use</em> &amp; args)</h3>
 Like 'require, but also refers to each lib's namespace using clojure.core/refer. Use :use in the ns macro in preference to calling this directly.<br />
<br />
'use accepts additional options in libspecs: :exclude, :only, :rename. The arguments and semantics for :exclude, :only, and :rename are the same as those documented for clojure.core/refer.<br />
<a name="val"></a><br />
<hr />
<h3 id="toc587">(<em>val</em> e)</h3>
 Returns the value in the map entry.<br />
<a name="vals"></a><br />
<hr />
<h3 id="toc588">(<em>vals</em> map)</h3>
 Returns a sequence of the map's values.<br />
<a name="var-get"></a><br />
<hr />
<h3 id="toc589">(<em>var-get</em> x)</h3>
 Gets the value in the var object<br />
<a name="var-set"></a><br />
<hr />
<h3 id="toc590">(<em>var-set</em> x val)</h3>
 Sets the value in the var object to val. The var must be thread-locally bound.<br />
<a name="var?"></a><br />
<hr />
<h3 id="toc591">(<em>var?</em> v)</h3>
 Returns true if v is of type clojure.lang.Var<br />
<a name="vary-meta"></a><br />
<hr />
<h3 id="toc592">(<em>vary-meta</em> obj f &amp; args)</h3>
 Returns an object of the same type and value as obj, with (apply f (meta obj) args) as its metadata.<br />
<a name="vec"></a><br />
<hr />
<h3 id="toc593">(<em>vec</em> coll)</h3>
 Creates a new vector containing the contents of coll.<br />
<a name="vector"></a><br />
<hr />
<h3 id="toc594">(<em>vector</em> )</h3>
 <h3 id="toc595">(<em>vector</em> &amp; args)</h3>
 Creates a new vector containing the args.<br />
<a name="vector?"></a><br />
<hr />
<h3 id="toc596">(<em>vector?</em> x)</h3>
 Return true if x implements IPersistentVector<br />
<a name="when"></a><br />
<hr />
<h3 id="toc597">(<em>when</em> test &amp; body)</h3>
 <h4 id="toc598">Macro</h4>
 Evaluates test. If logical true, evaluates body in an implicit do.<br />
<a name="when-first"></a><br />
<hr />
<h3 id="toc599">(<em>when-first</em> bindings &amp; body)</h3>
 <h4 id="toc600">Macro</h4>
 bindings =&gt; x xs<br />
<br />
Same as (when (seq xs) (let [x (first xs)] body))<br />
<a name="when-let"></a><br />
<hr />
<h3 id="toc601">(<em>when-let</em> bindings &amp; body)</h3>
 <h4 id="toc602">Macro</h4>
 bindings =&gt; binding-form test<br />
<br />
When test is true, evaluates body with binding-form bound to the value of test<br />
<a name="when-not"></a><br />
<hr />
<h3 id="toc603">(<em>when-not</em> test &amp; body)</h3>
 <h4 id="toc604">Macro</h4>
 Evaluates test. If logical false, evaluates body in an implicit do.<br />
<a name="while"></a><br />
<hr />
<h3 id="toc605">(<em>while</em> test &amp; body)</h3>
 <h4 id="toc606">Macro</h4>
 Repeatedly executes body while test expression is true. Presumes some side-effect will cause test to become false/nil. Returns nil<br />
<a name="with-in-str"></a><br />
<hr />
<h3 id="toc607">(<em>with-in-str</em> s &amp; body)</h3>
 <h4 id="toc608">Macro</h4>
 Evaluates body in a context in which *in* is bound to a fresh StringReader initialized with the string s.<br />
<a name="with-local-vars"></a><br />
<hr />
<h3 id="toc609">(<em>with-local-vars</em> name-vals-vec &amp; body)</h3>
 <h4 id="toc610">Macro</h4>
 varbinding=&gt; symbol init-expr<br />
<br />
Executes the exprs in a context in which the symbols are bound to vars with per-thread bindings to the init-exprs. The symbols refer to the var objects themselves, and must be accessed with var-get and var-set<br />
<a name="with-meta"></a><br />
<hr />
<h3 id="toc611">(<em>with-meta</em> obj m)</h3>
 Returns an object of the same type and value as obj, with map m as its metadata.<br />
<a name="with-open"></a><br />
<hr />
<h3 id="toc612">(<em>with-open</em> bindings &amp; body)</h3>
 <h4 id="toc613">Macro</h4>
 bindings =&gt; [name init ...]<br />
<br />
Evaluates body in a try expression with names bound to the values of the inits, and a finally clause that calls (.close name) on each name in reverse order.<br />
<a name="with-out-str"></a><br />
<hr />
<h3 id="toc614">(<em>with-out-str</em> &amp; body)</h3>
 <h4 id="toc615">Macro</h4>
 Evaluates exprs in a context in which *out* is bound to a fresh StringWriter. Returns the string created by any nested printing calls.<br />
<a name="with-precision"></a><br />
<hr />
<h3 id="toc616">(<em>with-precision</em> precision &amp; exprs)</h3>
 <h4 id="toc617">Macro</h4>
 Sets the precision and rounding mode to be used for BigDecimal operations.<br />
<br />
Usage: (with-precision 10 (/ 1M 3)) or: (with-precision 10 :rounding HALF_DOWN (/ 1M 3))<br />
<br />
The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.<br />
<a name="xml-seq"></a><br />
<hr />
<h3 id="toc618">(<em>xml-seq</em> root)</h3>
 A tree seq on the xml elements as per xml/parse<br />
<a name="zero?"></a><br />
<hr />
<h3 id="toc619">(<em>zero?</em> x)</h3>
 Returns true if num is zero, else false<br />
<a name="zipmap"></a><br />
<hr />
<h3 id="toc620">(<em>zipmap</em> keys vals)</h3>
 Returns a map with the keys mapped to the corresponding vals.<br />
<h2 id="toc621">clojure.inspector</h2>
 <a name="inspect"></a><br />
<hr />
<h3 id="toc622">(<em>inspect</em> x)</h3>
 creates a graphical (Swing) inspector on the supplied object<br />
<a name="inspect-table"></a><br />
<hr />
<h3 id="toc623">(<em>inspect-table</em> data)</h3>
 creates a graphical (Swing) inspector on the supplied regular data, which must be a sequential data structure of data structures of equal length<br />
<a name="inspect-tree"></a><br />
<hr />
<h3 id="toc624">(<em>inspect-tree</em> data)</h3>
 creates a graphical (Swing) inspector on the supplied hierarchical data<br />
<h2 id="toc625">clojure.main</h2>
 <a name="load-script"></a><br />
<hr />
<h3 id="toc626">(<em>load-script</em> path)</h3>
 Loads Clojure source from a file or resource given its path. Paths beginning with @ or @/ are considered relative to classpath.<br />
<a name="main"></a><br />
<hr />
<h3 id="toc627">(<em>main</em> &amp; args)</h3>
 Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]<br />
<br />
With no options or args, runs an interactive Read-Eval-Print Loop<br />
<br />
init options: -i, --init path Load a file or resource -e, --eval string Evaluate expressions in string; print non-nil values<br />
<br />
main options: -r, --repl Run a repl path Run a script from from a file or resource - Run a script from standard input -h, -?, --help Print this help message and exit<br />
<br />
operation:<br />
<br />
- Establishes thread-local bindings for commonly set!-able vars - Enters the user namespace - Binds *command-line-args* to a seq of strings containing command line args that appear after any main option - Runs all init options in order - Runs a repl or script if requested<br />
<br />
The init options may be repeated and mixed freely, but must appear before any main option. The appearance of any eval option before running a repl suppresses the usual repl greeting message: &quot;Clojure ~(clojure-version)&quot;.<br />
<br />
Paths may be absolute or relative in the filesystem or relative to classpath. Classpath-relative paths have prefix of @ or @/<br />
<a name="repl"></a><br />
<hr />
<h3 id="toc628">(<em>repl</em> &amp; options)</h3>
 Generic, reusable, read-eval-print loop. By default, reads from *in*, writes to *out*, and prints exception summaries to *err*. If you use the default :read hook, *in* must either be an instance of LineNumberingPushbackReader or duplicate its behavior of both supporting .unread and collapsing CR, LF, and CRLF into a single \newline. Options are sequential keyword-value pairs. Available options and their defaults:<br />
<br />
- :init, function of no arguments, initialization hook called with bindings for set!-able vars in place. default: #()<br />
<br />
- :need-prompt, function of no arguments, called before each read-eval-print except the first, the user will be prompted if it returns true. default: (if (instance? LineNumberingPushbackReader *in*) #(.atLineStart *in*) #(identity true))<br />
<br />
- :prompt, function of no arguments, prompts for more input. default: repl-prompt<br />
<br />
- :flush, function of no arguments, flushes output default: flush<br />
<br />
- :read, function of two arguments, reads from *in*: - returns its first argument to request a fresh prompt - depending on need-prompt, this may cause the repl to prompt before reading again - returns its second argument to request an exit from the repl - else returns the next object read from the input stream default: repl-read<br />
<br />
- :eval, funtion of one argument, returns the evaluation of its argument default: eval<br />
<br />
- :print, function of one argument, prints its argument to the output default: prn<br />
<br />
- :caught, function of one argument, a throwable, called when read, eval, or print throws an exception or error default: repl-caught<br />
<a name="repl-caught"></a><br />
<hr />
<h3 id="toc629">(<em>repl-caught</em> e)</h3>
 Default :caught hook for repl<br />
<a name="repl-exception"></a><br />
<hr />
<h3 id="toc630">(<em>repl-exception</em> throwable)</h3>
 Returns CompilerExceptions in tact, but only the root cause of other throwables<br />
<a name="repl-prompt"></a><br />
<hr />
<h3 id="toc631">(<em>repl-prompt</em> )</h3>
 Default :prompt hook for repl<br />
<a name="repl-read"></a><br />
<hr />
<h3 id="toc632">(<em>repl-read</em> request-prompt request-exit)</h3>
 Default :read hook for repl. Reads from *in* which must either be an instance of LineNumberingPushbackReader or duplicate its behavior of both supporting .unread and collapsing all of CR, LF, and CRLF into a single \newline. repl-read: - skips whitespace, then - returns request-prompt on start of line, or - returns request-exit on end of stream, or - reads an object from the input stream, then - skips the next input character if it's end of line, then - returns the object.<br />
<a name="skip-if-eol"></a><br />
<hr />
<h3 id="toc633">(<em>skip-if-eol</em> s)</h3>
 If the next character on stream s is a newline, skips it, otherwise leaves the stream untouched. Returns :line-start, :stream-end, or :body to indicate the relative location of the next character on s. The stream must either be an instance of LineNumberingPushbackReader or duplicate its behavior of both supporting .unread and collapsing all of CR, LF, and CRLF to a single \newline.<br />
<a name="skip-whitespace"></a><br />
<hr />
<h3 id="toc634">(<em>skip-whitespace</em> s)</h3>
 Skips whitespace characters on stream s. Returns :line-start, :stream-end, or :body to indicate the relative location of the next character on s. Interprets comma as whitespace and semicolon as comment to end of line. Does not interpret #! as comment to end of line because only one character of lookahead is available. The stream must either be an instance of LineNumberingPushbackReader or duplicate its behavior of both supporting .unread and collapsing all of CR, LF, and CRLF to a single \newline.<br />
<a name="with-bindings"></a><br />
<hr />
<h3 id="toc635">(<em>with-bindings</em> &amp; body)</h3>
 <h4 id="toc636">Macro</h4>
 Executes body in the context of thread-local bindings for several vars that often need to be set!: *ns* *warn-on-reflection* *print-meta* *print-length* *print-level* *compile-path* *command-line-args* *1 *2 *3 *e<br />
<h2 id="toc637">clojure.parallel</h2>
 <a name="pany"></a><br />
<hr />
<h3 id="toc638">(<em>pany</em> coll)</h3>
 Returns some (random) element of the coll if it satisfies the bound/filter/map<br />
<a name="par"></a><br />
<hr />
<h3 id="toc639">(<em>par</em> coll)</h3>
 <h3 id="toc640">(<em>par</em> coll &amp; ops)</h3>
 Creates a parallel array from coll. ops, if supplied, perform on-the-fly filtering or transformations during parallel realization or calculation. ops form a chain, and bounds must precede filters, must precede maps. ops must be a set of keyword value pairs of the following forms:<br />
<br />
:bound [start end]<br />
<br />
Only elements from start (inclusive) to end (exclusive) will be processed when the array is realized.<br />
<br />
:filter pred<br />
<br />
Filter preds remove elements from processing when the array is realized. pred must be a function of one argument whose return will be processed via boolean.<br />
<br />
:filter-index pred2<br />
<br />
pred2 must be a function of two arguments, which will be an element of the collection and the corresponding index, whose return will be processed via boolean.<br />
<br />
:filter-with [pred2 coll2]<br />
<br />
pred2 must be a function of two arguments, which will be corresponding elements of the 2 collections.<br />
<br />
:map f<br />
<br />
Map fns will be used to transform elements when the array is realized. f must be a function of one argument.<br />
<br />
:map-index f2<br />
<br />
f2 must be a function of two arguments, which will be an element of the collection and the corresponding index.<br />
<br />
:map-with [f2 coll2]<br />
<br />
f2 must be a function of two arguments, which will be corresponding elements of the 2 collections.<br />
<a name="pdistinct"></a><br />
<hr />
<h3 id="toc641">(<em>pdistinct</em> coll)</h3>
 Returns a parallel array of the distinct elements of coll<br />
<a name="pfilter-dupes"></a><br />
<hr />
<h3 id="toc642">(<em>pfilter-dupes</em> coll)</h3>
 Returns a vector containing the (realized) elements of coll, without any consecutive duplicates<br />
<a name="pfilter-nils"></a><br />
<hr />
<h3 id="toc643">(<em>pfilter-nils</em> coll)</h3>
 Returns a vector containing the non-nil (realized) elements of coll<br />
<a name="pmax"></a><br />
<hr />
<h3 id="toc644">(<em>pmax</em> coll)</h3>
 <h3 id="toc645">(<em>pmax</em> coll comp)</h3>
 Returns the maximum element, presuming Comparable elements, unless a Comparator comp is supplied<br />
<a name="pmin"></a><br />
<hr />
<h3 id="toc646">(<em>pmin</em> coll)</h3>
 <h3 id="toc647">(<em>pmin</em> coll comp)</h3>
 Returns the minimum element, presuming Comparable elements, unless a Comparator comp is supplied<br />
<a name="preduce"></a><br />
<hr />
<h3 id="toc648">(<em>preduce</em> f base coll)</h3>
 Returns the reduction of the realized elements of coll using function f. Note f will not necessarily be called consecutively, and so must be commutative. Also note that (f base an-element) might be performed many times, i.e. base is not an initial value as with sequential reduce.<br />
<a name="psort"></a><br />
<hr />
<h3 id="toc649">(<em>psort</em> coll)</h3>
 <h3 id="toc650">(<em>psort</em> coll comp)</h3>
 Returns a new vector consisting of the realized items in coll, sorted, presuming Comparable elements, unless a Comparator comp is supplied<br />
<a name="psummary"></a><br />
<hr />
<h3 id="toc651">(<em>psummary</em> coll)</h3>
 <h3 id="toc652">(<em>psummary</em> coll comp)</h3>
 Returns a map of summary statistics (min. max, size, min-index, max-index, presuming Comparable elements, unless a Comparator comp is supplied<br />
<a name="pvec"></a><br />
<hr />
<h3 id="toc653">(<em>pvec</em> pa)</h3>
 Returns the realized contents of the parallel array pa as a Clojure vector<br />
<h2 id="toc654">clojure.set</h2>
 <a name="difference"></a><br />
<hr />
<h3 id="toc655">(<em>difference</em> s1)</h3>
 <h3 id="toc656">(<em>difference</em> s1 s2)</h3>
 <h3 id="toc657">(<em>difference</em> s1 s2 &amp; sets)</h3>
 Return a set that is the first set without elements of the remaining sets<br />
<a name="index"></a><br />
<hr />
<h3 id="toc658">(<em>index</em> xrel ks)</h3>
 Returns a map of the distinct values of ks in the xrel mapped to a set of the maps in xrel with the corresponding values of ks.<br />
<a name="intersection"></a><br />
<hr />
<h3 id="toc659">(<em>intersection</em> s1)</h3>
 <h3 id="toc660">(<em>intersection</em> s1 s2)</h3>
 <h3 id="toc661">(<em>intersection</em> s1 s2 &amp; sets)</h3>
 Return a set that is the intersection of the input sets<br />
<a name="join"></a><br />
<hr />
<h3 id="toc662">(<em>join</em> xrel yrel)</h3>
 <h3 id="toc663">(<em>join</em> xrel yrel km)</h3>
 When passed 2 rels, returns the rel corresponding to the natural join. When passed an additional keymap, joins on the corresponding keys.<br />
<a name="map-invert"></a><br />
<hr />
<h3 id="toc664">(<em>map-invert</em> m)</h3>
 Returns the map with the vals mapped to the keys.<br />
<a name="project"></a><br />
<hr />
<h3 id="toc665">(<em>project</em> xrel ks)</h3>
 Returns a rel of the elements of xrel with only the keys in ks<br />
<a name="rename"></a><br />
<hr />
<h3 id="toc666">(<em>rename</em> xrel kmap)</h3>
 Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap<br />
<a name="rename-keys"></a><br />
<hr />
<h3 id="toc667">(<em>rename-keys</em> map kmap)</h3>
 Returns the map with the keys in kmap renamed to the vals in kmap<br />
<a name="select"></a><br />
<hr />
<h3 id="toc668">(<em>select</em> pred xset)</h3>
 Returns a set of the elements for which pred is true<br />
<a name="union"></a><br />
<hr />
<h3 id="toc669">(<em>union</em> )</h3>
 <h3 id="toc670">(<em>union</em> s1)</h3>
 <h3 id="toc671">(<em>union</em> s1 s2)</h3>
 <h3 id="toc672">(<em>union</em> s1 s2 &amp; sets)</h3>
 Return a set that is the union of the input sets<br />
<h2 id="toc673">clojure.xml</h2>
 <a name="parse"></a><br />
<hr />
<h3 id="toc674">(<em>parse</em> s)</h3>
 <h3 id="toc675">(<em>parse</em> s startparse)</h3>
 Parses and loads the source s, which can be a File, InputStream or String naming a URI. Returns a tree of the xml/element struct-map, which has the keys :tag, :attrs, and :content. and accessor fns tag, attrs, and content. Other parsers can be supplied by passing startparse, a fn taking a source and a ContentHandler and returning a parser<br />
<h2 id="toc676">clojure.zip</h2>
 <a name="append-child"></a><br />
<hr />
<h3 id="toc677">(<em>append-child</em> loc item)</h3>
 Inserts the item as the rightmost child of the node at this loc, without moving<br />
<a name="branch?"></a><br />
<hr />
<h3 id="toc678">(<em>branch?</em> loc)</h3>
 Returns true if the node at loc is a branch<br />
<a name="children"></a><br />
<hr />
<h3 id="toc679">(<em>children</em> loc)</h3>
 Returns a seq of the children of node at loc, which must be a branch<br />
<a name="down"></a><br />
<hr />
<h3 id="toc680">(<em>down</em> loc)</h3>
 Returns the loc of the leftmost child of the node at this loc, or nil if no children<br />
<a name="edit"></a><br />
<hr />
<h3 id="toc681">(<em>edit</em> loc f &amp; args)</h3>
 Replaces the node at this loc with the value of (f node args)<br />
<a name="end?"></a><br />
<hr />
<h3 id="toc682">(<em>end?</em> loc)</h3>
 Returns true if loc represents the end of a depth-first walk<br />
<a name="insert-child"></a><br />
<hr />
<h3 id="toc683">(<em>insert-child</em> loc item)</h3>
 Inserts the item as the leftmost child of the node at this loc, without moving<br />
<a name="insert-left"></a><br />
<hr />
<h3 id="toc684">(<em>insert-left</em> loc item)</h3>
 Inserts the item as the left sibling of the node at this loc, without moving<br />
<a name="insert-right"></a><br />
<hr />
<h3 id="toc685">(<em>insert-right</em> loc item)</h3>
 Inserts the item as the right sibling of the node at this loc, without moving<br />
<a name="left"></a><br />
<hr />
<h3 id="toc686">(<em>left</em> loc)</h3>
 Returns the loc of the left sibling of the node at this loc, or nil<br />
<a name="leftmost"></a><br />
<hr />
<h3 id="toc687">(<em>leftmost</em> loc)</h3>
 Returns the loc of the leftmost sibling of the node at this loc, or self<br />
<a name="lefts"></a><br />
<hr />
<h3 id="toc688">(<em>lefts</em> loc)</h3>
 Returns a seq of the left siblings of this loc<br />
<a name="make-node"></a><br />
<hr />
<h3 id="toc689">(<em>make-node</em> loc node children)</h3>
 Returns a new branch node, given an existing node and new children. The loc is only used to supply the constructor.<br />
<a name="next"></a><br />
<hr />
<h3 id="toc690">(<em>next</em> loc)</h3>
 Moves to the next loc in the hierarchy, depth-first. When reaching the end, returns a distinguished loc detectable via end?. If already at the end, stays there.<br />
<a name="node"></a><br />
<hr />
<h3 id="toc691">(<em>node</em> loc)</h3>
 Returns the node at loc<br />
<a name="path"></a><br />
<hr />
<h3 id="toc692">(<em>path</em> loc)</h3>
 Returns a seq of nodes leading to this loc<br />
<a name="prev"></a><br />
<hr />
<h3 id="toc693">(<em>prev</em> loc)</h3>
 Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil.<br />
<a name="remove"></a><br />
<hr />
<h3 id="toc694">(<em>remove</em> loc)</h3>
 Removes the node at loc, returning the loc that would have preceded it in a depth-first walk.<br />
<a name="replace"></a><br />
<hr />
<h3 id="toc695">(<em>replace</em> loc node)</h3>
 Replaces the node at this loc, without moving<br />
<a name="right"></a><br />
<hr />
<h3 id="toc696">(<em>right</em> loc)</h3>
 Returns the loc of the right sibling of the node at this loc, or nil<br />
<a name="rightmost"></a><br />
<hr />
<h3 id="toc697">(<em>rightmost</em> loc)</h3>
 Returns the loc of the rightmost sibling of the node at this loc, or self<br />
<a name="rights"></a><br />
<hr />
<h3 id="toc698">(<em>rights</em> loc)</h3>
 Returns a seq of the right siblings of this loc<br />
<a name="root"></a><br />
<hr />
<h3 id="toc699">(<em>root</em> loc)</h3>
 zips all the way up and returns the root node, reflecting any changes.<br />
<a name="seq-zip"></a><br />
<hr />
<h3 id="toc700">(<em>seq-zip</em> root)</h3>
 Returns a zipper for nested sequences, given a root sequence<br />
<a name="up"></a><br />
<hr />
<h3 id="toc701">(<em>up</em> loc)</h3>
 Returns the loc of the parent of the node at this loc, or nil if at the top<br />
<a name="vector-zip"></a><br />
<hr />
<h3 id="toc702">(<em>vector-zip</em> root)</h3>
 Returns a zipper for nested vectors, given a root vector<br />
<a name="xml-zip"></a><br />
<hr />
<h3 id="toc703">(<em>xml-zip</em> root)</h3>
 Returns a zipper for xml elements (as from xml/parse), given a root element<br />
<a name="zipper"></a><br />
<hr />
<h3 id="toc704">(<em>zipper</em> branch? children make-node root)</h3>
 Creates a new zipper structure.<br />
<br />
branch? is a fn that, given a node, returns true if can have children, even if it currently doesn't.<br />
<br />
children is a fn that, given a branch node, returns a seq of its children.<br />
<br />
make-node is a fn that, given an existing node and a seq of children, returns a new branch node with the supplied children. root is the root node.
  <!-- google_ad_section_end -->
  </div>





<div id="previewBox" style="display: none;" class="wiki"></div>
<div id="editor_wrap">
<form action="/page/edit/api?goto=" method="post" name="rte" class="editor" style="padding: 0; margin: 0; border:0; display:inline;">

<div id="editor" style="width: 99%; min-width: 99%;">
<iframe id="WikispacesEditorContent" name="WikispacesEditorContent" width="100%" height="0px" frameborder="0" src="/s/blank.html" scrolling="no"></iframe>
<input type="hidden" id="hdnWikispacesEditorContent" name="WikispacesEditorContent" value="" style="position: absolute;left:-1000px;top:-1000px;"/>
</div>
<div id="WikispacesEditorContentHidden" style="display: none;"></div>

<!-- Merging variables -->
<div id="mergeStatus" style="display:none;">none</div>
<div id="mergeResult" style="display:none;"></div>
<div id="mergeDiff" style="display:none;"></div>

<!-- inputs have to come after divs, even though they are hidden, otherwise IE puts extra spaces -->
<input type="hidden" name="changeDetected"/>
<input type="hidden" name="version" value="71224307"/>
<input type="hidden" name="mode" value="visual" />


<p id="changeMessageInputLabel"><i>Optional:</i> a note about this edit for the page history log</p>
<input type="text" name="comment" value="" size="100" class="WikispacesEditorInput" />


<div style="display:none;" id="hierarchy"> </div>

<!-- bottom toolbar -->
<table style="float: right; padding: 8px 0 4px 0;"><tr><td>
  <span id="autosaveStatus">&nbsp;</span>
  <input type="button" id="saveDraftButton" value="Save Draft"/>
  <input type="submit" id="switch_to" name="switch_to"/> 
  <input type="button" name="preview" value="Preview"/>
  <input type="submit" name="update" value="Save" style="font-weight: bold;"/> 
  <a id="cancel" href="#">Cancel</a>
</td></tr></table>

</form>

</div>




</div></div></div>							<div id="showTags" style="display: none;">
					<div class="WikiTags"></div>				</div>
				<script type="text/javascript">
				<!--
				if (wikispaces_object == 'page' && wikispaces_method == 'view') {
					document.getElementById('showTags').style.display = 'block';
				}
				// -->
			</script>
					</div>
		<div id="foot">
			<div style="text-align: center;">Copyright 2008-2009 Rich Hickey</div>
					</div>
	</div>
<!-- /rightcolumn -->
<div id="DesignedBy">Logo &amp; site design by <a href="http://www.tomhickey.com" title="Visit Tom Hickey's website.">Tom Hickey</a>.</div>
</div>
<!-- /AllContentContainer -->

<div id="WikispacesHelp" class="jqmWindow">
  <div id="WikispacesHelpControls">
    <span id="WikispacesHelpBreadcrumbs">
      <span id="WikispacesHelpBreadcrumbHome" class="WikispacesHelpBreadcrumb WikispacesHelpBreadcrumbCurrent">
        <a href="#" onclick="return gotoBreadcrumb(0);">Home</a>
      </span>
      <span id="WikispacesHelpBreadcrumbsEllipsis" style="display: none;">
        &gt; ...
      </span>
      <img id="WikispacesHelpBreadcrumbSpinner" src="http://c2.wikicdn.com/i/spinner.gif" width="18" height="18" alt="please wait" style="display: none;"/>
    </span>
    <div class="WikispacesHelpClose">
      <a href="#" onclick="jQuery('#WikispacesHelp').jqm().jqmHide(); return false;">
        <img src="http://c1.wikicdn.com/i/close.gif" width="14" height="14" alt="close" />
      </a>
    </div>
  </div>
  <div id="WikispacesHelpContent" class="wiki">Loading...</div>

  <div id="WikispacesGettingStartedControls">
    <span id="WikispacesGettingStartedBreadcrumbs">
      <span id="WikispacesGettingStartedBreadcrumbHome" class="WikispacesHelpBreadcrumb WikispacesHelpBreadcrumbCurrent">
        <a href="#" onclick="return showGettingStartedHome();">Home</a>
      </span>
      <span id="WikispacesGettingStartedCategory"></span>
    </span>

    <a href="http://www.wikispaces.com/site/gettingstarted/off" style="position: absolute; right: 50px;">Skip Getting Started</a>

    <div class="WikispacesHelpClose">
      <a href="#" onclick="jQuery('#WikispacesHelp').jqm().jqmHide(); return false;">
        <img src="http://c1.wikicdn.com/i/close.gif" width="14" height="14" alt="close" />
      </a>
    </div>
  </div>
  <div id="WikispacesGettingStartedContent">Loading...</div>
</div>
<script src="http://c1.wikicdn.com/_/2009043000/s/gz/prototype.min.js" type="text/javascript"></script>
<script src="http://c2.wikicdn.com/_/2009043000/s/gz/editor.min.js" type="text/javascript"></script>
<script src="http://www.wikispaces.com/site/editorlibs/en_US/2009043000.gz.js" type="text/javascript"></script>

<!-- w10 234 -->

</body>
</html>