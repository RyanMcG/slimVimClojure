*slimv.txt*                    Slimv                 Last Change: 26 Mar 2008

Slimv                                                                  *slimv*
                               Version 0.1

The Superior Lisp Interaction Mode for Vim.
This plugin is aimed to help Lisp development by interfacing between VIM and
the Lisp REPL, similarly to Emacs/SLIME.

|slimv-installation|         Installation
|slimv-customization|        Customization
|slimv-usage|                Usage
|slimv-functions|            Function Reference
|slimv-faq|                  Frequently Asked Questions
|slimv-changelog|            Change Log
|slimv-issues|               Known Issues
|slimv-todo|                 Todo
|slimv-credits|              Credits

For Vim version 7.0 and above.
This plugin is only available if 'compatible' is not set.

{Vi does not have any of this}

==============================================================================
INSTALLATION                                              *slimv-installation*

To install:
  - Download the slimv.zip.
  - Extract the zip archive into your vimfiles or runtime directory.
    See VIM help file |usr_05.txt| for details on adding a plugin.
    The archive contains plugin/slimv.vim, plugin/slimv.py and doc/slimv.txt.
  - Start Vim or goto an existing instance of Vim.
  - Execute the following command:
>
      :helptag <your runtime directory/doc
<
    This will generate all the help tags for any file located in the doc
    directory.
  - Enter path definitions into your vimrc (if the default values are not
    valid for your VIM/Python/Lisp installation, which is highly probable).
    See |slimv-customization| below on how to do this.

===============================================================================
CUSTOMIZATION                                             *slimv-customization*

|slimv-options|              Options
|slimv-templates|            Templates
|slimv-keyboard|             Keyboard mappings
- directories (with or without a shell frontend)
- options
- keyboard mappings and issues
- templates

-------------------------------------------------------------------------------
                                                                *slimv_options*
Slimv tries to autodetect the Python and Lisp installation directories,
however the algorzthm is not very sophisticated.
If the installation directories are put in the path, then the autodetection
should find them (this is usually the case on Linux). Otherwise (on Windows)
some frequently used directories are searched under C:\ and C:\Program Files.
For a minimum, Slimv needs to know the path of the existing Python and Lisp
installation, so if autodetection does not work for you, then set the following
global variables in your vimrc:

                                                               *g:slimv_python*
This is the installation path of the Python interpreter.
Example:
    let g:slimv_python = 'C:/MyPythonDir/python.exe'

                                                                 *g:slimv_lisp*
This is the installation path of the Lisp interpreter.
Example:
    let g:slimv_lisp = 'C:/MyLispDir/mylisp.exe'

                                                                 *g:slimv_port*
The default port used by Slimv is 5151. If this port is used by another
program then set this variable to a free port number.
Example:
    let g:slimv_port = 10101

                                                               *g:slimv_client*
You may want to use a shell frontend other then the default one or put
additional command line parameters for starting the server.
In this case you can omit the variables above and use g:slimv_client instead.
This is the complete command that is used to start the client. If not set
by the user, this is automatically built from the variables above.

The command format is the following:
    <python> <slimv> -p <port> -r <server_cmd> -c <form_to_REPL>
Where:
    <python>       is the command to start the Python interpreter
    <slimv>        is the path of Slimv.py
    <port>         is the port number to use (if other than default)
    <server_cmd>   is the command to start the server
    <form_to_REPL> is the Lisp form to be sent to the REPL

The format of <server_cmd> is the following:
    <python> <slimv> -l <lisp> -s
Where:
    <python>       is the command to start the Python interpreter
    <slimv>        is the path of Slimv.py
    <lisp>         is the command to start the Lisp REPL
You can also pass the following shortcuts in <server_cmd>:
    @p             equals <python>
    @s             equals <slimv>
    @l             equals <lisp>
    @@             use it if you need to insert an @ character
    \"             use it to insert a " character

The reason behind the duplication of the <python> and <slimv> part is that
you may want to start the server/REPL in a shell frontend that needs
special command line options. For example on Windows I highly recommend
to use Console (http://sourceforge.net/projects/console/) which is greatly
configurable and you also get usable select/copy/paste functions.

Example to start the Slimv server via Console:
  let g:slimv_client = 
  \ 'python slimv.py -p 5152 -r "console -r \"/k @p @s -l clisp -s\"" -c '


-------------------------------------------------------------------------------
                                                              *slimv_templates*
Many Slimv commands are performed by creating a special Lisp form from the
selected symbol (or form) and send it to the REPL for execution.
Slimv defines various templates to build these special Lisp forms.
You can override them to suit your needs. Use %1 for substituting the selected
symbol's name or the selected form.
Here follows a list of the templates defined in Slimv.

                                                      *g:slimv_template_pprint*
Lisp form built when issuing the 'pprint' command.
Example:
    let g:slimv_template_pprint = '(dolist (o %1)(pprint o))'

                                                    *g:slimv_template_undefine*
Lisp form built when issuing the 'undefine' command.
Example:
    let g:slimv_template_undefine = '(fmakunbound (read-from-string "%1"))'

                                                    *g:slimv_template_describe*
Lisp form built when issuing the 'describe' command.
Example:
    let g:slimv_template_describe = '(describe (read-from-string "%1"))'

                                                       *g:slimv_template_trace*
Lisp form built when issuing the 'trace' command.
Example:
    let g:slimv_template_trace = "(trace %1)"

                                                     *g:slimv_template_untrace*
Lisp form built when issuing the 'untrace' command.
Example:
    let g:slimv_template_untrace = "(untrace %1)"

                                                     *g:slimv_template_profile*
Lisp form built when issuing the 'profile' command.
Example:
    let g:slimv_template_profile = "(mon:monitor %1)"

                                                   *g:slimv_template_unprofile*
Lisp form built when issuing the 'unprofile' command.
Example:
    let g:slimv_template_unprofile = "(mon:unmonitor %1)"

                                                 *g:slimv_template_disassemble*
Lisp form built when issuing the 'disassemble' command.
Example:
    let g:slimv_template_disassemble = "(disassemble #'%1)"

                                                     *g:slimv_template_apropos*
Lisp form built when issuing the 'apropos' command.
Example:
    let g:slimv_template_apropos = '(apropos "%1")'

                                                 *g:slimv_template_macroexpand*
Lisp form built when issuing the 'macroexpand-1' command.
Example:
    let g:slimv_template_macroexpand = '(pprint %1)'

                                             *g:slimv_template_macroexpand_all*
Lisp form built when issuing the 'macroexpand-all' command.
Example:
    let g:slimv_template_macroexpand_all = '(pprint %1)'

                                                *g:slimv_template_compile_file*
Lisp form built when issuing the 'compile-file' command.
Example:
    let g:slimv_template_compile_file = '(compile-file "%1")'


-------------------------------------------------------------------------------

                                                     *g:bufExplorerDefaultHelp*
To control whether the default help is displayed or not, use: >
  let g:bufExplorerDefaultHelp=0       " Do not show default help.
  let g:bufExplorerDefaultHelp=1       " Show default help.
The default is to show the default help.

                                                *g:bufExplorerShowRelativePath*
To control whether to show absolute paths or relative to the current
directory, use: >
  let g:bufExplorerShowRelativePath=0  " Show absolute paths.
  let g:bufExplorerShowRelativePath=1  " Show relative paths.
The default is to show absolute paths.

                                                          *g:bufExplorerSortBy*
To control what field the buffers are sorted by, use: >
  let g:bufExplorerSortBy='extension'  " Sort by file extension.
  let g:bufExplorerSortBy='fullpath'   " Sort by full file path name.
  let g:bufExplorerSortBy='mru'        " Sort by most recently used.
  let g:bufExplorerSortBy='name'       " Sort by the buffer's name.
  let g:bufExplorerSortBy='number'     " Sort by the buffer's number.
The default is to sort by mru.

                                                *g:bufExplorerSplitOutPathName*
To control whether to split out the path and file name or not, use: >
  let g:bufExplorerSplitOutPathName=1  " Split the path and file name.
  let g:bufExplorerSplitOutPathName=0  " Don't split the path and file
                                       " name.
The default is to split the path and file name.

==============================================================================
USAGE                                                            *slimv-usage*

To start exploring in the current window, use: >

 \be   OR  :BufExplorer

If you would like to use something other than '\', you may simply change the
leader (see |mapleader|).

Note: If the current buffer is modified when bufexplorer started, the current
      window is always split and the new bufexplorer is displayed in that new
      window.

Commands to use once exploring:

 <enter>       Opens the buffer that is under the cursor into the current
               window.
 <F1>          Toggle help information.
 <leftmouse>   Opens the buffer that is under the cursor into the current
               window.
 <shift-enter> Opens the buffer that is under the cursor in another tab.
 d             |:wipeout| the buffer under the cursor from the list.
               When a buffers is wiped, it will not be shown when unlisted
               buffer are displayed.
 D             |:delete| the buffer under the cursor from the list.
               The buffer's 'buflisted' is cleared. This allows for the buffer
               to be displayed again using the 'show unlisted' command.
 f             Toggles whether you are taken to the active window when
               selecting a buffer or not.
 p             Toggles the showing of a split filename/pathname.
 q             Quit exploring.
 r             Reverses the order the buffers are listed in.
 R             Toggles relative path/absolute path.
 s             Selects the order the buffers are listed in. Either by buffer
               number, file name, file extension, most recently used (MRU), or
               full path.
 t             Opens the buffer that is under the cursor in another tab.
 u             Toggles the showing of "unlisted" buffers.

Once invoked, Buffer Explorer displays a sorted list (MRU is the default
sort method) of all the buffers that are currently opened. You are then
able to move the cursor to the line containing the buffer's name you are
wanting to act upon. Once you have selected the buffer you would like,
you can then either open it, close it(delete), resort the list, reverse
the sort, quit exploring and so on...

===============================================================================
FAQ                                                                 *slimv-faq*

- Q: Why is this plugin called 'Slimv'?
- A: Because it is trying to mimic the popular Emacs extension 'SLIME'.
     In SLIME 'E' stands for 'Emacs', so here it is replaced with 'V' as Vim.
     To tell the truth, first I gave the name 'Slimvim' to the plugin but
     then I found an (already abandoned) project called 'Slim-Vim' and I did
     not want to give such a similar name.

- Q: Why another 'Superior Lisp Mode' if there is already one?
- A: Because many programmers prefer VIM as a program text editor over Emacs,
     including me. I don't want to start a holy war or whatever, I'm just
     happy if someone else finds this plugin useful.

- Q: How does Slimv work?
- A: Slimv consists of three parts: VIM plugin, client and server.
     The Slimv server is a swank server that embeds a Lisp REPL.
     The Slimv client interfaces with the server and is responsible
     for sending Lisp commands to the Lisp REPL.
     The VIM plugin is translating editor commands to Lisp commands to be
     sent to the server by the client.
     So the dataflow is like this:
     VIM -> VIM plugin -> Slimv client -> Slimv server -> Lisp REPL
     The plugin resides in 'slimv.vim', the client and the server both
     reside in 'slimv.py'.

- Q: Why is SLIME functionality XYZ missing from Slimv?
- A: There are two possible reasons:
     1. The dataflow of Slimv is one-directional: from client to server.
        There is no data sent back from the server to the client, so if a
        functionality requires that Slimv reads data from REPL, then
        currently it is not possible to implement it.
     2. It is possible to implement it, but I did not (yet) do it.
        Maybe future releases will contain it.

- Q: Why is the default port number 5151?
- A: Hint: what roman numerals are 5,1,5,1? Bingo: VI, doubled.

- Q: Are you a Lisp expert?
- A: No, not at all. I'm just learning Lisp. Also just learning VIM
     scripting. And I'm not a Python expert either, however (at the moment)
     I have more experience with Python than with Lisp.

- Q: Why using Python for the client/server code? Why not Lisp?
- A: This is for historical reasons and may change in the future.
     Preliminary versions used VIM's built-in Python support.
     Later on the client/server code was separated from VIM but still remained
     written in Python. On Linux this should not be a problem, most Linux
     distributions contain a Python interpreter with high enough version.
     On Windows this means, you need to install Python, if you don't have
     one (at least version 2.4). Anyway, Python is a nice language and
     also a perfect replacement for calculator.exe :-)

===============================================================================
CHANGE LOG                                                    *slimv-changelog*

0.1    - Initial release. Will it ever go higher?

===============================================================================
KNOWN ISSUES                                                     *slimv-issues*

- Needs VIM version 7.0 or above, because of the intensive use of lists.
- VIM register 's' is used for all form selections, so its original content is
  destroyed.
- (un)profile does not work
- Needs Python 2.4 or higher (uses the subprocess module)
- Works only via the Python interpreter, does not work using a Python IDE
  (like IDLE).

===============================================================================
TODO                                                               *slimv-todo*

- Rewrite client/server in Lisp, so that no Python would be needed.
- Add profile functions
- Use a Vim buffer for the REPL. This does not look possible with the current
  state of Vim, or at least I can not see an easy way to do it.

===============================================================================
CREDITS                                                         *slimv-credits*

Author: Tamas Kovacs <kovisoft at gmail dot com>

Credit must go out to Bram Moolenaar and all the Vim developers for
making the world's (one of the) best editor. I also want to thank everyone who
helped and gave me suggestions. I wouldn't want to leave anyone out so I
won't list names.

===============================================================================
vim:tw=78:noet:wrap:ts=8:ft=help:norl:
