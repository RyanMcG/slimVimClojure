*slimvim.txt*                  Slimvim               Last Change: 14 Mar 2008

Slimvim                                                              *slimvim*
                               Version 0.1

Plugin for easily exploring (or browsing) Vim |:buffers|.

|slimvim-installation|       Installation
|slimvim-customization|      Customization
|slimvim-usage|              Usage
|slimvim-functions|          Function Reference
|slimvim-faq|                Frequently Asked Questions
|slimvim-changelog|          Change Log
|slimvim-issues|             Known Issues
|slimvim-todo|               Todo
|slimvim-credits|            Credits

For Vim version 7.0 and above.
This plugin is only available if 'compatible' is not set.

{Vi does not have any of this}

==============================================================================
INSTALLATION                                            *slimvim-installation*

To install:
  - Download the slimvim.zip.
  - Extract the zip archive into your vimfiles or runtime directory.
    See VIM help file |usr_05.txt| for details on adding a plugin.
    The archive contains plugin/slimvim.vim, plugin/slimvim.py,
    and doc/slimvim.txt.
  - Start Vim or goto an existing instance of Vim.
  - Execute the following command:
>
      :helptag <your runtime directory/doc
<
    This will generate all the help tags for any file located in the doc
    directory.
  - Enter path definitions into your vimrc (if the default values are not
    valid for your VIM/Python/Lisp installation, which is highly probable).
    See |slimvim-customization| below on how to do this.

===============================================================================
CUSTOMIZATION                                           *slimvim-customization*

For a minimum, Slimvim needs to know the path of the existing Python and Lisp
installation.

- directories (with or without a shell frontend)
- options
- keyboard mappings and issues
- templates

                                                     *g:bufExplorerDefaultHelp*
To control whether the default help is displayed or not, use: >
  let g:bufExplorerDefaultHelp=0       " Do not show default help.
  let g:bufExplorerDefaultHelp=1       " Show default help.
The default is to show the default help.

                                                    *g:bufExplorerDetailedHelp*
To control whether detailed help is display by, use: >
  let g:bufExplorerDetailedHelp=0      " Do not show detailed help.
  let g:bufExplorerDetailedHelp=1      " Show detailed help.
The default is NOT to show detailed help.

                                                      *g:bufExplorerFindActive*
To control whether you are taken to the active window when selecting a buffer,
use: >
  let g:bufExplorerFindActive=0        " Do not go to active window.
  let g:bufExplorerFindActive=1        " Go to active window.
The default is to be taken to the active window.

                                                     *g:bufExplorerReverseSort*
To control whether to sort the buffer in reverse order or not, use: >
  let g:bufExplorerReverseSort=0       " Do not sort in reverse order.
  let g:bufExplorerReverseSort=1       " Sort in reverse order.
The default is NOT to sort in reverse order.

                                                 *g:bufExplorerShowDirectories*
Directories usually show up in the list from using a command like ":e .".
To control whether to show directories in the buffer list or not, use: >
  let g:bufExplorerShowDirectories=1   " Show directories.
  let g:bufExplorerShowDirectories=0   " Don't show directories.
The default is to show directories.

                                                *g:bufExplorerShowRelativePath*
To control whether to show absolute paths or relative to the current
directory, use: >
  let g:bufExplorerShowRelativePath=0  " Show absolute paths.
  let g:bufExplorerShowRelativePath=1  " Show relative paths.
The default is to show absolute paths.

                                                    *g:bufExplorerShowUnlisted*
To control whether to show unlisted buffer or not, use: >
  let g:bufExplorerShowUnlisted=0      " Do not show unlisted buffers.
  let g:bufExplorerShowUnlisted=1      " Show unlisted buffers.
The default is to NOT show unlisted buffers.

                                                          *g:bufExplorerSortBy*
To control what field the buffers are sorted by, use: >
  let g:bufExplorerSortBy='extension'  " Sort by file extension.
  let g:bufExplorerSortBy='fullpath'   " Sort by full file path name.
  let g:bufExplorerSortBy='mru'        " Sort by most recently used.
  let g:bufExplorerSortBy='name'       " Sort by the buffer's name.
  let g:bufExplorerSortBy='number'     " Sort by the buffer's number.
The default is to sort by mru.

                                                *g:bufExplorerSplitOutPathName*
To control whether to split out the path and file name or not, use: >
  let g:bufExplorerSplitOutPathName=1  " Split the path and file name.
  let g:bufExplorerSplitOutPathName=0  " Don't split the path and file
                                       " name.
The default is to split the path and file name.

==============================================================================
USAGE                                                          *slimvim-usage*

To start exploring in the current window, use: >

 \be   OR  :BufExplorer

If you would like to use something other than '\', you may simply change the
leader (see |mapleader|).

Note: If the current buffer is modified when bufexplorer started, the current
      window is always split and the new bufexplorer is displayed in that new
      window.

Commands to use once exploring:

 <enter>       Opens the buffer that is under the cursor into the current
               window.
 <F1>          Toggle help information.
 <leftmouse>   Opens the buffer that is under the cursor into the current
               window.
 <shift-enter> Opens the buffer that is under the cursor in another tab.
 d             |:wipeout| the buffer under the cursor from the list.
               When a buffers is wiped, it will not be shown when unlisted
               buffer are displayed.
 D             |:delete| the buffer under the cursor from the list.
               The buffer's 'buflisted' is cleared. This allows for the buffer
               to be displayed again using the 'show unlisted' command.
 f             Toggles whether you are taken to the active window when
               selecting a buffer or not.
 p             Toggles the showing of a split filename/pathname.
 q             Quit exploring.
 r             Reverses the order the buffers are listed in.
 R             Toggles relative path/absolute path.
 s             Selects the order the buffers are listed in. Either by buffer
               number, file name, file extension, most recently used (MRU), or
               full path.
 t             Opens the buffer that is under the cursor in another tab.
 u             Toggles the showing of "unlisted" buffers.

Once invoked, Buffer Explorer displays a sorted list (MRU is the default
sort method) of all the buffers that are currently opened. You are then
able to move the cursor to the line containing the buffer's name you are
wanting to act upon. Once you have selected the buffer you would like,
you can then either open it, close it(delete), resort the list, reverse
the sort, quit exploring and so on...

===============================================================================
FAQ                                                               *slimvim-faq*

- Q: Why is this plugin called 'Slimvim'?
- A: Because it is trying to mimic the popular Emacs extension 'SLIME'.
     In SLIME 'E' stands for 'Emacs', so here it is replaced with 'vim'.

- Q: Why another 'Superior Lisp Mode' if there is already one?
- A: Because many programmers prefer VIM as a program text editor over Emacs,
     including me. I don't want to start a holy war or whatever, I'm just
     happy if someone else finds this plugin useful.

- Q: How does Slimvim work?
- A: Slimvim consists of three parts: VIM plugin, client and server.
     The Slimvim server is a swank server that embeds a Lisp REPL.
     The Slimvim client interfaces with the server and is responsible
     for sending Lisp commands to the Lisp REPL.
     The VIM plugin is translating editor commands to Lisp commands to be
     sent to the server by the client.
     So the dataflow is like this:
     VIM -> VIM plugin -> Slimvim client -> Slimvim server -> Lisp REPL
     The plugin resides in 'slimvim.vim', the client and the server both
     reside in 'slimvim.py'.

- Q: Why is SLIME functionality XYZ missing from Slimvim?
- A: There are two possible reasons:
     1. The dataflow of Slimvim is one-directional: from client to server.
        There is no data sent back from the server to the client, so if a
        functionality requires that Slimvim reads data from REPL, then
        currently it is not possible to implement it.
     2. It is possible to implement it, but I did not (yet) do it.
        Maybe future releases will contain it.

- Q: Why is the default port number 5151?
- A: Hint: what roman numerals are 5,1,5,1? Bingo: VI, doubled.

- Q: Are you a Lisp expert?
- A: No, not at all. I'm just learning Lisp. Also just learning VIM
     scripting. And I'm not a Python expert either, however (at the moment)
     I have more experience with Python than with Lisp.

- Q: Why using Python for the client/server code? Why not Lisp?
- A: This is for historical reasons and may change in the future.
     Preliminary versions used VIM's built-in Python support.
     Later on the client/server code was separated from VIM but still remained
     written in Python. On Linux this should not be a problem, most Linux
     distributions contain a Python interpreter with high enough version.
     On Windows this means, you need to install Python, if you don't have
     one (at least version 2.4). Anyway, Python is a nice language and
     also a perfect replacement for calculator.exe :-)

===============================================================================
CHANGE LOG                                                  *slimvim-changelog*

0.1    - Initial release. Will it ever go higher?

===============================================================================
ISSUES                                                         *slimvim-issues*

- Needs VIM version 7.0 or above, because of the intensive use of lists.
- VIM register 's' is used for all form selections, so its original content is
  destroyed.
- (un)profile does not work
- Needs Python 2.4 or higher (needs the subprocess module)
- Works only via the Python interpreter, does not work using a Python IDE
  (like IDLE).

===============================================================================
TODO                                                             *slimvim-todo*

- Rewrite client/server in Lisp, so that no Python would be needed.
- Add profile functions
- Look into adding '\bs' (buffer split) command back into the code.
- Use a VIM buffer for the REPL. This does not look possible with the current
  state of VIM, or at least I can not see an easy way to do it.

===============================================================================
CREDITS                                                       *slimvim-credits*

Author: Tamas Kovacs <kovisoft at gmail dot com>

Credit must go out to Bram Moolenaar and all the Vim developers for
making the world's (one of the) best editor. I also want to thank everyone who
helped and gave me suggestions. I wouldn't want to leave anyone out so I
won't list names.

===============================================================================
vim:tw=78:noet:wrap:ts=8:ft=help:norl:
