*slimv.txt*                    Slimv                 Last Change: 02 Mar 2009

Slimv                                                                  *slimv*
                               Version 0.2.1

The Superior Lisp Interaction Mode for Vim.
This plugin is aimed to help Lisp development by interfacing between Vim and
the Lisp REPL, similarly to Emacs/SLIME.

|slimv-installation|         Installation
|slimv-customization|        Customization
|slimv-usage|                Usage
|slimv-repl|                 Lisp REPL inside Vim
|slimv-clojure|              Clojure support
|slimv-faq|                  Frequently Asked Questions
|slimv-changelog|            Change Log
|slimv-issues|               Known Issues
|slimv-todo|                 Todo
|slimv-credits|              Credits

For Vim version 7.0 and above.
This plugin is only available if 'compatible' is not set.

{Vi does not have any of this}

===============================================================================
INSTALLATION                                               *slimv-installation*

Prerequisites:
  - Lisp (any Common Lisp implementation should be OK) installed.
  - Python 2.4 or later installed.
  - The interrupt functionality needs the pywin32 extension on Windows.

To install the script:
  - Download the slimv.zip.
  - Extract the zip archive into your vimfiles or runtime directory.
    See Vim help file |usr_05.txt| for details on adding a plugin.
    The archive contains plugin/slimv.vim, plugin/slimv.py and doc/slimv.txt.
  - Start Vim or goto an existing instance of Vim.
  - Execute the following command:
>
      :helptag <your runtime directory/doc
<
    This will generate all the help tags for any file located in the doc
    directory.
  - Enter path definitions into your vimrc (if the default values are not
    valid for your Vim/Python/Lisp installation, which is highly probable).
    See |slimv-customization| below on how to do this.

Upgrade from previous script versions:
  No special upgrade actions are required.

===============================================================================
CUSTOMIZATION                                             *slimv-customization*

|slimv-options|              Options
|slimv-templates|            Templates
|slimv-keyboard|             Keyboard mappings

-------------------------------------------------------------------------------
                                                                *slimv_options*

The list below contains an alphabetical collection of Slimv options.
Below that list follows the detailed explanation on each option.

|g:slimv_client|             The whole OS command to start the Slimv client.
                             Used for advanced customization, like changing
                             the terminal emulator to use for the Lisp REPL.

|g:slimv_debug|              Debug log level. Set zero for no debug messages.

|g:slimv_debug_client|       Display the command to start client.

|g:slimv_filetype|           Filetype for Slimv. Not necessarily the same as
                             the Vim filetype.

|g:slimv_keybindings|        Predefined Slimv keybindings. Possible values:
                             1 = set #1, 2 = set #2, other = no keybindings

|g:slimv_lisp|               Path for the Lisp interpreter.

|g:slimv_logfile|            Name of the logfile to use for debug messages.
                             Also see |g:slimv_debug|.

|g:slimv_menu|               If nonzero, Slimv menu is added to the Vim menu

|g:slimv_port|               TCP/IP port number to use in the Slimv client-
                             server communication.

|g:slimv_python|             Path for the Python interpreter.

|g:slimv_repl_dir|           Directory path for the Lisp REPL buffer file.

|g:slimv_repl_file|          Filename without path for the REPL buffer file.

|g:slimv_repl_open|          If nonzero, Slimv opens the Lisp REPL buffer
                             inside Vim when the server is started.

|g:slimv_repl_split|         Open the Lisp REPL buffer in a split window
                             or in a separate buffer.

|g:slimv_repl_wait|          Number of seconds to wait for the REPL output
                             to finish. Zero means inifinity.


Note: Most options require to restart the Vim session when modified.

Slimv tries to autodetect the Python and Lisp installation directories,
however the algorithm is not very sophisticated.
If the installation directories are put in the path, then the autodetection
should find them (this is usually the case on Linux). Otherwise (on Windows)
some frequently used directories are searched under C:\ and C:\Program Files.
For a minimum, Slimv needs to know the path of the existing Python and Lisp
installations, so if autodetection does not work for you, then set the
following global variables in your vimrc.

Note: On Windows use the / (slash) character instead of \ (backslash) as the
      directory separator to avoid any incidental character escaping problems
      while the paths are beeing passed between the Slimv processes.
      On Linux this is not an issue.

                                                               *g:slimv_python*
This is the installation path of the Python interpreter.
Example:
    let g:slimv_python = 'C:/MyPythonDir/python.exe'

                                                                 *g:slimv_lisp*
This is the installation path of the Lisp interpreter.
Example:
    let g:slimv_lisp = 'C:/MyLispDir/mylisp.exe'

                                                             *g:slimv_filetype*
Defines the filetype for Slimv. This is not necessarily the same as the Vim
filetype. It is possible that one is using the 'lisp' Vim filetype for Clojure
or Scheme files for syntax and indenting, but in Slimv the Lisp dialect should
be explicitly set to the language used.
Possible values are: 'lisp' or 'clojure'.
When 'clojure' is used, |g:slimv_lisp| also needs to be defined to the command
that starts the Clojure REPL.
See |g:slimv-clojure| for details.

                                                                 *g:slimv_port*
The default port used by Slimv is 5151. If this port is used by another
program then set this variable to a free port number.
It is also possible to run multiple REPLs from multiple Vim processes, just
set a different port number for each Vim instance.
Example:
    let g:slimv_port = 10101

                                                               *g:slimv_client*
You may want to use a shell frontend other then the default one (cmd.exe
on Windows, xterm on Linux) or put additional command line parameters
for starting the server.
In this case you can omit the variables above and use g:slimv_client instead.
This is the complete command that is used to start the client. If not set
by the user, this is automatically built from the variables above.

The command format is the following (items in [] are optional):
    <python> <slimv> [-p <port>] -r "<server_cmd>"
Where:
    <python>       is the command to start the Python interpreter
    <slimv>        is the path of Slimv.py
    <port>         is the port number to use (if other than default)
    <server_cmd>   is the command to start the server

The format of <server_cmd> is the following (please remember to enclose the
whole command in double quotes, as this will be passed as one parameter
to the client):
    [<terminal>] <python> <slimv> -l <lisp> -s
Where:
    <terminal>     is the command to open a new terminal window
    <python>       is the command to start the Python interpreter
    <slimv>        is the path of Slimv.py
    <lisp>         is the command to start the Lisp REPL
You can also pass the following shortcuts in <server_cmd>:
    @p             equals <python>
    @s             equals <slimv>
    @@             use it if you need to insert an @ character
    \"             use it to insert a " character
So <server_cmd> can be rewritten in this shorter form:
    [<terminal>] @p @s -l <lisp> -s

The reason behind the duplication of the <python> and <slimv> part is that
you may want to start the server/REPL in a shell frontend that needs
special command line options. For example on Windows I highly recommend
to use Console (http://sourceforge.net/projects/console/) which is greatly
configurable and you also get usable select/copy/paste functions.

Note: Remember to escape with a \ all " characters that are supposed to be
      inside a command line argument, otherwise the argument will be split
      by the shell.

Example to start the Slimv server via Console on Windows:

  let g:slimv_client = 
  \ 'python slimv.py -p 5152 -r "console -r \"/k @p @s -l clisp -s\""'

So the server will be started as if we typed at the command line:

  console -r "/k python slimv.py -l clisp -s"

A similar situation is if you want to use a terminal program other than
xterm on Linux (e.g. Konsole). A typical g:slimv_client setup can be on
Linux for xterm:

  let g:slimv_client =
  \ 'python ~/.vim/plugin/slimv.py -r "xterm -T Slimv -e @p @s -l clisp -s"'

And this can be for Konsole:

  let g:slimv_client =
  \ 'python ~/.vim/plugin/slimv.py -r "konsole -T Slimv -e @p @s -l clisp -s"'

                                                                *g:slimv_debug*
Defines the debug log level. Level 0 means no debug messages at all. The debug
messages go into the logfile defined by |slimv-logfile|.

                                                         *g:slimv_debug_client*
Set this to nonzero if you want to make Vim display the command used to start
the client and any occurrent error messages. This also makes Slimv keep the
Slimv client window open on Windows. This setting is useful to debug problems
when setting up a custom |g:slimv_client| command.

                                                              *g:slimv_logfile*
Name of the Slimv logfile. Defaults to slimv.log.
Used only when |g:slimv_debug| level is nonzero.

                                                          *g:slimv_keybindings*
Defines the keybinding set used by Slimv. Value 0 means no keybinding at all.
Value 1 defines the short keybinding with one-key bindings (after <Leader>).
Value 2 defines the easy keybinding with two-key bindings (after <Leader>).
Other values mean no predefined keybinding is wanted.
The <Leader> is set to ',' by default. 

                                                                 *g:slimv_menu*
If nonzero then the Slimv menu is added to the end of the global menu.
Also the Slimv menu can be shown by pressing <Leader>, (defaults to ,,).


                                                             *g:slimv_repl_dir*
Directory path for the Lisp REPL buffer file. By default this is a directory
for temporary files, something like /tmp/ on Linux or
"C:\Documents and Settings\Username\Local Settings\Temp\" on Windows.
The directory name must end with the pathname separator (/ or \).
See also |g:slimv_repl_file|.

                                                            *g:slimv_repl_file*
The Lisp REPL output is written to a temporary file by the Slimv server.
|g:slimv_repl_file| defines the filename part of the REPL output file without
the directory path. The complete REPL filename is built from
|g:slimv_repl_dir| and |g:slimv_repl_file|.

                                                            *g:slimv_repl_open*
Slimv opens the Lisp REPL buffer inside Vim by default when the Slimv server
is started, so there exist actually two REPL-s with the same contents:
one inside a Vim buffer and another one as a separate terminal window.
The reason behind this is that the simulation is not perfect, which is caused
by the lack of asynchronous update possibilities in Vim. Sometimes the REPL
buffer is not perfectly updated, this is the case for example when a Lisp
program is running too long and it has infrequent outputs only.
In these situations the REPL buffer can be refreshed manually or the
separate REPL window can be used for checking the output.
The |g:slimv_repl_open| = 0 option can be used to disable the built-in REPL
buffer, so that only the separate REPL window is opened.

                                                           *g:slimv_repl_split*
Open the Lisp REPL buffer in a split window or in a separate buffer in Vim.
Used only when |g:slimv_repl_open| is nonzero.

                                                            *g:slimv_repl_wait*
Number of seconds to wait for the REPL output to finish. Zero means inifinity.
While waiting, the output is displayed continuously. During that time the
regular Vim commands are not available. For the posssible commands see
|slimv-repl|.


-------------------------------------------------------------------------------
                                                              *slimv_templates*

Many Slimv commands are performed by creating a special Lisp form from the
selected symbol (or form) and send it to the REPL for execution.
Slimv defines various templates to build these special Lisp forms.
You can override them to suit your needs. Use %1 for substituting the selected
symbol's name or the selected form.
Here follows a list of the templates defined in Slimv.

                                                      *g:slimv_template_pprint*
Lisp form built when issuing the 'pprint' command.
Example:
    let g:slimv_template_pprint = '(dolist (o %1)(pprint o))'

                                                    *g:slimv_template_undefine*
Lisp form built when issuing the 'undefine' command.
Example:
    let g:slimv_template_undefine = '(fmakunbound (read-from-string "%1"))'

                                                    *g:slimv_template_describe*
Lisp form built when issuing the 'describe' command.
Example:
    let g:slimv_template_describe = '(describe (read-from-string "%1"))'

                                                       *g:slimv_template_trace*
Lisp form built when issuing the 'trace' command.
Example:
    let g:slimv_template_trace = "(trace %1)"

                                                     *g:slimv_template_untrace*
Lisp form built when issuing the 'untrace' command.
Example:
    let g:slimv_template_untrace = "(untrace %1)"

                                                     *g:slimv_template_profile*
Lisp form built when issuing the 'profile' command.
Example:
    let g:slimv_template_profile = "(mon:monitor %1)"

                                                   *g:slimv_template_unprofile*
Lisp form built when issuing the 'unprofile' command.
Example:
    let g:slimv_template_unprofile = "(mon:unmonitor %1)"

                                                 *g:slimv_template_disassemble*
Lisp form built when issuing the 'disassemble' command.
Example:
    let g:slimv_template_disassemble = "(disassemble #'%1)"

                                                     *g:slimv_template_inspect*
Lisp form built when issuing the 'inspect' command.
Example:
    let g:slimv_template_inspect = "(inspect %1)"

                                                     *g:slimv_template_apropos*
Lisp form built when issuing the 'apropos' command.
Example:
    let g:slimv_template_apropos = '(apropos "%1")'

                                                 *g:slimv_template_macroexpand*
Lisp form built when issuing the 'macroexpand-1' command, after "defmacro"
string is replaced with "macroexpand-1".
Example:
    let g:slimv_template_macroexpand = '(pprint %1)'

                                             *g:slimv_template_macroexpand_all*
Lisp form built when issuing the 'macroexpand-all' command, after "defmacro"
string is replaced with "macroexpand".
Example:
    let g:slimv_template_macroexpand_all = '(pprint %1)'

                                                *g:slimv_template_compile_file*
Lisp form built when issuing the 'compile-file' command.
Example:
    let g:slimv_template_compile_file = '(compile-file "%1")'


-------------------------------------------------------------------------------
                                                               *slimv_keyboard*

The default keybindings (g:slimv_keybindings=1) for Slimv are the following:

    ,,  Slimv Menu

    ,d  Eval Defun
    ,e  Eval Last Expression
    ,E  Pprint Eval Last Expression
    ,r  Eval Region
    ,b  Eval Buffer
    ,v  Interactive Eval
    ,u  Undefine Function

    ,1  Macroexpand-1
    ,m  Macroexpand
    ,t  Trace
    ,T  Untrace
    ,l  Disassemble
    ,i  Inspect

    ,D  Compile Defun
    ,L  Compile and Load File
    ,F  Compile File
    ,R  Compile Region

    ,p  Profile
    ,P  Unprofile

    ,s  Describe Symbol
    ,a  Apropos

    ,S  Connect to Server
    ,z  Refresh REPL Buffer
    ,Z  Refresh REPL Now

There is another easy to remember built in keybinding set
(g:slimv_keybindings=2):
 
    ,,  Slimv Menu

    Evaluation commands:
    ,ed  Eval Defun
    ,ee  Eval Last Expression
    ,ep  Pprint Eval Last Expression
    ,er  Eval Region
    ,eb  Eval Buffer
    ,ei  Interactive Eval
    ,eu  Undefine Function

    Debug commands:
    ,m1  Macroexpand-1
    ,ma  Macroexpand
    ,dt  Trace
    ,du  Untrace
    ,dd  Disassemble
    ,di  Inspect

    Compile commands:
    ,cd  Compile Defun
    ,cl  Compile and Load File
    ,cf  Compile File
    ,cr  Compile Region

    Profile commands:
    ,pp  Profile
    ,pu  Unprofile

    Documentation commands:
    ,ds  Describe Symbol
    ,da  Apropos

    REPL commands:
    ,rc  Connect to Server
    ,rr  Refresh REPL Buffer
    ,rn  Refresh REPL Now


===============================================================================
USAGE                                                             *slimv-usage*

After proper installation start Vim and load a *.lisp source file into a
buffer. When the first Slimv command is entered (either from the menu or
via keyboard shortcut or entering a :call Slimv...() at the Vim command line)
then Slimv checks if the server/REPL runs and starts it if nedeed.
When the server is running, the Slimv commands send the appropriate Lisp
forms to the server/REPL for processing. That's it.

All you need to know then is the list of possible Slimv commands, how to
enter them and under what conditions.

It is possible to interrupt a running Lisp program by pressing Ctrl+C,
at least in some Lisp implementations, like CLISP (does not work for example
with SBCL).

To end the Lisp session press EOF (Ctrl+D on Linux, Ctrl+Z on Windows)
in the Lisp REPL window. After exiting the REPL it is possible to open
a new one from Vim the same way as before.


===============================================================================
LISP REPL                                                          *slimv-repl*

The Lisp REPL is displayed as a separate terminal window and also inside a
Vim buffer. The Lisp REPL buffer is opened when the Slimv server is started.
The REPL buffer is a more or less regular Vim buffer, all Vim keybindings and
commands can be used here as well.

There are however some subtle differences. The main idea is that the last line
in the REPL buffer is a "command line", just like in any REPL. The command
line usually begins with a prompt, something like "[1] > ". The user types the
command after the prompt in Insert mode. When Enter (<CR>) is pressed, the
contents of the command line (which can actually be multiple lines, when
pasted) is sent to the Lisp REPL for evaluation. It is not allowed to
backspace before the end of the command line prompt.
Please remember that this evaluation style is working only in Insert mode,
in Normal mode the function of <CR> is left unchanged.
Other areas of the REPL buffer can be used to eval Lisp forms, just like
from the .lisp source code. So it is possible to move the cursor inside a form
that was previously eval-ed, make some changes, then eval it again.
Please note, that after evaluation the REPL buffer is refreshed, so the
changes made to the form are restored at that location, but the changed form
will be evaluated at the end of the REPL buffer.

Another difference is the command line history, which can be activated by
pressing <Up> or <Down> in the command line (also only in Insert mode).

The keys with modified meanings in the Lisp REPL buffer are listed below:

Insert Mode:

    <CR>           Sends the command typed in the last line to the Lisp REPL
                   for evaluation.

    <BS>           In the last line it deletes characters to the left only
                   until the end of the Lisp prompt reached.

    <Up>           Brings up the previous command typed and sent to the Lisp
                   REPL.

    <Down>         Brings up the next command typed and sent to the Lisp REPL.

    <C-X><C-X>     Sends a Ctrl+C (SIGINT) signal to the Lisp REPL (see below).

Normal Mode:

    <C-X>          Sends a Ctrl+C (SIGINT) signal to the Lisp REPL (see below).

While waiting for REPL output:

    <C-X>          Sends a Ctrl+C (SIGINT) signal to the Lisp REPL. Useful for
                   interrupting a runaway Lisp program from the Lisp REPL
                   buffer. <C-C> key combination does not seem to work inside
                   Vim, that is why <C-X> has been choosen.

    <ESC>          Stops waiting for REPL output, returns to regular Vim mode.
                   It is possible to return to the continuous refresh mode
                   by selecting the "Refresh REPL Buffer" command.


===============================================================================
CLOJURE SUPPORT                                                 *slimv-clojure*

A basic Clojure support has been introduced in the latest Slimv version.
In order to launch the Clojure REPL the variable |g:slimv_lisp| must be
properly set up.
The simplest definition is something like this, which assumes that the
directory for clojure.jar is in the PATH. Please note that the whole expression
needs to be enclosed in double quotes, as it will be passed to the server in
one single command line argument:

  let g:slimv_lisp = '"java -cp clojure.jar clojure.lang.Repl"'

Here follows an example, which starts c:\Clojure\clojure.jar on Windows.
Remember to escape the backslashes:

  let g:slimv_lisp = '"java -cp c:\\Clojure\\clojure.jar clojure.lang.Repl"'

If Slimv finds the string 'clojure' in |g:slimv_lisp|, then |g:slimv_filetype|
is automatically set to 'clojure'. If it fails to do so, you need to set
|g:slimv_filetype| explicitly.

I strongly recommend to download and install Vim plugin(s) specifically made
for Clojure. Another option is to use the 'lisp' filetype for 'Clojure' files,
which can be set up this way:

  au BufNewFile,BufRead *.clj setf lisp


===============================================================================
FAQ                                                                 *slimv-faq*

- Q: Why is this plugin called 'Slimv'?
- A: Because it is trying to mimic the popular Emacs extension 'SLIME'.
     In SLIME 'E' stands for 'Emacs', so here it is replaced with 'V' as Vim.
     To tell the truth, first I gave the name 'Slimvim' to the plugin but
     then I found an (already abandoned) project called 'Slim-Vim' and I did
     not want to interfere with it.

- Q: Why another 'Superior Lisp Mode' if there is already one (for Emacs)?
- A: Because many programmers prefer Vim as a program text editor over Emacs,
     including me. I don't want to start a holy war or whatsoever, I'm just
     happy if someone else finds this plugin useful.

- Q: But there are other similar projects for Vim. Why having yet another
     SLIMxxx for Vim?
- A: To my knowledge, none of the above mentioned Vim scripts/extensions
     contain all the functionalities of SLIME (nor does Slimv, to tell the
     truth). There is room for improvement, so let's keep on working, and
     then we'll see, which Vim plugin gets the closest to SLIME.
     In my opinion the main barrier is the lack of asynchronous buffer update
     in Vim, but this may change in the future.

- Q: How does Slimv work?
- A: Slimv consists of three parts: Vim plugin, client and server.
     The Slimv server is a swank server that embeds a Lisp REPL.
     The Slimv client interfaces with the server and is responsible
     for sending Lisp commands to the Lisp REPL.
     The Vim plugin is translating editor commands to Lisp commands to be
     sent to the server by the client.
     So the dataflow is like this:
     Vim -> Vim plugin -> Slimv client -> Slimv server -> Lisp REPL
     The plugin resides in 'slimv.vim', the client and the server both
     located in 'slimv.py'.

- Q: Why is SLIME functionality XYZ missing from Slimv?
- A: There are two possible reasons:
     1. The dataflow of Slimv is one-directional: from client to server.
        There is no data sent back from the server to the client, so if a
        functionality requires that Slimv reads data from REPL, then
        currently it is not possible to implement it.
     2. It is possible to implement it, but I did not (yet) do it.
        Maybe future releases will contain it.

- Q: Why is the default port number 5151?
- A: Hint: what roman numerals are 5,1,5,1? Bingo: VI, doubled.

- Q: Are you a Lisp expert?
- A: No, not at all. I'm just learning Lisp. Also just learning Vim
     scripting. And I'm not a Python expert either, however (at the moment)
     I have more experience with Python than with Lisp.

- Q: Why using Python for the client/server code? Why not Lisp?
- A: This is for historical reasons and may change in the future.
     Preliminary versions used Vim's built-in Python support.
     Later on the client/server code was separated from Vim but still remained
     written in Python. On Linux this should not be a problem, most Linux
     distributions contain a Python interpreter with high enough version.
     On Windows this means, you need to install Python, if you don't have
     one (at least version 2.4). Anyway, Python is a nice language and
     also a perfect replacement for calculator.exe :-)

===============================================================================
CHANGE LOG                                                    *slimv-changelog*

0.2.1  - Added basic Clojure support.
       - Corrected macroexpand problems.
       - Fixed a REPL buffer refresh bug.

0.2.0  - Major update: Lisp REPL displayed in a Vim buffer.

0.1.4  - Corrected the delayed display of last line in REPL window on Linux.
       - Ctrl+C is propagated to Lisp REPL, so it is possible to interrupt
         a running program. Does not work however with some Lisp
         implementations (like SBCL).

0.1.3  - Handle DOS and Unix style newlines produced by various
         Lisp implementations on Windows.
       - Do not write debug logfile when debug level is zero.
       - Removed unused client command line argument: -c

0.1.2  - Windows users do not need pywin32 anymore.
       - Display buffer is more thread safe.

0.1.1  - Corrected memory fillup problem after a long REPL session.

0.1    - Initial release.

===============================================================================
ISSUES, LIMITATIONS, KNOWN BUGS                                  *slimv-issues*

- Needs Vim version 7.0 or above, because of the intensive use of lists.
- Vim register 's' is used for all form selections, so its original content is
  destroyed.
- Vim mark 's' is used to mark the end of the REPL buffer, i.e. the beginning
  of the "command line".
- (un)profile does not work
- Needs Python 2.4 or higher (uses the subprocess module)
- Works only via the Python interpreter, does not work using a Python IDE
  (like IDLE).
- Sometimes a Python exception happens after a Ctrl-C followed by an EOF
  (Ctrl-Z or Ctrl-D).
- REPL buffer refresh on Vim focus gain works only in gvim, not in console vim.
- REPL buffer refresh sometimes skipped first time after the server Lisp window
  was just opened.
- Interruption (Ctrl+C or Ctrl+X) does not work with all Lisp implementations.
  For example SBCL exits on Windows when receiving Ctrl+C.
  It does not work in Clojure.
- There are some functions that are not compatible or simply not working for
  Clojure.


===============================================================================
TODO                                                               *slimv-todo*

- Make the script a lisp filetype plugin.
- Start client and server separately having two simpler commands for client
  and server startup, instead of the existing g:slimv_client solution.
- Implement an own main loop in Vim for the REPL buffer, poll REPL output
  regularly, handle all Vim keypresses and commands inside the main loop,
  continuously update the REPL buffer.
- Rewrite client/server in Lisp, so that no Python would be needed,
- Or put the (Python) client part back into the .vim script, rewrite only the
  server part in Lisp.
- Handle specific REPL output in Vim (like compilation notes).
- Add Compile System.
- Add Cross Reference functions.
- Add Profile functions.

===============================================================================
CREDITS                                                         *slimv-credits*

Author: Tamas Kovacs <kovisoft at gmail dot com>

Credit must go out to Bram Moolenaar and all the Vim developers for making
the world's (one of the) best editor.
Also special thanks to Eric Marsden and all the Emacs/SLIME developers for
making SLIME.
Last but not least many thanks to my wife Andrea (for the Italians out there:
hey, this is a female name in Hungary :-) for her support and patience.

===============================================================================
vim:tw=78:noet:wrap:ts=8:ft=help:norl:
